<?xml version="1.0"?>
<test:TestableView xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:utils="dittner.testmyself.deutsch.view.common.utils.*"
                   xmlns:button="dittner.testmyself.deutsch.view.common.button.*"
                   xmlns:mp3="dittner.testmyself.deutsch.view.common.audio.mp3.*"
                   xmlns:common="dittner.testmyself.deutsch.view.test.common.*"
                   xmlns:test="dittner.testmyself.deutsch.view.test.testing.test.*"
                   xmlns:input="dittner.testmyself.deutsch.view.common.input.*"
                   xmlns:common2="dittner.testmyself.deutsch.view.dictionary.common.*">

    <fx:Script><![CDATA[
        import dittner.testmyself.core.model.note.INote;
        import dittner.testmyself.deutsch.model.AppConfig;
        import dittner.testmyself.deutsch.view.common.utils.AppColors;
        import dittner.testmyself.deutsch.view.common.utils.AppSizes;
        import dittner.testmyself.deutsch.view.common.utils.Fonts;
        import dittner.testmyself.deutsch.view.test.common.TestingAction;

        //--------------------------------------
        //  isCorrectlyAnswered
        //--------------------------------------
        private var _isCorrectlyAnswered:Boolean = true;
        [Bindable("isCorrectlyAnsweredChanged")]
        public function get isCorrectlyAnswered():Boolean {return _isCorrectlyAnswered;}
        public function set isCorrectlyAnswered(value:Boolean):void {
            if (_isCorrectlyAnswered != value) {
                _isCorrectlyAnswered = value;
                dispatchEvent(new Event("isCorrectlyAnsweredChanged"));
            }
        }

        //--------------------------------------
        //  note
        //--------------------------------------
        public function get note():INote {
            return activeNote as INote;
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        override protected function commitProperties():void {
            super.commitProperties();
            if (activeNoteChanged) {
                activeNoteChanged = false;
                clear();

                if (note) {
                    stage.focus = phraseInput;

                    titleBoard.text = note.title;
                    translateBoard.text = note.description;

                    if (note.audioComment.bytes) {
                        mp3Player.visible = true;
                        mp3Player.comment = note.audioComment;
                        mp3Player.play();
                    }
                    else {
                        mp3Player.visible = false;
                        mp3Player.comment = null;
                    }
                }
            }
        }

        override protected function clear():void {
            isCorrectlyAnswered = true;
            showDetails = false;
            titleBoard.text = "";
            translateBoard.text = "";
            phraseInput.text = "";
            invalidNotifier.hideImmediately();
            mp3Player.visible = false;
            mp3Player.comment = null;
        }

        private function onCorrectAnswered():void {
            if (actionCallback != null) {
                actionCallback(TestingAction.CORRECT_ANSWER);
                actionCallback(TestingAction.NEXT_TASK);
            }
        }

        private function onAnswered():void {
            if (!answerEnabled || !isCorrectlyAnswered) return;
            var initialText:String = note.title.replace("ß", "ss");
            var inputText:String = phraseInput.text.replace("ß", "ss");
            isCorrectlyAnswered = initialText == inputText;
            notifyAnswered();
        }

        private function notifyAnswered():void {
            if (isCorrectlyAnswered) {
                actionCallback(TestingAction.CORRECT_ANSWER);
                actionCallback(TestingAction.NEXT_TASK);
            }
            else {
                invalidNotifier.show();
                actionCallback(TestingAction.INCORRECT_ANSWER);
                errorsNum++;
            }
        }
        ]]></fx:Script>

    <common:TestHeader id="header"
                       width="100%" height="30" padding="{padding}"
                       title="{title}"
                       description="{durationLbl}"/>

    <s:Group width="100%" top="30" bottom="0">

        <utils:BG width="100%" height="100%" color="{AppColors.WHITE}"/>

        <s:Label text="{'Число ошибок: '+errorsNum}"
                 fontFamily="{Fonts.ROBOTO}"
                 fontSize="12"
                 opaqueBackground="0"
                 mouseChildren="false" mouseEnabled="false"
                 right="{padding + 8}" top="10"
                 color="{AppColors.TEXT_WHITE}"/>

        <s:VGroup width="100%" top="10" bottom="0"
                  gap="15" horizontalAlign="center">

            <s:Label text="{taskNumber + '/' + totalTask}"
                     fontFamily="{Fonts.ROBOTO_COND}"
                     fontWeight="bold"
                     fontSize="18" textAlign="center"
                     mouseChildren="false" mouseEnabled="false"
                     width="100%"
                     color="{AppColors.TEXT_LIGHT}"/>

            <test:TextBoard id="titleBoard"
                            width="{width - 2*padding}" height="100%"
                            questionsIconEnabled="true"
                            title="Исходный текст" showText="{showDetails}"/>

            <test:TextBoard id="translateBoard"
                            width="{width - 2*padding}" height="100%"
                            title="Перевод" showText="{showDetails}"/>

            <input:TextAreaForm id="phraseInput"
                                width="{width - 2*padding}" height="100%"
                                maxChars="{AppConfig.MAX_WORD_LENGTH}"
                                title="Введите озвученный текст"/>

            <button:BlackButton id="validateBtn"
                                width="250"
                                enabled="{answerEnabled}"
                                label="Ответить"
                                click="onAnswered()"/>


            <s:HGroup width="480" gap="15"
                      visible="{!isCorrectlyAnswered}">
                <button:GrayButton id="showAnswerBtn"
                                   width="100%"
                                   label="Показать ответ"
                                   click="showDetails = true"/>

                <button:BlackButton id="nextBtn"
                                    enabled="{answerEnabled}"
                                    width="100%"
                                    label="Дальше"
                                    click="goNext()"/>

            </s:HGroup>

            <common2:InvalidNotifier id="invalidNotifier"
                                     width="480" height="30"
                                     text="Указан неверный ответ"/>

            <s:Group width="100%" bottom="0" height="{AppSizes.EDITOR_FOOTER_HEIGHT}">

                <utils:BG width="100%" height="100%" color="{AppColors.SCREEN_HEADER_BG}"/>

                <mp3:MP3Player id="mp3Player"
                               width="400"
                               left="{padding - 10}"
                               verticalCenter="0"
                               removeRecordEnabled="false"
                               visible="false"
                               skinClass="dittner.testmyself.deutsch.view.common.audio.skins.MP3PlayerSkin"/>

                <button:GrayButton id="cancelBtn"
                                   width="250"
                                   verticalCenter="0"
                                   right="{padding}"
                                   label="Завершить тестирование"
                                   click="goBack()"/>
            </s:Group>
        </s:VGroup>

        <test:RateBoard left="14" complexity="@{complexity}"/>

    </s:Group>

</test:TestableView>
