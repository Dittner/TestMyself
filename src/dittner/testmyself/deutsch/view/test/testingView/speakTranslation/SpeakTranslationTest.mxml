<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:button="dittner.testmyself.deutsch.view.common.button.*"
         xmlns:utils="dittner.testmyself.deutsch.view.common.utils.*"
         xmlns:mp3="dittner.testmyself.deutsch.view.common.audio.mp3.*"
         xmlns:speaktranslation="dittner.testmyself.deutsch.view.test.testingView.speakTranslation.*"
         implements="dittner.testmyself.deutsch.view.test.testingView.ITestableView"
         currentState="presets">

    <fx:Script><![CDATA[
        import dittner.testmyself.core.model.note.INote;
        import dittner.testmyself.deutsch.view.common.utils.AppColors;
        import dittner.testmyself.deutsch.view.common.utils.AppSizes;
        import dittner.testmyself.deutsch.view.test.common.TestingAction;

        import mx.collections.ArrayCollection;

        //--------------------------------------
        //  availableThemes
        //--------------------------------------
        private var _themeColl:ArrayCollection;
        [Bindable("availableThemesChanged")]
        public function get availableThemes():ArrayCollection {return _themeColl;}
        public function set availableThemes(value:ArrayCollection):void {
            if (_themeColl != value) {
                _themeColl = value;
                dispatchEvent(new Event("availableThemesChanged"));
            }
        }

        //--------------------------------------
        //  selectedThemes
        //--------------------------------------
        public function get selectedThemes():Vector.<Object> {return presetsView.themesList.selectedItems;}

        //--------------------------------------
        //  title
        //--------------------------------------
        private var _title:String = "";
        [Bindable("titleChanged")]
        public function get title():String {return _title;}
        public function set title(value:String):void {
            if (_title != value) {
                _title = value;
                dispatchEvent(new Event("titleChanged"));
            }
        }
        //--------------------------------------
        //  audioRecordRequired
        //--------------------------------------
        public function get audioRecordRequired():Boolean {return presetsView.useAudioRecordsBox.selected;}

        //--------------------------------------
        //  isBalancePriority
        //--------------------------------------
        public function get isBalancePriority():Boolean {return presetsView.balanceIndexRadioBtn.selected;}

        //--------------------------------------
        //  activeNote
        //--------------------------------------
        public function get activeNote():INote {return testingView.activeNote;}
        public function set activeNote(value:INote):void {
            testingView.activeNote = value;
            if (value && value.audioComment.bytes) {
                mp3Player.visible = true;
                mp3Player.comment = value.audioComment;
            }
            else {
                mp3Player.visible = false;
                mp3Player.comment = null;
            }
        }

        //--------------------------------------
        //  activeNoteExampleColl
        //--------------------------------------
        private var _activeNoteExampleColl:ArrayCollection;
        public function get activeNoteExampleColl():ArrayCollection {return testingView.exampleList.dataProvider;}
        public function set activeNoteExampleColl(value:ArrayCollection):void {
            testingView.exampleList.dataProvider = value;
        }

        //--------------------------------------
        //  padding
        //--------------------------------------
        private var _padding:Number = 10;
        [Bindable("paddingChanged")]
        public function get padding():Number {return _padding;}
        public function set padding(value:Number):void {
            if (_padding != value) {
                _padding = value;
                dispatchEvent(new Event("paddingChanged"));
            }
        }

        //--------------------------------------
        //  actionCallback
        //--------------------------------------
        private var _actionCallback:Function;
        [Bindable("actionCallbackChanged")]
        public function get actionCallback():Function {return _actionCallback;}
        public function set actionCallback(value:Function):void {
            if (_actionCallback != value) {
                _actionCallback = value;
                dispatchEvent(new Event("actionCallbackChanged"));
            }
        }

        //--------------------------------------
        //  answerEnabled
        //--------------------------------------
        private var _answerEnabled:Boolean = false;
        [Bindable("answerEnabledChanged")]
        public function get answerEnabled():Boolean {return _answerEnabled;}
        public function set answerEnabled(value:Boolean):void {
            if (_answerEnabled != value) {
                _answerEnabled = value;
                dispatchEvent(new Event("answerEnabledChanged"));
            }
        }

        public function get taskNumber():int {return testingView.taskNumber;}
        public function set taskNumber(value:int):void {
            testingView.taskNumber = value;
        }

        public function get totalTask():int {return testingView.totalTask;}
        public function set totalTask(value:int):void {
            testingView.totalTask = value;
        }

        public function showTestingView():void {
            setCurrentState("testing");
        }

        public function abort():void {
            setCurrentState("presets");
            mp3Player.stop();
            mp3Player.visible = false;
            testingView.abort();
            if (actionCallback != null) actionCallback(TestingAction.ABORT_TEST);
        }

        private function startTest():void {
            if (actionCallback != null) actionCallback(TestingAction.START_TEST);
            showTestingView();
            testingView.start();
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="presets"/>
        <s:State name="testing"/>
    </s:states>

    <speaktranslation:SpeakTranslationPresetsView id="presetsView"
                                                  themeColl="{availableThemes}"
                                                  visible="false" visible.presets="true"
                                                  width="100%" top="0" bottom="{AppSizes.EDITOR_FOOTER_HEIGHT + padding}"
                                                  padding="{padding}"/>

    <speaktranslation:SpeakTranslationTestingView id="testingView"
                                                  title="{title}"
                                                  actionCallback="{actionCallback}"
                                                  answerEnabled="{answerEnabled}"
                                                  visible="false" visible.testing="true"
                                                  width="100%" top="0" bottom="{AppSizes.EDITOR_FOOTER_HEIGHT}"
                                                  padding="{padding}"/>

    <s:Group width="100%" bottom="0" height="{AppSizes.EDITOR_FOOTER_HEIGHT}">

        <utils:BG width="100%" height="100%" color="{AppColors.SCREEN_HEADER_BG}"/>

        <mp3:MP3Player id="mp3Player"
                       width="400"
                       left="{padding - 10}"
                       verticalCenter="0"
                       removeRecordEnabled="false"
                       visible="false"
                       skinClass="dittner.testmyself.deutsch.view.common.audio.skins.MP3PlayerSkin"/>

        <button:GrayButton id="cancelBtn"
                           width="250"
                           verticalCenter="0"
                           right="{startTestBtn.width + 1.5*padding}"
                           right.testing="{padding}"
                           label="Вернуться назад" label.testing="Завершить тестирование"
                           click="abort()"/>

        <button:BlackButton id="startTestBtn"
                            width="250"
                            right="{padding}"
                            verticalCenter="0"
                            visible="false" visible.presets="true"
                            label="Начать тестирование"
                            click="startTest()"/>
    </s:Group>
</s:Group>
