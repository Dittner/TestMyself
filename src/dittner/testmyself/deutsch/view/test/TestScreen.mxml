<?xml version="1.0"?>
<core:ScreenBase xmlns:fx="http://ns.adobe.com/mxml/2009"
                 xmlns:core="dittner.testmyself.deutsch.view.common.screen.*"
                 xmlns:s="library://ns.adobe.com/flex/spark"
                 xmlns:list="dittner.testmyself.deutsch.view.common.list.*"
                 xmlns:utils="dittner.testmyself.deutsch.view.common.utils.*"
                 xmlns:button="dittner.testmyself.deutsch.view.common.button.*"
                 xmlns:speakwordtrans="dittner.testmyself.deutsch.view.test.speakWordTrans.*"
                 horizontalCenter="0"
                 currentState="inactive">

    <fx:Script><![CDATA[
        import dittner.testmyself.core.model.test.TestInfo;
        import dittner.testmyself.deutsch.model.domain.common.TestID;
        import dittner.testmyself.deutsch.view.common.utils.AppColors;
        import dittner.testmyself.deutsch.view.common.utils.AppSizes;
        import dittner.testmyself.deutsch.view.common.utils.Fonts;

        import mx.collections.ArrayCollection;

        //--------------------------------------
        //  testInfoColl
        //--------------------------------------
        private var _testInfoColl:ArrayCollection;
        [Bindable("testInfoCollChanged")]
        public function get testInfoColl():ArrayCollection {return _testInfoColl;}
        public function set testInfoColl(value:ArrayCollection):void {
            if (_testInfoColl != value) {
                _testInfoColl = value;
                dispatchEvent(new Event("testInfoCollChanged"));
            }
        }

        public function activate():void {
            setCurrentState("normal");
        }

        public function deactivate():void {
            setCurrentState("inactive");
            testInfoList.selectedItem = null;
        }

        public function showTestSelectionScreen():void {
            setCurrentState("normal");
        }

        private function testApplied():void {
            if (!testInfoList.selectedItem) return;
            var selectedTestID:uint = (testInfoList.selectedItem as TestInfo).id;
            switch (selectedTestID) {
                case TestID.SPEAK_WORD_TRANSLATION :
                    setCurrentState("speakWordTrans");
                    break;
                default :
                    setCurrentState("normal");
            }
        }
        ]]></fx:Script>

    <core:states>
        <s:State name="inactive"/>
        <s:State name="normal"/>
        <s:State name="speakWordTrans"/>
    </core:states>

    <!--content bg-->
    <s:Rect width="100%" height="100%">
        <s:fill>
            <s:BitmapFill source="@Embed(source='/assets/screen/screen_bg_pattern.png')"
                          fillMode="repeat"/>
        </s:fill>
    </s:Rect>

    <!--header bg-->
    <s:Rect width="100%" height="{HEADER_HEI}">
        <s:fill>
            <s:SolidColor color="{AppColors.SCREEN_HEADER_BG}"/>
        </s:fill>
    </s:Rect>

    <s:Label text="{title}"
             fontFamily="{Fonts.ROBOTO}"
             fontSize="16"
             width="100%" height="{HEADER_HEI}"
             verticalAlign="middle"
             paddingLeft="{PADDING}" paddingRight="{PADDING}"
             color="#54545d"/>

    <s:VGroup top="{HEADER_HEI + PADDING}"
              excludeFrom="inactive"
              bottom="0"
              left="0"
              right="0"
              gap="15"
              horizontalAlign="center"
              visible.normal="true" visible="false">

        <list:ListForm id="testInfoList"
                       verticalScrollPolicy="off"
                       horizontalScrollPolicy="off"
                       width="{width - 2*PADDING}"
                       dataProvider="{testInfoColl}"
                       title="Выберите тест из списка стандартных тестов"
                       itemRenderer="dittner.testmyself.deutsch.view.test.common.TestInfoRenderer">
            <list:layout>
                <s:VerticalLayout gap="0" useVirtualLayout="false"/>
            </list:layout>
        </list:ListForm>

        <s:Spacer height="100%"/>

        <s:Group width="100%" height="{AppSizes.EDITOR_FOOTER_HEIGHT}">

            <utils:BG width="100%" height="100%" color="{AppColors.SCREEN_HEADER_BG}"/>

            <button:ApplyButton id="applyTestBtn"
                                width="250"
                                right="{PADDING}"
                                verticalCenter="0"
                                label="Перейти к выбранному тесту"
                                enabled="{testInfoList.selectedItem != null}"
                                click="testApplied()"/>
        </s:Group>
    </s:VGroup>

    <s:Group left="0" top="{HEADER_HEI + PADDING}"
             excludeFrom="inactive"
             right="0" bottom="0">

        <speakwordtrans:SpeakWordTrans id="speakWordTrans"
                                       width="100%" height="100%"
                                       padding="{PADDING}"
                                       visible.speakWordTrans="true" visible="false"/>
    </s:Group>

</core:ScreenBase>
