<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:audio="dittner.testmyself.deutsch.view.common.audio.*"
         xmlns:editor="dittner.testmyself.deutsch.view.common.editor.*"
         xmlns:input="dittner.testmyself.deutsch.view.common.input.*"
         xmlns:list="dittner.testmyself.deutsch.view.common.list.*"
         xmlns:button="dittner.testmyself.deutsch.view.common.button.*"
         xmlns:listBox="dittner.testmyself.deutsch.view.dictionary.common.articleList.*"
         xmlns:examplelist="dittner.testmyself.deutsch.view.dictionary.common.examplesForm.*"
         xmlns:lettersbar="dittner.testmyself.deutsch.view.dictionary.common.lettersBar.*"
         xmlns:common2="dittner.testmyself.deutsch.view.dictionary.common.*"
         xmlns:form="dittner.testmyself.deutsch.view.dictionary.verb.form.*"
         maxHeight.remove="300"
         initialize="initializeHandler(event)">

    <fx:Script><![CDATA[
        import dittner.testmyself.core.model.note.INote;
        import dittner.testmyself.core.model.theme.ITheme;
        import dittner.testmyself.deutsch.model.AppConfig;
        import dittner.testmyself.deutsch.model.ModuleName;
        import dittner.testmyself.deutsch.model.domain.word.WordArticle;
        import dittner.testmyself.deutsch.view.common.renderer.AddedThemeItemRenderer;
        import dittner.testmyself.deutsch.view.common.renderer.ThemeItemRenderer;
        import dittner.testmyself.deutsch.view.common.utils.AppColors;
        import dittner.testmyself.deutsch.view.common.utils.AppSizes;
        import dittner.testmyself.deutsch.view.dictionary.common.NoteUtils;
        import dittner.testmyself.deutsch.view.dictionary.lesson.form.LessonFormState;
        import dittner.testmyself.deutsch.view.dictionary.verb.form.VerbFormState;
        import dittner.testmyself.deutsch.view.dictionary.word.form.WordFormState;

        import mx.collections.ArrayCollection;
        import mx.events.FlexEvent;

        import spark.components.supportClasses.TextInputOperation;
        import spark.events.TextOperationEvent;

        //--------------------------------------
        //  title
        //--------------------------------------
        private var _title:String = "";
        [Bindable("titleChanged")]
        public function get title():String {return _title;}
        public function set title(value:String):void {
            if (_title != value) {
                _title = value;
                dispatchEvent(new Event("titleChanged"));
            }
        }

        //--------------------------------------
        //  themes
        //--------------------------------------
        private var _themes:ArrayCollection = new ArrayCollection();
        [Bindable("themesChanged")]
        public function get themes():ArrayCollection {return _themes;}
        public function set themes(value:ArrayCollection):void {
            if (_themes != value) {
                _themes = value;
                dispatchEvent(new Event("themesChanged"));
            }
        }

        //--------------------------------------
        // moduleName
        //--------------------------------------
        private var moduleNameChanged:Boolean = false;
        private var _moduleName:String;
        [Bindable("moduleNameChanged")]
        public function get moduleName():String {return _moduleName;}
        public function set moduleName(value:String):void {
            if (_moduleName != value) {
                _moduleName = value;
                moduleNameChanged = true;
                invalidateProperties();
                validateNow();
                dispatchEvent(new Event("moduleNameChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        private var curFormState:NoteFormState;
        private var defaultFormState:NoteFormState;
        private var wordFormState:NoteFormState;
        private var verbFormState:NoteFormState;
        private var lessonFormState:NoteFormState;

        private function initializeHandler(event:FlexEvent):void {
            defaultFormState = new NoteFormState(this);
            wordFormState = new WordFormState(this);
            verbFormState = new VerbFormState(this);
            lessonFormState = new LessonFormState(this);

            curFormState = defaultFormState;
        }

        override protected function commitProperties():void {
            super.commitProperties()
            if (moduleNameChanged) {
                moduleNameChanged = false;
                curFormState.clear();
                switch (moduleName) {
                    case ModuleName.WORD :
                        curFormState = wordFormState;
                        break;
                    case ModuleName.VERB :
                        curFormState = verbFormState;
                        break;
                    case ModuleName.LESSON :
                        curFormState = lessonFormState;
                        break;
                    default :
                        curFormState = defaultFormState;
                }
            }
        }

        public function add():void {
            currentState = "add";
            curFormState.add();
        }

        public function edit(note:INote):void {
            currentState = "edit";
            invalidateDisplayList();
            curFormState.edit(note);
        }

        public function remove(note:INote):void {
            currentState = "remove";
            curFormState.remove(note);
        }

        public function close():void {
            if (isOpen()) {
                curFormState.clear();
                setCurrentState("normal");
            }
        }

        public function isOpen():Boolean {
            return currentState == "add" || currentState == "edit" || currentState == "remove";
        }

        public function notifyInvalidData(msg:String):void {
            if (invalidNotifier) {
                invalidNotifier.text = msg;
                invalidNotifier.show();
            }
        }

        private function correctText():void {
            curFormState.correctText();
        }

        override protected function updateDisplayList(w:Number, h:Number):void {
            super.updateDisplayList(w, h);
            curFormState.updateLayout(w, h);
        }

        private function themesRendererFunc(item:Object):IFactory {
            var theme:ITheme = item as ITheme;
            if (theme.id == -1) return new ClassFactory(AddedThemeItemRenderer);
            else return new ClassFactory(ThemeItemRenderer);
        }

        private function applyBtnEnabled(audioRecording:Boolean):Boolean {
            return !audioRecording;
        }

        private function wordValidationHandler(event:TextOperationEvent):void {
            if (event.operation is TextInputOperation) {
                var inputOperation:TextInputOperation = event.operation as TextInputOperation;
                var regexp:RegExp = NoteUtils.LETTERS;
                var match:Object = regexp.exec(inputOperation.text);
                if (match == null) event.preventDefault();
            }
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="disabled"/>
        <s:State name="normal"/>
        <s:State name="add"/>
        <s:State name="edit"/>
        <s:State name="remove"/>
    </s:states>

    <editor:EditorBg width="100%"
                     height="100%"
                     title="{title}"
                     mode.add="add"
                     mode.edit="edit"
                     mode.remove="remove"/>

    <lettersbar:LettersBar right="20" top="5" visible.remove="false"/>

    <s:Rect left="{EditorBg.BORDER_THICKNESS}"
            right="{EditorBg.BORDER_THICKNESS}"
            bottom="{EditorBg.BORDER_THICKNESS}"
            height="{AppSizes.EDITOR_FOOTER_HEIGHT}">
        <s:fill>
            <s:SolidColor color="{AppColors.SCREEN_HEADER_BG}"/>
        </s:fill>
    </s:Rect>

    <!--ADD EDIT MODE-->

    <s:Group width="100%" height="100%"
             visible.add="true"
             visible.edit="true"
             visible="false">
        <listBox:ListBox id="articleBox"
                         verticalScrollPolicy="off"
                         requireSelection="true"
                         width="77"
                         itemRenderer="dittner.testmyself.deutsch.view.dictionary.common.articleList.ArticleItemRenderer"
                         skinClass="dittner.testmyself.deutsch.view.dictionary.common.articleList.ListBoxSkin"
                         dataProvider="{new ArrayCollection(WordArticle.ARTICLES)}"/>

        <input:TextAreaForm id="titleArea"
                            title="Deutschsatz"
                            maxChars="{AppConfig.MAX_TEXT_LENGTH}"/>

        <input:TextInputForm id="wordInput"
                             maxChars="{AppConfig.MAX_WORD_LENGTH}"
                             changing="wordValidationHandler(event)"
                             title="Deutschtwort"/>

        <form:VerbInputsForm id="verbInputsForm"/>

        <input:TextInputForm id="wordOptionsInput"
                             maxChars="{AppConfig.MAX_WORD_LENGTH}"
                             title="Zusätzliche Daten"/>

        <input:TextAreaForm id="descriptionArea"
                            maxChars="{AppConfig.MAX_TEXT_LENGTH}"
                            title="Übersetzung"/>

        <examplelist:ExamplesForm id="examplesForm" mainForm="{this}"/>

        <audio:AudioRecorder id="audioRecorder"/>

        <list:ListForm id="themesList"
                       dataProvider="{themes}"
                       title="Themenliste"
                       itemRendererFunction="themesRendererFunc"
                       allowMultipleSelection="true">
            <list:layout>
                <s:VerticalLayout gap="0" useVirtualLayout="false"/>
            </list:layout>
        </list:ListForm>

        <input:TextInputForm id="addThemeInput"
                             maxChars="{AppConfig.MAX_THEME_NAME_LENGTH}"
                             title="Neuer Themaname"/>

        <button:BitmapButton id="addThemeBtn"
                             description="Neues Thema hinzufügen"
                             upImage="@Embed(source='/assets/button/add_element_btn_up.png')"
                             downImage="@Embed(source='/assets/button/add_element_btn_down.png')"/>

        <common2:InvalidNotifier id="invalidNotifier"/>
    </s:Group>

    <button:GrayButton id="cancelBtn"
                       label="Abbrechen"/>

    <button:BlackButton id="applyBtn"
                        label.add="Hinzufügen"
                        label.edit="Speichern"
                        label.remove="Entfernen"
                        enabled.remove="true"
                        enabled="{applyBtnEnabled(audioRecorder.isRecording)}"
                        click="correctText()"/>

    <!--REMOVE MODE-->

    <s:Label id="removeTitleLbl"
             visible.remove="true" visible="false"
             textAlign="center"
             color="{AppColors.TEXT_DARK}" fontSize="16"
             text="Sind Sie sicher, das Sie entfernen möchten?"/>

    <s:Label id="removeNoteTitleLbl"
             visible.remove="true" visible="false"
             color="{AppColors.TEXT_DARK}" fontSize="20" fontWeight="bold"
             textAlign="center" verticalAlign="middle"/>

</s:Group>
