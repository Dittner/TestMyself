<?xml version="1.0"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          gap="0">

    <fx:Metadata>
        [Event(name="changing", type="spark.events.TextOperationEvent")]
        [Event(name="change", type="spark.events.TextOperationEvent")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import dittner.testmyself.deutsch.view.common.utils.AppColors;
        import dittner.testmyself.deutsch.view.common.utils.Fonts;

        import mx.core.UIComponent;

        import spark.events.TextOperationEvent;

        private static const TITLE_HEIGHT:uint = 20;

        //--------------------------------------
        //  text
        //--------------------------------------
        private var _text:String = "";
        [Bindable("textChanged")]
        public function get text():String {return _text;}
        public function set text(value:String):void {
            if (_text != value) {
                _text = value;
                dispatchEvent(new Event("textChanged"));
            }
        }

        //--------------------------------------
        //  title
        //--------------------------------------
        private var _title:String = "";
        [Bindable("titleChanged")]
        public function get title():String {return _title;}
        public function set title(value:String):void {
            if (_title != value) {
                _title = value;
                dispatchEvent(new Event("titleChanged"));
            }
        }

        //--------------------------------------
        //  showTitle
        //--------------------------------------
        private var _showTitle:Boolean = true;
        [Bindable("showTitleChanged")]
        public function get showTitle():Boolean {return _showTitle;}
        public function set showTitle(value:Boolean):void {
            if (_showTitle != value) {
                _showTitle = value;
                dispatchEvent(new Event("showTitleChanged"));
            }
        }

        //--------------------------------------
        //  maxChars
        //--------------------------------------
        private var _maxChars:int = NaN;
        [Bindable("maxCharsChanged")]
        public function get maxChars():int {return _maxChars;}
        public function set maxChars(value:int):void {
            if (_maxChars != value) {
                _maxChars = value;
                dispatchEvent(new Event("maxCharsChanged"));
            }
        }

        //--------------------------------------
        //  isValidInput
        //--------------------------------------
        private var _isValidInput:Boolean = true;
        [Bindable("isValidInputChanged")]
        public function get isValidInput():Boolean {return _isValidInput;}
        public function set isValidInput(value:Boolean):void {
            if (_isValidInput != value) {
                _isValidInput = value;
                dispatchEvent(new Event("isValidInputChanged"));
                invalidateDisplayList();
            }
        }

        override protected function updateDisplayList(w:Number, h:Number):void {
            super.updateDisplayList(w, h);
            if (!area || w == 0 || h == 0) return;
            var g:Graphics = graphics;
            g.clear();
            g.lineStyle(1, isValidInput ? AppColors.INPUT_BORDER : AppColors.INVALID_INPUT_BORDER);
            g.beginFill(AppColors.INPUT_CONTENT);
            g.drawRect(0, area.y, area.width - 1, area.height - 1);
            g.endFill();
        }

        private function area_changeHandler(event:TextOperationEvent):void {
            dispatchEvent(event.clone());
        }
        ]]></fx:Script>

    <s:Label width="100%" maxDisplayedLines="1" height="20"
             text="{title}"
             fontSize="14"
             visible="{showTitle}"
             includeInLayout="{showTitle}"
             color="{AppColors.TEXT_DARK}"
             fontFamily="{Fonts.ROBOTO}"/>

    <s:TextArea id="area"
                width="100%" height="100%"
                text="@{text}"
                fontSize="14"
                color="#333333"
                fontFamily="{Fonts.ROBOTO_MX}"
                focusSkin="{UIComponent}"
                borderVisible="false"
                change="area_changeHandler(event)"/>
</s:VGroup>
