<?xml version="1.0"?>
<core:ScreenBase xmlns:fx="http://ns.adobe.com/mxml/2009"
                 xmlns:s="library://ns.adobe.com/flex/spark"
                 xmlns:core="dittner.testmyself.deutsch.view.common.screen.*"
                 xmlns:list="dittner.testmyself.deutsch.view.note.list.*"
                 xmlns:toolbar="dittner.testmyself.deutsch.view.note.toolbar.*"
                 xmlns:editor="dittner.testmyself.deutsch.view.note.form.*"
                 xmlns:mp3="dittner.testmyself.deutsch.view.common.audio.mp3.*"
                 xmlns:filter="dittner.testmyself.deutsch.view.common.filter.*"
                 xmlns:navigation="dittner.testmyself.deutsch.view.common.pagination.*" xmlns:utils="dittner.testmyself.deutsch.view.common.utils.*"
                 currentState="inactive"
                 horizontalCenter="0">

    <fx:Script><![CDATA[
        import dittner.testmyself.deutsch.view.common.utils.AppColors;
        import dittner.testmyself.deutsch.view.common.utils.AppSizes;
        import dittner.testmyself.deutsch.view.common.utils.Fonts;
        import dittner.testmyself.deutsch.view.note.form.NoteType;

        //--------------------------------------
        //  editing
        //--------------------------------------
        private var _editing:Boolean = false;
        [Bindable("editingChanged")]
        public function get editing():Boolean {return _editing;}
        public function set editing(value:Boolean):void {
            if (_editing != value) {
                _editing = value;
                dispatchEvent(new Event("editingChanged"));
            }
        }
        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        public function activate(noteType:String):void {
            switch (noteType) {
                case NoteType.PHRASE :
                    setCurrentState("phrase");
                    break;
                case NoteType.WORD :
                    setCurrentState("word");
                    break;
                case NoteType.VERB :
                    setCurrentState("verb");
                    break;
            }
        }

        public function deactivate():void {
            editing = false;
            mp3Player.visible = false;
            setCurrentState("inactive");
        }

        public function showEditor():void {
            editing = true;
        }

        public function hideEditor():void {
            editing = false;
        }

        override protected function updateDisplayList(w:Number, h:Number):void {
            super.updateDisplayList(w, h);
            if (form) {
                form.width = Math.min(w, AppSizes.EDITOR_MAX_WIDTH);
                form.x = w - form.width;
            }
        }
        ]]></fx:Script>

    <core:states>
        <s:State name="disabled"/>
        <s:State name="inactive"/>
        <s:State name="phrase"/>
        <s:State name="word"/>
        <s:State name="verb"/>
    </core:states>

    <!--content bg-->
    <s:Rect width="100%" height="100%">
        <s:fill>
            <s:BitmapFill source="@Embed(source='/assets/screen/screen_bg_pattern.png')"
                          fillMode="repeat"/>
        </s:fill>
    </s:Rect>

    <utils:BG excludeFrom="inactive" width="100%" height="100%" color="#ffFFff"/>

    <!--header bg-->
    <s:Rect width="100%" height="{HEADER_HEI}">
        <s:fill>
            <s:SolidColor color="{AppColors.SCREEN_HEADER_BG}"/>
        </s:fill>
    </s:Rect>

    <s:HGroup width="100%" height="{HEADER_HEI}"
              verticalAlign="middle"
              paddingLeft="{PADDING}" paddingRight="{PADDING}">

        <s:Label text="{title}"
                 fontFamily="{Fonts.ROBOTO}"
                 fontSize="16"
                 paddingTop="2"
                 width="100%"
                 color="#54545d"/>

        <toolbar:NoteToolbar id="toolbar"
                             excludeFrom="inactive"
                             width="100%"
                             height="{HEADER_HEI}"/>
    </s:HGroup>

    <s:HGroup left="-1" right="-1" top="{HEADER_HEI}" bottom="{FOOTER_HEI}" gap="-1">
        <s:Scroller width="100%" height="100%"
                    excludeFrom="inactive"
                    minViewportInset="1"
                    hasFocusableChildren="false">
            <list:NoteList id="list"
                           width="100%"
                           contentBackgroundAlpha="0"
                           deselectEnabled="true"
                           itemRenderer="dittner.testmyself.deutsch.view.note.common.renderer.NoteRenderer"
                           itemRenderer.word="dittner.testmyself.deutsch.view.note.common.renderer.WordRenderer">
                <list:layout>
                    <s:VerticalLayout gap="0" useVirtualLayout="false"/>
                </list:layout>
            </list:NoteList>
        </s:Scroller>

        <list:ExampleList id="exampleList"
                          width="66%" height="100%"
                          excludeFrom="inactive"
                          visible="false"
                          includeInLayout="false"
                          hasFocusableChildren="false"/>
    </s:HGroup>


    <!--footer-->
    <s:Group width="100%" height="{FOOTER_HEI}" bottom="0"
             excludeFrom="inactive">
        <s:Rect width="100%" bottom="0" height="100%">
            <s:fill>
                <s:SolidColor color="{AppColors.SCREEN_HEADER_BG}"/>
            </s:fill>
        </s:Rect>


        <mp3:MP3Player id="mp3Player"
                       width="400"
                       left="{PADDING - 10}"
                       verticalCenter="0"
                       removeRecordEnabled="false"
                       visible="false"
                       skinClass="dittner.testmyself.deutsch.view.common.audio.skins.MP3PlayerSkin"/>

        <navigation:PaginationBar id="paginationBar"
                                  left="{PADDING}" right="{PADDING}"
                                  height="100%"/>

    </s:Group>


    <s:Group width="100%" height="100%"
             excludeFrom="inactive"
             visible="{editing}"
             mouseEnabled="{editing}">
        <s:Rect width="100%" height="100%">
            <s:fill>
                <s:SolidColor color="{AppColors.EDITOR_SHADOW}" alpha=".5"/>
            </s:fill>
        </s:Rect>

        <editor:NoteForm id="form"
                         visible="false"
                         bottom="0"
                         noteType.phrase="{NoteType.PHRASE}"
                         noteType.word="{NoteType.WORD}"
                         noteType.verb="{NoteType.VERB}"
                         top="{HEADER_HEI}"/>

        <filter:ThemeFilter id="filter"
                            width="350"
                            visible="false"
                            right="0"
                            bottom="0"
                            top="{HEADER_HEI}"/>
    </s:Group>

</core:ScreenBase>
