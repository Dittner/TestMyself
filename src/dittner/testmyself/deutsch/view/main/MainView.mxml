<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:busyindicator="dittner.testmyself.deutsch.view.common.busyIndicator.*"
         xmlns:list="dittner.testmyself.deutsch.view.common.list.*"
         height="100%" width="100%"
         addedToStage="addedToStageHandler(event)">
    <fx:Script><![CDATA[
        import dittner.testmyself.deutsch.service.screenFactory.ScreenInfo;
        import dittner.testmyself.deutsch.view.common.popup.SimplePopup;
        import dittner.testmyself.deutsch.view.common.renderer.SeparatorItemRenderer;
        import dittner.testmyself.deutsch.view.common.renderer.SeparatorVo;
        import dittner.testmyself.deutsch.view.common.screen.ScreenBase;
        import dittner.testmyself.deutsch.view.common.utils.AppColors;

        import mx.collections.ArrayCollection;

        //--------------------------------------
        //  screenListProvider
        //--------------------------------------
        private var _screenListProvider:ArrayCollection;
        [Bindable("screenListProviderChanged")]
        public function get screenListProvider():ArrayCollection {return _screenListProvider;}
        public function set screenListProvider(value:ArrayCollection):void {
            if (_screenListProvider != value) {
                _screenListProvider = value;
                dispatchEvent(new Event("screenListProviderChanged"));
            }
        }

        //--------------------------------------
        //  selectedScreenInfo
        //--------------------------------------
        private var _selectedScreenInfo:ScreenInfo;
        [Bindable("selectedScreenInfoChanged")]
        public function get selectedScreenInfo():ScreenInfo {return _selectedScreenInfo;}
        public function set selectedScreenInfo(value:ScreenInfo):void {
            if (_selectedScreenInfo != value) {
                _selectedScreenInfo = value;
                dispatchEvent(new Event("selectedScreenInfoChanged"));
            }
        }

        private function screenRendererFunc(item:Object):IFactory {
            if (item is ScreenInfo) return new ClassFactory(ScreenListItemRenderer);
            else if (item is SeparatorVo) return new ClassFactory(SeparatorItemRenderer);
            else throw new Error("Unknown screen item type:" + item.toString() + "!");
        }

        public function addScreen(screen:ScreenBase):void {
            screenCont.addElement(screen);
        }

        public function removeScreen():void {
            screenCont.removeAllElements();
        }

        public function lock():void {
            setCurrentState("lock");
        }

        public function unlock():void {
            setCurrentState("normal");
        }

        private function addedToStageHandler(event:Event):void {
            SimplePopup.container.percentHeight = 100;
            SimplePopup.container.percentWidth = 100;
            popupLayer.addElement(SimplePopup.container);
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="disabled"/>
        <s:State name="normal"/>
        <s:State name="lock"/>
    </s:states>

    <s:BitmapImage width="100%" height="100%"
                   source="@Embed('/assets/app_bg.png')"
                   fillMode="scale" scaleMode="zoom" smooth="true"/>

    <s:Group id="screenCont"
             left="66" right="0"
             height="100%"/>

    <s:Rect width="66" height="100%">
        <s:fill>
            <s:SolidColor color="{AppColors.SCREEN_LIST_BG}"/>
        </s:fill>
    </s:Rect>

    <list:SelectableDataGroup id="screenList"
                              width="66" height="100%"
                              minWidth="0"
                              dataProvider="{screenListProvider}"
                              selectedItem="{selectedScreenInfo}"
                              contentBackgroundAlpha="0"
                              autoLayout="true"
                              itemRendererFunction="screenRendererFunc">
        <list:layout>
            <s:VerticalLayout gap="0" useVirtualLayout="false" variableRowHeight="true"/>
        </list:layout>
    </list:SelectableDataGroup>

    <s:Group id="popupLayer" width="100%" height="100%"/>

    <s:Group id="busyIndicatorLayer" width="100%" height="100%">
        <s:Rect width="100%" height="100%"
                visible="false" visible.lock="true">
            <s:fill>
                <s:SolidColor color="#aaAAaa" alpha=".5"/>
            </s:fill>
        </s:Rect>

        <busyindicator:ClockBusyIndicator verticalCenter="0" horizontalCenter="33"
                                          visible="false" visible.lock="true"/>
    </s:Group>

</s:Group>
