<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         implements="dittner.testmyself.view.common.tooltip.IManualToolTip"
         addedToStage="addedToStageHandler(event)"
         removedFromStage="removedFromStageHandler(event)"
         mouseChildren="false" mouseEnabled="false"
         maxWidth="200" minWidth="200">

    <fx:Script><![CDATA[
        import dittner.testmyself.view.common.utils.AppColors;
        import dittner.testmyself.view.common.utils.Fonts;

        //--------------------------------------
        //  text
        //--------------------------------------
        private var _text:String;
        [Bindable("textChanged")]
        public function get text():String {return _text;}
        public function set text(value:String):void {
            if (_text != value) {
                _text = value;
                dispatchEvent(new Event("textChanged"));
            }
        }

        public function orient(stageX:Number, stageY:Number, arrowDirection:String):void {
            setArrowDirection(arrowDirection);
            validateSize();

            var arrowPos:Point = getArrowPosition(arrowDirection);
            x = stageX - arrowPos.x;
            y = stageY - arrowPos.y;
        }

        //--------------------------------------
        //  position
        //--------------------------------------
        private var _arrowDirection:String;
        private function setArrowDirection(value:String):void {
            if (_arrowDirection != value) {
                _arrowDirection = value;
                switch (_arrowDirection) {
                    case ToolTipPos.TOP :
                        setCurrentState("topArrow");
                        break;
                    case ToolTipPos.BOTTOM :
                        setCurrentState("bottomArrow");
                        break;
                    case ToolTipPos.LEFT :
                        setCurrentState("leftArrow");
                        break;
                    case ToolTipPos.RIGHT :
                        setCurrentState("rightArrow");
                        break;
                    default :
                        setCurrentState("normal");
                        break;
                }
            }
        }

        //--------------------------------------
        //  arrowLocalPos
        //--------------------------------------
        private var arrowPos:Point = new Point();
        private function getArrowPosition(direction:String):Point {
            switch (direction) {
                case ToolTipPos.TOP :
                    arrowPos.x = getExplicitOrMeasuredWidth() - 37;
                    arrowPos.y = 2;
                    break;
                case ToolTipPos.BOTTOM :
                    arrowPos.x = getExplicitOrMeasuredWidth() - 37;
                    arrowPos.y = getExplicitOrMeasuredHeight() - 2;
                    break;
                case ToolTipPos.LEFT :
                    arrowPos.x = 2;
                    arrowPos.y = 37;
                    break;
                case ToolTipPos.RIGHT :
                    arrowPos.x = getExplicitOrMeasuredWidth() - 2;
                    arrowPos.y = 37;
                    break;
                default :
                    arrowPos.x = 0;
                    arrowPos.y = 0;
                    break;
            }
            return arrowPos;
        }

        private function addedToStageHandler(event:Event):void {
            fadeEffect.play();
        }

        private function removedFromStageHandler(event:Event):void {
            if (fadeEffect.isPlaying) {
                fadeEffect.stop();
                alpha = 0;
            }
        }
        ]]></fx:Script>

    <fx:Declarations>
        <s:Fade id="fadeEffect"
                alphaFrom="0"
                alphaTo="1"
                duration="500"
                target="{this}"/>
    </fx:Declarations>

    <s:states>
        <s:State name="disabled"/>
        <s:State name="normal"/>
        <s:State name="topArrow"/>
        <s:State name="bottomArrow"/>
        <s:State name="leftArrow"/>
        <s:State name="rightArrow"/>
    </s:states>

    <s:BitmapImage width="100%" height="100%"
                   smooth="true"
                   source.leftArrow="@Embed(source='/assets/tooltip/tooltip_left.png', scaleGridLeft='37', scaleGridRight='38', scaleGridTop='46', scaleGridBottom='47')"
                   source.topArrow="@Embed(source='/assets/tooltip/tooltip_top.png', scaleGridLeft='27', scaleGridRight='29', scaleGridTop='30', scaleGridBottom='31')"
                   source.rightArrow="@Embed(source='/assets/tooltip/tooltip_right.png', scaleGridLeft='37', scaleGridRight='38', scaleGridTop='48', scaleGridBottom='49')"
                   source.bottomArrow="@Embed(source='/assets/tooltip/tooltip_right.png', scaleGridLeft='26', scaleGridRight='27', scaleGridTop='30', scaleGridBottom='31')"
            />

    <s:Label left="25" right="25" top="25" bottom="25"
             verticalAlign="middle"
             textAlign="center"
             fontFamily="{Fonts.VERDANA}"
             fontSize="14"
             color="{AppColors.TEXT_YELLOW}"
             text="{text}"/>
</s:Group>
