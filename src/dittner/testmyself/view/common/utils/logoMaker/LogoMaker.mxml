<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         mask="{maskObj}">

    <fx:Script><![CDATA[
        import dittner.testmyself.model.AppConfig;
        import dittner.testmyself.view.common.utils.Fonts;

        import mx.graphics.codec.PNGEncoder;

        private var words:Array = [
            "House", "sterben", "Informationen", "Auskünfte", "streiten", "zuwiderlaufen", "Straße", "Zug", "Tischlampe", "Grundstücksverkehrsgenehmigungs", "zuständigkeitsübertragungsverordnung", "Rindfleischetickettierung", "überwachungsaufgabenübertragungsgesetz", "Verkehrsinfrastruktur", "finanzierungsgesellschaft", "Gleichgewichtsdichte", "gradientenzentrifugation", "Elektrizitätswirtschaft", "sorganisationsgesetz", "Verkehrswegeplanungs", "beschleunigungsgesetz", "Hochleistungsflüssigkeits", "chromatographie", "Restriktionsfragment", "längenpolymorphismus", "Telekommunikations", "überwachungsverordnung", "Unternehmenssteuerfortentwicklungsgesetz", "Erstimmatrikulationsbescheinigung", "Bundesausbildungsförderungsgesetz", "Rechtsschutzversicherungsgesellschaften", "Donaudampfschifffahrtsgesellschaftskapitänswitwe", "Donaudampfschifffahrtselektrizitäten", "hauptbetriebswerkbauunter", "beamtengesellschaft", "Gemutlichkeit", "Sehnsucht", "allein", "sein", "Frauelein", "Menschheit", "Kosmologie", "Oper", "vergessen", "Gewissensbisse", "Vergissmeinnicht", "Habseligkeiten", "Geborgenheit", "Augenblick", "Entschuldigung", "kennenzulernen", "Vergnuegen", "Gefühle", "Einheit", "Leben", "Liebe", "Kampf", "Musik", "Kunst", "Informationsmaterial", "Literatur", "Einsatzübung", "lesen", "verben", "existieren", "Psychologie", "Mythologie", "Nibelungen", "dämonenhaft", "stark", "deutsch", "Heimatland", "Arbeit", "Tradition", "Sprache", "Kultur", "Objektivität", "Zielbewusstheit", "Präzision", "Pünktlichkeit", "Genauigkeit", "Disziplin", "Bücher", "Ordnung", "Freiheit", "Wörterbuch", "Metaphysik", "Wissenschaft", "Philosophie", "Geist", "Einsamkeit", "Zusammengehörigkeit"];

        private var alphabet:Array = [
            "A", "Z", "z", "u", "t", "z", "U", "W", "w", "o", "r", "ö", "B", "ö", "i", "ä", "ß", "ß", "ü", "s", "ü", "Ö", "Ä", "Ü"
        ];

        private var cards:Array = [];
        private var buchen:Array = [];
        private var size:int;

        [Bindable]
        public var borderSize:int;
        [Bindable]
        public var padding:int = 30;

        public function create(size:int):void {
            this.size = size;
            maskObj.width = size + 2 * padding;
            maskObj.height = size + 2 * padding;
            width = size + 2 * padding;
            height = size + 2 * padding;

            var minFontSize:int;
            var maxFontSize:int;
            var offset:int;
            switch (size) {
                case (32) :
                    offset = 0;
                    minFontSize = 2;
                    maxFontSize = 5;
                    logoLbl.setStyle("fontSize", 8);
                    borderSize = 1;
                    break;
                case (36) :
                    offset = 0;
                    minFontSize = 2;
                    maxFontSize = 5;
                    logoLbl.setStyle("fontSize", 10);
                    borderSize = 1;
                    break;
                case (48) :
                    offset = 0;
                    minFontSize = 2;
                    maxFontSize = 5;
                    logoLbl.setStyle("fontSize", 12);
                    borderSize = 1;
                    break;
                case (50) :
                case (57) :
                case (58) :
                case (60) :
                case (64) :
                    offset = 0;
                    minFontSize = 3;
                    maxFontSize = 6;
                    logoLbl.setStyle("fontSize", 14);
                    borderSize = 2;
                    break;
                case (72) :
                    offset = 1;
                    minFontSize = 5;
                    maxFontSize = 8;
                    logoLbl.setStyle("fontSize", 18);
                    borderSize = 2;
                    break;
                case (96) :
                case (100) :
                    offset = 2;
                    minFontSize = 6;
                    maxFontSize = 10;
                    logoLbl.setStyle("fontSize", 24);
                    borderSize = 3;
                    break;
                case (114) :
                case (128) :
                case (144) :
                    offset = 2;
                    minFontSize = 6;
                    maxFontSize = 12;
                    logoLbl.setStyle("fontSize", 28);
                    borderSize = 4;
                    break;
                case (150) :
                    offset = 4;
                    minFontSize = 8;
                    maxFontSize = 16;
                    logoLbl.setStyle("fontSize", 36);
                    borderSize = 4;
                    break;
                case (256) :
                    offset = 5;
                    minFontSize = 10;
                    maxFontSize = 24;
                    logoLbl.setStyle("fontSize", 50);
                    borderSize = 8;
                    break;
                case (512) :
                    offset = 8;
                    minFontSize = 14;
                    maxFontSize = 36;
                    logoLbl.setStyle("fontSize", 50);
                    borderSize = 10;
                    break;
            }

            var card:TextCard;
            for each(var text:String in words) {
                card = new TextCard(offset, 90, 0x888c92, minFontSize, maxFontSize);
                card.text = text;
                cards.push(card);
                canvas.addChild(card);
            }

            var ind:int = 0;
            for (var i:int = 0; i < 50; i++) {
                card = new TextCard(offset, -90, 0xffFFff, minFontSize, maxFontSize);
                ind = Math.floor(Math.random() * (alphabet.length - 1));
                card.text = alphabet[ind];
                buchen.push(card);
                canvas.addChild(card);
            }

            reformat();
        }

        public function reformat():void {
            var w:Number = size;
            var h:Number = size;
            var card:TextCard;

            for each(card in cards) {
                card.x = Math.random() * (w + 2 * padding - card.measuredWidth) - padding;
                card.y = Math.random() * (h + 2 * padding - card.measuredHeight) - padding;
                if (card.x + card.measuredWidth > width + padding) card.x = width + padding - card.measuredWidth;
            }

            for each(card in buchen) {
                card.x = Math.random() * (w + 2 * padding - card.measuredWidth) - padding;
                card.y = Math.random() * (h + 2 * padding - card.measuredHeight) - padding;
                if (card.x + card.measuredWidth > width + padding) card.x = width + padding - card.measuredWidth;
            }
        }

        override protected function updateDisplayList(w:Number, h:Number):void {
            super.updateDisplayList(w, h);
        }

        public function saveLogo():void {
            var bd:BitmapData = new BitmapData(size + 2 * padding, size + 2 * padding, true, 0);
            bd.draw(this);
            var ba:ByteArray = new PNGEncoder().encode(bd);
            ba.position = 0;

            var fileStream:FileStream = new FileStream();
            var file:File = File.documentsDirectory.resolvePath(AppConfig.dbRootPath + "image.png");
            fileStream.open(file, FileMode.WRITE);
            fileStream.writeBytes(ba, 0, ba.length);
            fileStream.close();
        }
        ]]></fx:Script>
    <fx:Declarations>
        <s:Group id="maskObj">
            <s:Rect width="100%" height="100%">
                <s:fill>
                    <s:SolidColor/>
                </s:fill>
            </s:Rect>
        </s:Group>
    </fx:Declarations>


    <mx:UIComponent id="canvas" x="{padding}" y="{padding}" width="{size + 2*padding}" height="{size + 2*padding}"/>

    <s:Label id="logoLbl" width="100%" height="100%"
             textAlign="center" verticalAlign="middle"
             fontWeight="bold"
             color="#ffcc00" fontFamily="{Fonts.ROBOTO_COND}"
             text="TEST MYSELF">
        <s:filters>
            <s:DropShadowFilter color="0" alpha="1" angle="-90" blurX="5" blurY="5" inner="false" distance="0"/>
        </s:filters>
    </s:Label>
    <!--
        <utils:BG width="100%" height="{borderSize}" color="0"/>
        <utils:BG width="100%" height="{borderSize}" color="0" bottom="0"/>
        <utils:BG width="{borderSize}" height="100%" color="0"/>
        <utils:BG width="{borderSize}" height="100%" color="0" right="0"/>-->
</s:Group>
