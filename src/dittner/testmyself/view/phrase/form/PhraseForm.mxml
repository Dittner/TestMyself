<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:audio="dittner.testmyself.view.common.audio.*"
         xmlns:editor="dittner.testmyself.view.common.editor.*"
         xmlns:input="dittner.testmyself.view.common.input.*"
         xmlns:list="dittner.testmyself.view.common.list.*"
         xmlns:button="dittner.testmyself.view.common.button.*"
         xmlns:common="dittner.testmyself.view.common.*"
         maxHeight.remove="300">

    <fx:Script><![CDATA[
        import dittner.testmyself.model.AppConfig;
        import dittner.testmyself.model.theme.ITheme;
        import dittner.testmyself.view.common.renderer.AddedThemeItemRenderer;
        import dittner.testmyself.view.common.renderer.ThemeItemRenderer;
        import dittner.testmyself.view.common.utils.AppColors;
        import dittner.testmyself.view.common.utils.AppSizes;

        import mx.collections.ArrayCollection;

        //--------------------------------------
        //  title
        //--------------------------------------
        private var _title:String = "";
        [Bindable("titleChanged")]
        public function get title():String {return _title;}
        public function set title(value:String):void {
            if (_title != value) {
                _title = value;
                dispatchEvent(new Event("titleChanged"));
            }
        }

        //--------------------------------------
        //  themes
        //--------------------------------------
        private var _themes:ArrayCollection = new ArrayCollection();
        [Bindable("themesChanged")]
        public function get themes():ArrayCollection {return _themes;}
        public function set themes(value:ArrayCollection):void {
            if (_themes != value) {
                _themes = value;
                dispatchEvent(new Event("themesChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        public function add():void {
            currentState = "add";
        }

        public function edit(origin:String, translation:String, audioRecord:ByteArray):void {
            currentState = "edit";
            if (originArea) originArea.text = origin;
            if (translationArea) translationArea.text = translation;
            if (audioRecorder) audioRecorder.mp3Data = audioRecord;
        }

        public function remove(origin:String):void {
            removePhraseNameLbl.text = '«' + origin + '»';
            currentState = "remove";
        }

        public function close():void {
            if (isOpen()) {
                clear();
                setCurrentState("normal");
            }
        }

        public function isOpen():Boolean {
            return currentState == "add" || currentState == "edit" || currentState == "remove";
        }

        private function clear():void {
            if (originArea) originArea.text = "";
            if (translationArea) translationArea.text = "";
            if (addThemeInput) addThemeInput.text = "";
            if (audioRecorder) audioRecorder.clear();
            themes = new ArrayCollection();
        }

        public function notifyInvalidData(msg:String):void {
            if (invalidNotifier) {
                invalidNotifier.text = msg;
                invalidNotifier.show();
            }
        }

        private static const HEADER_HEI:uint = EditorBg.HEADER_HEIGHT;
        private static const FOOTER_HEI:uint = AppSizes.EDITOR_FOOTER_HEIGHT;
        private static const PAD:uint = 20;
        private static const PAD_TOP:uint = 10;
        private static const HGAP:uint = 10;
        private static const VGAP:uint = 5;
        private static const THEMES_LIST_WID:uint = 250;
        private static const RECORDER_HEI:uint = 72;

        override protected function updateDisplayList(w:Number, h:Number):void {
            super.updateDisplayList(w, h);

            originArea.x = PAD;
            originArea.y = HEADER_HEI + PAD_TOP;
            originArea.height = (h - FOOTER_HEI - HEADER_HEI - PAD - PAD_TOP - 2 * VGAP - RECORDER_HEI) / 2;
            originArea.width = w - 2 * PAD - HGAP - THEMES_LIST_WID;

            translationArea.x = originArea.x;
            translationArea.y = originArea.y + originArea.height + VGAP;
            translationArea.height = originArea.height;
            translationArea.width = originArea.width;

            audioRecorder.x = PAD;
            audioRecorder.y = originArea.y + 2 * originArea.height + 2 * VGAP;
            audioRecorder.width = originArea.width;
            audioRecorder.height = RECORDER_HEI;

            themesList.x = translationArea.x + translationArea.width + HGAP;
            themesList.y = HEADER_HEI + PAD_TOP;
            themesList.height = 2 * originArea.height + VGAP;

            addThemeInput.x = themesList.x;
            addThemeInput.y = themesList.y + themesList.height + VGAP;
            addThemeInput.width = themesList.width - addThemeBtn.width + 1;

            addThemeBtn.x = addThemeInput.x + addThemeInput.width - 1;
            addThemeBtn.y = addThemeInput.y + 20;

            applyBtn.width = themesList.width;
            applyBtn.right = PAD;
            applyBtn.bottom = (FOOTER_HEI - applyBtn.height + EditorBg.BORDER_THICKNESS) / 2;

            cancelBtn.right = applyBtn.width + applyBtn.right + HGAP;
            cancelBtn.bottom = applyBtn.bottom;
            cancelBtn.width = applyBtn.width;
            cancelBtn.height = applyBtn.height;

            invalidNotifier.left = PAD;
            invalidNotifier.right = cancelBtn.width + cancelBtn.right + HGAP;
            invalidNotifier.bottom = applyBtn.bottom;
            invalidNotifier.height = applyBtn.height;

            removeTitleLbl.left = PAD;
            removeTitleLbl.right = PAD;
            removeTitleLbl.top = HEADER_HEI + PAD_TOP;

            removePhraseNameLbl.left = PAD;
            removePhraseNameLbl.right = PAD;
            removePhraseNameLbl.top = removeTitleLbl.y + removeTitleLbl.height + VGAP;
            removePhraseNameLbl.bottom = FOOTER_HEI + VGAP;
        }

        private function themesRendererFunc(item:Object):IFactory {
            var theme:ITheme = item as ITheme;
            if (theme.id == -1) return new ClassFactory(AddedThemeItemRenderer);
            else return new ClassFactory(ThemeItemRenderer);
        }

        private function applyBtnEnabled(audioRecording:Boolean):Boolean {
            return !audioRecording;
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="disabled"/>
        <s:State name="normal"/>
        <s:State name="add"/>
        <s:State name="edit"/>
        <s:State name="remove"/>
    </s:states>


    <editor:EditorBg width="100%"
                     height="100%"
                     title="{title}"
                     mode.add="add"
                     mode.edit="edit"
                     mode.remove="remove"/>

    <s:Rect left="{EditorBg.BORDER_THICKNESS}"
            right="{EditorBg.BORDER_THICKNESS}"
            bottom="{EditorBg.BORDER_THICKNESS}"
            height="{FOOTER_HEI}">
        <s:fill>
            <s:SolidColor color="{AppColors.SCREEN_HEADER_BG}"/>
        </s:fill>
    </s:Rect>


    <!--ADD EDIT MODE-->

    <s:Group width="100%" height="100%"
             visible.add="true"
             visible.edit="true"
             visible="false">

        <input:TextAreaForm id="originArea"
                            title="Исходный текст"
                            maxChars="{AppConfig.MAX_PHRASE_LENGTH}"/>

        <input:TextAreaForm id="translationArea"
                            maxChars="{AppConfig.MAX_PHRASE_LENGTH}"
                            title="Перевод"/>


        <audio:AudioRecorder id="audioRecorder"
                             height="{RECORDER_HEI}"/>

        <list:ListForm id="themesList"
                       width="{THEMES_LIST_WID}"
                       dataProvider="{themes}"
                       title="Список тем"
                       itemRendererFunction="themesRendererFunc"
                       allowMultipleSelection="true">
            <list:layout>
                <s:VerticalLayout gap="0" useVirtualLayout="false"/>
            </list:layout>
        </list:ListForm>

        <input:TextInputForm id="addThemeInput"
                             maxChars="{AppConfig.MAX_THEME_LENGTH}"
                             title="Название новой темы"/>

        <button:BitmapButton id="addThemeBtn"
                             description="Создать новую тему"
                             upImage="@Embed(source='/assets/button/add_element_btn_up.png')"
                             downImage="@Embed(source='/assets/button/add_element_btn_down.png')"/>

        <common:InvalidNotifier id="invalidNotifier"/>
    </s:Group>


    <button:CancelButton id="cancelBtn"
                         label="Отменить"/>

    <button:ApplyButton id="applyBtn"
                        label.add="Создать"
                        label.edit="Сохранить"
                        label.remove="Удалить"
                        enabled.remove="true"
                        enabled="{applyBtnEnabled(audioRecorder.isRecording)}"/>


    <!--REMOVE MODE-->

    <s:Label id="removeTitleLbl"
             visible.remove="true" visible="false"
             textAlign="center"
             color="{AppColors.TEXT_DARK}" fontSize="16"
             text="Вы действительно хотите безвозвратно удалить выбранный элемент?"/>

    <s:Label id="removePhraseNameLbl"
             visible.remove="true" visible="false"
             color="{AppColors.TEXT_DARK}" fontSize="20" fontWeight="bold"
             textAlign="center" verticalAlign="middle"/>

</s:Group>
