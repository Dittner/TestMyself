<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         percentHeight="50"
         left="{AppSizes.MENU_WID + 5}"
         right="{AppSizes.MENU_WID + 5}">

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.Device;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.utils.Values;

        import mx.collections.ArrayCollection;

        import spark.events.TextOperationEvent;

        private static const HEADER_HEI:Number = Values.PT50;

        [Embed(source='/assets/close_icon_small.png')]
        private static const CloseSmallIconClass:Class;
        [Embed(source='/assets/close_icon_large.png')]
        private static const CloseLargeIconClass:Class;

        //--------------------------------------
        //  logNoteColl
        //--------------------------------------
        private var _logNoteColl:ArrayCollection;
        [Bindable("logNoteCollChanged")]
        public function get logNoteColl():ArrayCollection {return _logNoteColl;}
        public function set logNoteColl(value:ArrayCollection):void {
            if (_logNoteColl != value) {
                if (logNoteColl) logNoteColl.filterFunction = null;
                _logNoteColl = value;
                if (logNoteColl) logNoteColl.filterFunction = categoryFilterFunc;

                dispatchEvent(new Event("logNoteCollChanged"));
            }
        }

        //--------------------------------------
        //  isPaused
        //--------------------------------------
        private var _isPaused:Boolean = false;
        [Bindable("isPausedChanged")]
        public function get isPaused():Boolean {return _isPaused;}
        public function set isPaused(value:Boolean):void {
            if (_isPaused != value) {
                _isPaused = value;
                if (!isPaused) refresh();
                dispatchEvent(new Event("isPausedChanged"));
            }
        }

        //--------------------------------------
        //  headerBgColor
        //--------------------------------------
        [Bindable("isPausedChanged")]
        public function get headerBgColor():uint {return isPaused ? 0x670f28 : 0;}

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        public function refresh():void {
            if (!isPaused) logNoteColl.refresh();
        }

        private var isDragging:Boolean = false;
        private var downYPos:Number = 0;
        private function headerMouseDownHandler(event:MouseEvent):void {
            if (!isDragging) {
                isDragging = true;
                downYPos = event.localY;
                stage.addEventListener(MouseEvent.MOUSE_MOVE, moveHandler);
                stage.addEventListener(MouseEvent.MOUSE_UP, upHandler);
            }
        }

        private function upHandler(event:MouseEvent):void {
            if (isDragging) {
                isDragging = false;
                if (stage) {
                    stage.removeEventListener(MouseEvent.MOUSE_MOVE, moveHandler);
                    stage.removeEventListener(MouseEvent.MOUSE_MOVE, moveHandler);
                }
            }
        }

        private function moveHandler(event:MouseEvent):void {
            y = event.stageY - downYPos;
        }

        private function tagFilterChangeHandler(event:TextOperationEvent):void {
            refresh();
        }

        private function categoryFilterFunc(note:LogNote):Boolean {
            return tagFilterInput.text.length < 2 || note.tag.toLowerCase().indexOf(tagFilterInput.text.toLowerCase()) != -1;
        }

        private function pauseRunBtnTitle(isPaused:Boolean):String {
            return isPaused ? "Запустить" : "Пауза";
        }
        ]]></fx:Script>

    <s:Rect width="100%" top="{HEADER_HEI}" bottom="0">
        <s:fill>
            <s:SolidColor color="#0a0c28" alpha=".85"/>
        </s:fill>
    </s:Rect>

    <s:Group width="100%" height="{HEADER_HEI}"
             mouseDown="headerMouseDownHandler(event)">
        <s:Rect width="100%" height="100%" topLeftRadiusX="10" topLeftRadiusY="10" topRightRadiusX="10" topRightRadiusY="10">
            <s:fill>
                <s:SolidColor color="{headerBgColor}"/>
            </s:fill>
        </s:Rect>

        <s:HGroup width="100%" height="{HEADER_HEI}"
                  gap="{Values.PT10}" verticalAlign="middle"
                  paddingLeft="{Values.PT15}" paddingTop="{Values.PT5}">
            <s:TextInput id="tagFilterInput"
                         width="{Values.PT350}"
                         borderVisible="false" scaleX=".75" scaleY=".75"
                         prompt="Фильтровать логи"
                         fontSize="{Values.PT20}"
                         paddingTop="0" paddingBottom="0"
                         change="tagFilterChangeHandler(event)"/>

            <s:Spacer width="100%"/>

            <s:Label id="pauseRunBtn"
                     width="{Values.PT150}" height="100%" verticalAlign="middle" textAlign="center"
                     text="{pauseRunBtnTitle(isPaused)}"
                     color="#ccCCcc"
                     fontSize="{Values.PT18}"
                     click="isPaused = !isPaused"/>
        </s:HGroup>

        <s:Image id="closeBtn"
                 source="{Device.factor > 1.5 ? CloseLargeIconClass : CloseSmallIconClass}"
                 right="{-Values.PT15}"
                 top="{-Values.PT25}"/>

    </s:Group>

    <s:List id="previewsList"
            left="{Values.PT5}" right="{Values.PT5}" top="{HEADER_HEI}" bottom="{Values.PT5}"
            borderVisible="false"
            contentBackgroundAlpha="0"
            dataProvider="{logNoteColl}"
            itemRenderer="de.dittner.testmyself.logging.LogNoteItemRenderer">
        <s:layout>
            <s:VerticalLayout id="verticalLayout"
                              gap="0" variableRowHeight="true" useVirtualLayout="true"/>
        </s:layout>
    </s:List>

</s:Group>
