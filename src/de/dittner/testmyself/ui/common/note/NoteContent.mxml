<?xml version="1.0"?>
<common:Container xmlns:fx="http://ns.adobe.com/mxml/2009"
                  xmlns:s="library://ns.adobe.com/flex/spark"
                  xmlns:note="de.dittner.testmyself.ui.common.note.*"
                  xmlns:navigation="de.dittner.testmyself.ui.view.noteList.components.pagination.*"
                  xmlns:common="de.dittner.testmyself.ui.common.*"
                  xmlns:scroller="de.dittner.testmyself.ui.common.scroller.*"
                  moveDirectionWhenHiding="right">
    <fx:Metadata>
        [Event(name="selectedItemChange", type="flash.events.Event")]
        [Event(name="pageNumChanged", type="flash.events.Event")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.domain.note.Note;
        import de.dittner.testmyself.model.domain.test.TestTask;
        import de.dittner.testmyself.ui.common.audio.mp3.MP3Player;
        import de.dittner.testmyself.ui.common.menu.IActionMenu;
        import de.dittner.testmyself.ui.common.menu.NoteToolbar;
        import de.dittner.testmyself.ui.common.menu.ToolAction;
        import de.dittner.testmyself.ui.common.menu.ToolActionEvent;
        import de.dittner.testmyself.ui.common.page.INotePage;
        import de.dittner.testmyself.ui.common.renderer.INoteRenderer;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.utils.Values;

        import mx.collections.IList;

        //----------------------------------------------------------------------------------------------
        //
        //  Properties
        //
        //----------------------------------------------------------------------------------------------

        //--------------------------------------
        //  selectedItem
        //--------------------------------------
        private var _selectedItem:*;
        [Bindable("selectedItemChanged")]
        public function get selectedItem():* {return _selectedItem;}
        public function set selectedItem(value:*):void {
            if (_selectedItem != value) {
                _selectedItem = value;
                dispatchEvent(new Event("selectedItemChanged"));
            }
        }

        public function updateSelectedItem():void {
            if (noteCard) noteCard.invalidateProperties();
            if (noteList) {
                var selectedRenderer:INoteRenderer = noteList.getSelectedRenderer() as INoteRenderer;
                if (selectedRenderer) selectedRenderer.invalidatePropertiesSizeAndDisplayList();
            }
            dispatchEvent(new Event("selectedItemChanged"));
        }

        //--------------------------------------
        //  selectedNote
        //--------------------------------------
        private var _selectedNote:Note;
        [Bindable("selectedItemChanged")]
        public function get selectedNote():Note {
            return selectedItem is TestTask ? (selectedItem as TestTask).note : selectedItem as Note;
        }

        //--------------------------------------
        //  page
        //--------------------------------------
        private var _page:INotePage;
        [Bindable("pageChanged")]
        public function get page():INotePage {return _page;}
        public function set page(value:INotePage):void {
            if (_page != value) {
                _page = value;
                dispatchEvent(new Event("pageChanged"));
            }
        }

        //----------------------------------
        //  dataProvider
        //----------------------------------

        private var _dataProvider:IList;
        [Bindable("dataProviderChanged")]
        public function get dataProvider():IList {return _dataProvider;}
        public function set dataProvider(value:IList):void {
            if (_dataProvider != value) {
                _dataProvider = value;
                dispatchEvent(new Event("dataProviderChanged"));
            }
        }

        //--------------------------------------
        //  toolbar
        //--------------------------------------
        private var _toolbar:NoteToolbar;
        [Bindable("toolbarChanged")]
        public function get toolbar():NoteToolbar {return _toolbar;}
        private function setToolbar(value:NoteToolbar):void {
            if (_toolbar != value) {
                if (_toolbar)  _toolbar.removeEventListener(ToolActionEvent.SELECTED, actionSelectedHandler);
                _toolbar = value;
                if (_toolbar)  _toolbar.addEventListener(ToolActionEvent.SELECTED, actionSelectedHandler);
                dispatchEvent(new Event("toolbarChanged"));
            }
        }

        //--------------------------------------
        //  actionMenu
        //--------------------------------------
        private var _actionMenu:IActionMenu;
        [Bindable("actionMenuChanged")]
        public function get actionMenu():IActionMenu {return _actionMenu;}
        private function setActionMenu(value:IActionMenu):void {
            if (_actionMenu != value) {
                if (_actionMenu)  _actionMenu.removeEventListener(ToolActionEvent.SELECTED, actionSelectedHandler);
                _actionMenu = value;
                if (_actionMenu)  _actionMenu.addEventListener(ToolActionEvent.SELECTED, actionSelectedHandler);
                dispatchEvent(new Event("actionMenuChanged"));
            }
        }

        //--------------------------------------
        //  isNoteCardShown
        //--------------------------------------
        private var _isNoteCardShown:Boolean = false;
        private var isNoteCardShownChanged:Boolean = false;
        [Bindable("isNoteCardShownChanged")]
        public function get isNoteCardShown():Boolean {return _isNoteCardShown;}
        public function set isNoteCardShown(value:Boolean):void {
            if (_isNoteCardShown != value) {
                _isNoteCardShown = value;
                isNoteCardShownChanged = true;
                invalidateProperties();
                dispatchEvent(new Event("isNoteCardShownChanged"));
            }
        }

        //--------------------------------------
        //  searchText
        //--------------------------------------
        private var _searchText:String = "";
        [Bindable("searchTextChanged")]
        public function get searchText():String {return _searchText;}
        public function set searchText(value:String):void {
            if (_searchText != value) {
                _searchText = value || "";
                renderOptions.searchText = searchText;
                invalidateRenderOptions();
                dispatchEvent(new Event("searchTextChanged"));
            }
        }

        //--------------------------------------
        //  showWordArticle
        //--------------------------------------
        private var _showWordArticle:Boolean = true;
        [Bindable("showWordArticleChanged")]
        public function get showWordArticle():Boolean {return _showWordArticle;}
        public function set showWordArticle(value:Boolean):void {
            if (_showWordArticle != value) {
                _showWordArticle = value || "";
                renderOptions.showWordArticle = showWordArticle;
                invalidateRenderOptions();
                dispatchEvent(new Event("showWordArticleChanged"));
            }
        }

        //--------------------------------------
        //  showNotesInverted
        //--------------------------------------
        private var _showNotesInverted:Boolean = false;
        [Bindable("showNotesInvertedChanged")]
        public function get showNotesInverted():Boolean {return _showNotesInverted;}
        public function set showNotesInverted(value:Boolean):void {
            if (_showNotesInverted != value) {
                _showNotesInverted = value || "";
                renderOptions.inverted = showNotesInverted;
                invalidateRenderOptions();
                dispatchEvent(new Event("showNotesInvertedChanged"));
            }
        }

        //--------------------------------------
        //  activated
        //--------------------------------------
        private var _activated:Boolean = false;
        [Bindable("activatedChanged")]
        public function get activated():Boolean {return _activated;}
        private function setActivated(value:Boolean):void {
            if (_activated != value) {
                _activated = value;
                dispatchEvent(new Event("activatedChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        private var renderOptions:NoteRenderOptions = new NoteRenderOptions();
        public function activate(toolbar:NoteToolbar, actionMenu:IActionMenu):void {
            setToolbar(toolbar);
            setActionMenu(actionMenu);
            toolbar.transInvertBtn.selected = renderOptions.inverted;
            toolbar.showDetailsBtn.selected = renderOptions.showDetails;
            setActivated(true);
            noteList.renderOptions = renderOptions;
        }

        public function deactivate():void {
            setActivated(false);
            hideNoteCard();
        }

        public function hideNoteCard():void {
            isNoteCardShown = false;
            noteList.selectedItem = null;
            MP3Player.instance.stop();
        }

        override protected function commitProperties():void {
            super.commitProperties();
            if (isNoteCardShownChanged && activated) {
                isNoteCardShownChanged = false;
                if (isNoteCardShown) {
                    toolbar.goBackBtn.enabled = true;
                    actionMenu.showNavigationMenu()
                }
                else {
                    actionMenu.hide();
                }
            }
            listCont.visible = !isNoteCardShown;
            noteCard.visible = isNoteCardShown;
        }

        private var needSelectFirstNote:Boolean = false;
        private var needSelectLastNote:Boolean = false;
        private function actionSelectedHandler(event:ToolActionEvent):void {
            if (!activated) return;
            switch (event.actionID) {
                case(ToolAction.PREV_NOTE) :
                    if (noteList.dataProvider && noteList.dataProvider.length > 0) {
                        if (!noteList.selectedItem) {
                            noteList.selectedItem = noteList.dataProvider[0];
                        }
                        else if (noteList.selectedIndex > 0) {
                            noteList.selectedIndex--;
                        }
                        else if (paginationBar.pageNum > 0) {
                            if (page) page.number--;
                            needSelectLastNote = true;
                        }
                    }
                    break;
                case(ToolAction.NEXT_NOTE) :
                    if (noteList.dataProvider && noteList.dataProvider.length > 0) {
                        if (!noteList.selectedItem) {
                            noteList.selectedItem = noteList.dataProvider[0];
                        }
                        else if (noteList.selectedIndex < noteList.dataProvider.length - 1) {
                            noteList.selectedIndex++;
                        }
                        else if (paginationBar.pageNum < paginationBar.totalPages - 1) {
                            if (page) page.number++;
                            needSelectFirstNote = true;
                        }
                    }
                    break;
                case(ToolAction.APPLY_INVERT) :
                    renderOptions.inverted = true;
                    invalidateRenderOptions();
                    break;
                case(ToolAction.DENY_INVERT) :
                    renderOptions.inverted = false;
                    invalidateRenderOptions();
                    break;
                case(ToolAction.HIDE_DETAILS) :
                    renderOptions.showDetails = false;
                    invalidateRenderOptions();
                    break;
                case(ToolAction.SHOW_DETAILS) :
                    renderOptions.showDetails = true;
                    invalidateRenderOptions();
                    break;
            }
        }

        private function invalidateRenderOptions():void {
            if (activated && noteList) noteList.invalidateRenderView();
        }

        private function noteList_selectedItemChangeHandler(event:Event):void {
            if (noteList.selectedItem)
                isNoteCardShown = true;
            noteCard.noteNumber = paginationBar.pageNum * paginationBar.pageSize + (noteList.selectedIndex || 0);
            noteCard.totalNotes = paginationBar.allNotesAmount;
            dispatchEvent(event.clone());
        }

        private function noteList_dataProviderChangedHandler(event:Event):void {
            if (!noteList.dataProvider || noteList.dataProvider.length == 0) {
                needSelectFirstNote = false;
                needSelectLastNote = false;
                return;
            }

            if (needSelectFirstNote) {
                needSelectFirstNote = false;
                noteList.selectedItem = noteList.dataProvider[0];
            }
            else if (needSelectLastNote) {
                needSelectLastNote = false;
                noteList.selectedItem = noteList.dataProvider[noteList.dataProvider.length - 1];
            }
        }

        private function pageNumChanged(event:Event):void {
            dispatchEvent(event.clone());
        }
        ]]></fx:Script>

    <common:Container id="listCont"
                      width="{width}"
                      height="100%">
        <common:BG percentWidth="100" percentHeight="100" fillColor="{AppColors.BG}"/>

        <scroller:CustomScroller width="100%"
                                 top="0" bottom="{AppSizes.SCREEN_FOOTER_HEIGHT}"
                                 horizontalScrollPolicy="off"
                                 hasFocusableChildren="false">
            <note:NoteList id="noteList"
                           selectedItem="@{selectedItem}"
                           dataProvider="{dataProvider}"
                           width="{width}"
                           contentBackgroundAlpha="0"
                           deselectEnabled="true"
                           itemRenderer="de.dittner.testmyself.ui.view.noteList.components.renderer.NoteRenderer"
                           selectedItemChange="noteList_selectedItemChangeHandler(event)"
                           dataProviderChanged="noteList_dataProviderChangedHandler(event)">
                <note:layout>
                    <s:VerticalLayout gap="0" useVirtualLayout="false"/>
                </note:layout>
            </note:NoteList>
        </scroller:CustomScroller>

        <!--footer-->
        <common:BG percentWidth="100" height="{AppSizes.SCREEN_FOOTER_HEIGHT}"
                   bottom="0" fillColor="{AppColors.SCREEN_FOOTER_BG}"/>

        <s:HGroup width="100%" height="{AppSizes.SCREEN_FOOTER_HEIGHT}" bottom="0"
                  verticalAlign="middle"
                  opaqueBackground="{AppColors.SCREEN_FOOTER_BG}">
            <s:Spacer width="50%"/>

            <navigation:PaginationBar id="paginationBar"
                                      allNotesAmount="{page.allNotesAmount}"
                                      notesOnCurPage="{page.coll.length}"
                                      pageSize="{page.size}"
                                      pageNum="@{page.number}"
                                      height="100%"
                                      pageNumChanged="pageNumChanged(event)"/>

            <s:Label id="tagsLbl"
                     text="{page.selectedTag.name}"
                     height="100%" width="50%" textAlign="right" paddingRight="{Values.PT10}"
                     fontSize="{Values.PT14}" verticalAlign="middle" paddingTop="1"
                     maxDisplayedLines="1"
                     color="{AppColors.BLACK}"/>
        </s:HGroup>
    </common:Container>

    <note:NoteCard id="noteCard"
                   visible="false"
                   width="{width}"
                   searchText="{searchText}"
                   height="100%"
                   note="{activated ? selectedNote : null}"
                   moveDirectionWhenHiding="right"/>

</common:Container>
