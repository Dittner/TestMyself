<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:common="de.dittner.testmyself.ui.common.list.*"
         xmlns:input="de.dittner.testmyself.ui.common.input.*"
         xmlns:tile="de.dittner.testmyself.ui.common.tile.*"
         xmlns:common2="de.dittner.testmyself.ui.common.*"
         xmlns:note="de.dittner.testmyself.ui.common.note.*">

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.Device;
        import de.dittner.testmyself.ui.common.ZeroPos;
        import de.dittner.testmyself.ui.common.popup.SimplePopup;
        import de.dittner.testmyself.ui.common.tile.TileID;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.utils.Values;

        import flashx.textLayout.formats.TextAlign;

        import mx.collections.ArrayCollection;

        //--------------------------------------
        //  dataProvider
        //--------------------------------------
        private var _dataProvider:ArrayCollection;
        [Bindable("dataProviderChanged")]
        public function get dataProvider():ArrayCollection {return _dataProvider;}
        public function set dataProvider(value:ArrayCollection):void {
            if (_dataProvider != value) {
                _dataProvider = value;
                dispatchEvent(new Event("dataProviderChanged"));
            }
        }

        //--------------------------------------
        //  title
        //--------------------------------------
        private var _title:String = "";
        [Bindable("titleChanged")]
        public function get title():String {return _title;}
        public function set title(value:String):void {
            if (_title != value) {
                _title = value;
                dispatchEvent(new Event("titleChanged"));
            }
        }

        //--------------------------------------
        //  showTitle
        //--------------------------------------
        private var _showTitle:Boolean = true;
        [Bindable("showTitleChanged")]
        public function get showTitle():Boolean {return _showTitle;}
        public function set showTitle(value:Boolean):void {
            if (_showTitle != value) {
                _showTitle = value;
                dispatchEvent(new Event("showTitleChanged"));
            }
        }

        //--------------------------------------
        //  selectedItem
        //--------------------------------------
        private var _selectedItem:String = "";
        [Bindable("selectedItemChanged")]
        public function get selectedItem():String {return _selectedItem;}
        public function set selectedItem(value:String):void {
            if (_selectedItem != value) {
                _selectedItem = value;
                dispatchEvent(new Event("selectedItemChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        private function dropdownBtnChangeHandler(event:Event):void {
            if (!SimplePopup.isShownInPopup(listCont) && dropdownBtn.selected) {
                listCont.width = dropdownBtn.width;
                SimplePopup.show(listCont, false, templateListCloseHandler, 0, 0);
                var btnPos:Point = dropdownBtn.localToGlobal(ZeroPos.POINT);
                listCont.x = btnPos.x;
                listCont.y = btnPos.y + dropdownBtn.height - Device.verticalPadding;
            }
        }

        private function templateListCloseHandler():void {
            dropdownBtn.selected = false;
        }

        private function selectedItemChangeHandler(event:Event):void {
            SimplePopup.close();
        }
        ]]></fx:Script>

    <fx:Declarations>
        <s:Group id="listCont"
                 maxHeight="{Values.PT600}">
            <common2:BG percentWidth="100" percentHeight="100"
                        fillColor="{AppColors.SCREEN_FOOTER_BG}"
                        borderColor="{AppColors.INPUT_BORDER}"
                        borderWeight="1"/>

            <s:Scroller width="100%" height="100%">
                <common:SelectableDataGroup id="list"
                                            dataProvider="{dataProvider}"
                                            allowSelectLastItem="true"
                                            selectedItem="@{selectedItem}"
                                            itemRenderer="de.dittner.testmyself.ui.common.input.DropdownListItemRenderer"
                                            selectedItemChange="selectedItemChangeHandler(event)"
                                            width="100%">
                    <common:layout>
                        <s:VerticalLayout gap="0"/>
                    </common:layout>
                </common:SelectableDataGroup>
            </s:Scroller>
        </s:Group>
    </fx:Declarations>

    <input:MXLabel width="100%" height="{Values.PT20}"
                   fontSize="{Values.PT15}"
                   text="{title}"
                   visible="{showTitle}"
                   includeInLayout="{showTitle}"
                   color="{AppColors.TEXT_CONTROL_TITLE}"/>

    <tile:FadeTileButton id="dropdownBtn"
                         isToggle="true"
                         use9Scale="true"
                         width="100%"
                         top="{Values.PT20}"
                         fontSize="{Values.PT18}"
                         upBgAlpha="1"
                         upTileID="{TileID.BTN_TITLED_DROPDOWN}"
                         paddingLeft="{Values.PT2}"
                         paddingRight="{Values.PT16}"
                         click="dropdownBtnChangeHandler(event)"/>

    <note:NoteLabel id="titleLbl"
                    article="{selectedItem}"
                    mouseEnabled="false"
                    mouseChildren="false"
                    width="100%"
                    fontSize="{Values.PT20}"
                    textAlign="{TextAlign.CENTER}"
                    top="{Values.PT23}"
                    horizontalCenter="0"/>

</s:Group>
