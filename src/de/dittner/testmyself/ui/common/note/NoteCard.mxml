<?xml version="1.0"?>
<common:Container xmlns:fx="http://ns.adobe.com/mxml/2009"
                  xmlns:s="library://ns.adobe.com/flex/spark"
                  xmlns:panel="de.dittner.testmyself.ui.common.panel.*"
                  xmlns:mp3="de.dittner.testmyself.ui.common.audio.mp3.*"
                  xmlns:note="de.dittner.testmyself.ui.common.note.*"
                  xmlns:common="de.dittner.testmyself.ui.common.*"
                  xmlns:scroller="de.dittner.testmyself.ui.common.scroller.*">
    <fx:Script><![CDATA[
        import de.dittner.async.IAsyncOperation;
        import de.dittner.async.utils.invalidateOf;
        import de.dittner.testmyself.model.domain.language.LanguageID;
        import de.dittner.testmyself.model.domain.note.IrregularVerb;
        import de.dittner.testmyself.model.domain.note.Note;
        import de.dittner.testmyself.model.domain.note.Word;
        import de.dittner.testmyself.model.domain.vocabulary.VocabularyID;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.FontName;
        import de.dittner.testmyself.utils.Values;

        import flashx.textLayout.formats.TextAlign;

        //--------------------------------------
        //  note
        //--------------------------------------
        private var _note:Note;
        [Bindable("noteChanged")]
        public function get note():Note {return _note;}
        public function set note(value:Note):void {
            if (_note != value) {
                _note = value;
                invalidateProperties();
                dispatchEvent(new Event("noteChanged"));
            }
        }

        //--------------------------------------
        //  noteNumber
        //--------------------------------------
        private var _noteNumber:int = 0;
        [Bindable("noteNumberChanged")]
        public function get noteNumber():int {return _noteNumber;}
        public function set noteNumber(value:int):void {
            if (_noteNumber != value) {
                _noteNumber = value;
                dispatchEvent(new Event("noteNumberChanged"));
            }
        }

        //--------------------------------------
        //  totalNotes
        //--------------------------------------
        private var _totalNotes:int = 0;
        [Bindable("totalNotesChanged")]
        public function get totalNotes():int {return _totalNotes;}
        public function set totalNotes(value:int):void {
            if (_totalNotes != value) {
                _totalNotes = value;
                dispatchEvent(new Event("totalNotesChanged"));
            }
        }

        //--------------------------------------
        //  searchText
        //--------------------------------------
        private var _searchText:String = "";
        [Bindable("searchTextChanged")]
        public function get searchText():String {return _searchText;}
        public function set searchText(value:String):void {
            if (_searchText != value) {
                _searchText = value;
                invalidateProperties();
                dispatchEvent(new Event("searchTextChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        override protected function commitProperties():void {
            super.commitProperties();
            if (!note) {
                titleLbl.article = "";
                titleLbl.text = "";
                descriptionLbl.text = "";
                return;
            }
            if (note is Word) {
                var word:Word = note as Word;
                titleLbl.article = word.article;
                titleLbl.text = word ? word.declension ? word.title + ", " + word.declension : word.title : "";
                titleLbl.fontSize = Values.PT30;
                titleLbl.textAlign = TextAlign.CENTER;
                audioPanel.visible = audioPanel.includeInLayout = false;
            }
            else if (note is IrregularVerb) {
                var verb:IrregularVerb = note as IrregularVerb;
                titleLbl.article = "";
                titleLbl.text = verb.title + ", " + verb.present + ", " + verb.past + ", " + verb.perfect;
                titleLbl.fontSize = Values.PT30;
                titleLbl.textAlign = TextAlign.CENTER;
                audioPanel.visible = audioPanel.includeInLayout = false;
            }
            else {
                titleLbl.article = "";
                titleLbl.text = note.title;
                titleLbl.fontSize = Values.PT24;
                titleLbl.textAlign = TextAlign.LEFT;
                audioPanel.visible = audioPanel.includeInLayout = !note.isExample && note.hasAudio;
                if (audioPanel.visible) loadComment();
            }

            examplesPanel.renderOptions.searchText = searchText;
            titleLbl.searchText = searchText;
            descriptionLbl.text = note.description;
            descriptionLbl.searchText = searchText;

            var isLessonVocabulary:Boolean = note.vocabulary.id == VocabularyID.DE_LESSON || note.vocabulary.id == VocabularyID.EN_LESSON;
            descriptionPanel.title = isLessonVocabulary ? resourceManager.getString('app', 'Content') : resourceManager.getString('app', 'Translation');
            examplesPanel.visible = examplesPanel.includeInLayout = !note.isExample && !isLessonVocabulary;
            tagsInfoLbl.text = getTagsInfo();
        }

        private function getTagsInfo():String {
            var res:String = "";
            if (note) {
                res = getVocabularySymbol();
                if (note.isExample) res += "  " + getExampleSymbol();
                else if (note.tagIDs && note.tagIDs.length > 0)
                    res += "  " + note.tagsToStr();
            }
            return res;
        }

        private function getVocabularySymbol():String {
            if (!note) return "";

            switch (note.vocabulary.id) {
                case VocabularyID.DE_WORD :
                case VocabularyID.EN_WORD :
                    return "–W–";
                case VocabularyID.DE_VERB :
                case VocabularyID.EN_VERB :
                    return "–V–";
                case VocabularyID.DE_LESSON :
                    return "–Ü–";
                case VocabularyID.EN_LESSON :
                    return "–L–";
                default :
                    return ""
            }
        }

        private function getExampleSymbol():String {
            if (note && note.vocabulary.lang.id == LanguageID.DE) {
                return "Bsp.";
            }
            else if (note && note.vocabulary.lang.id == LanguageID.EN) {
                return "e. g.";
            }
            return "";
        }

        public function loadComment(andPlay:Boolean = false):void {
            if (note && note.hasAudio) {
                if (note.audioComment.isMp3 && note.audioComment.hasBytes) {
                    mp3.comment = note.audioComment;
                    if (andPlay) mp3.play();
                }
                else {
                    note.audioComment.loadMP3().addCompleteCallback(function (op:IAsyncOperation):void {
                        if (op.isSuccess && note && note.audioComment.isMp3 && note.audioComment.hasBytes) {
                            mp3.comment = note.audioComment;
                            if (andPlay) mp3.play();
                        }
                        else {
                            mp3.comment = null;
                        }
                    });
                }
            }
            else {
                mp3.comment = null;
            }
        }

        private function ensureAudioPanelIsVisible():void {
            if (audioPanel.isOpened && cont.contentHeight > height) {
                scroller.verticalScrollBar.value = cont.contentHeight - height;
            }
        }
        ]]></fx:Script>

    <scroller:CustomScroller id="scroller" width="100%" height="100%">
        <s:VGroup id="cont" width="100%" gap="0">
            <panel:CollapsedPanel id="titlePanel"
                                  isOpened="true"
                                  width="{width}"
                                  title="{noteNumber + 1 + '/' + totalNotes}">
                <note:NoteLabel id="titleLbl"
                                textThickness="60"
                                left="0" right="0"/>
                <s:Label id="tagsInfoLbl"
                         width="100%"
                         maxDisplayedLines="1"
                         textAlign="right"
                         bottom="{-Values.PT18}"
                         fontFamily="{FontName.MYRIAD_COND}"
                         fontStyle="italic"
                         color="0"
                         alpha="0.6"
                         fontSize="{Values.PT11}"/>
            </panel:CollapsedPanel>

            <panel:CollapsedPanel id="descriptionPanel"
                                  width="{width}"
                                  isOpened="true">
                <note:NoteLabel id="descriptionLbl"
                                width="100%"
                                height="100%"
                                fontSize="{Values.PT22}"
                                textColor="{AppColors.TEXT_DARK_GRAY}"/>
            </panel:CollapsedPanel>

            <note:ExamplesPanel id="examplesPanel"
                                width="{width}"
                                isOpened="true"
                                dataProvider="{note.exampleColl}"
                                paddingTop="0" paddingBottom="0"/>

            <panel:CollapsedPanel id="audioPanel"
                                  width="{width}"
                                  title="{resourceManager.getString('app', 'AudioRecord')}"
                                  isOpenedChanged="invalidateOf(ensureAudioPanelIsVisible)">
                <mp3:MP3PlayerComponent id="mp3"
                                        width="100%"
                                        enabled="{note.hasAudio}"/>
            </panel:CollapsedPanel>

        </s:VGroup>

    </scroller:CustomScroller>

</common:Container>
