<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:components2="de.dittner.testmyself.ui.common.audio.components.*"
         xmlns:tile="de.dittner.testmyself.ui.common.tile.*"
         addedToStage="addedToStageHandler(event)"
         removedFromStage="removedFromStageHandler(event)">
    <fx:Metadata>
        [Event(name="removeCommentClick", type="de.dittner.testmyself.ui.common.audio.event.VoiceCommentEvent")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.domain.audioComment.AudioComment;
        import de.dittner.testmyself.ui.common.audio.event.VoiceCommentEvent;
        import de.dittner.testmyself.ui.common.audio.utils.PlayerUtils;
        import de.dittner.testmyself.ui.common.tile.TileID;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.utils.Values;

        //--------------------------------------
        //  player
        //--------------------------------------
        public function get player():MP3Player {return MP3Player.instance;}

        [Bindable("commentChanged")]
        public function get hasComment():Boolean {return comment && comment.hasBytes;}

        //--------------------------------------
        //  soundDuration in sec
        //--------------------------------------
        [Bindable("commentChanged")]
        public function get soundDuration():int {return player.soundDuration;}

        //--------------------------------------
        //  comment
        //--------------------------------------
        [Bindable("commentChanged")]
        public function get comment():AudioComment {return player.comment;}
        public function set comment(value:AudioComment):void {
            if (player.comment != value) {
                player.comment = value;
                updateState();
                dispatchEvent(new Event("commentChanged"));
            }
        }

        //--------------------------------------
        //  removeEnabled
        //--------------------------------------
        private var _removeRecordEnabled:Boolean = false;
        [Bindable("removeEnabledChanged")]
        public function get removeRecordEnabled():Boolean {return _removeRecordEnabled;}
        public function set removeRecordEnabled(value:Boolean):void {
            if (_removeRecordEnabled != value) {
                _removeRecordEnabled = value;
                dispatchEvent(new Event("removeEnabledChanged"));
            }
        }

        //--------------------------------------
        //  isPlaying
        //--------------------------------------
        [Bindable("stateChanged")]
        public function get isPlaying():Boolean {return currentState == "playing";}

        //--------------------------------------
        //  isPlaying
        //--------------------------------------
        [Bindable("stateChanged")]
        public function get isPaused():Boolean {return currentState == "paused";}

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------
        public function play():void {
            player.play();
        }

        public function pause():void {
            player.pause();
        }

        public function stop():void {
            player.stop();
        }

        public function remove():void {
            player.remove();
        }

        public function clear():void {
            player.clear();
        }

        private function updateState(e:Event = null):void {
            if (!comment)
                currentState = "normal";
            else if (player.curState == player.getPlayingState())
                currentState = "playing";
            else if (player.curState == player.getPausedState())
                currentState = "paused";
            else
                currentState = "stopped";
            dispatchEvent(new Event("stateChanged"));
        }

        override protected function updateDisplayList(w:Number, h:Number):void {
            super.updateDisplayList(w, h);
        }

        public function secToStr(sec:int):String {
            return PlayerUtils.convertToHHMMSS(sec);
        }

        private function removeRecord():void {
            player.remove();
        }

        private function addedToStageHandler(event:Event):void {
            player.addEventListener(VoiceCommentEvent.REMOVE_COMMENT_CLICK, commentRemoved);
            player.addEventListener("curStateChanged", updateState);
        }
        private function removedFromStageHandler(event:Event):void {
            player.removeEventListener(VoiceCommentEvent.REMOVE_COMMENT_CLICK, commentRemoved);
            player.removeEventListener("curStateChanged", updateState);
        }

        private function commentRemoved(e:VoiceCommentEvent):void {
            dispatchEvent(e.clone());
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="normal"/>
        <s:State name="stopped"/>
        <s:State name="paused"/>
        <s:State name="playing"/>
    </s:states>

    <s:layout>
        <s:HorizontalLayout gap="{Values.PT5}" verticalAlign="middle"/>
    </s:layout>

    <tile:FadeTileButton id="playBtn"
                         upTileID="{TileID.BTN_PLAY}"
                         visible="true" visible.playing="false"
                         includeInLayout="true" includeInLayout.playing="false"
                         enabled="true"
                         click="play()"/>

    <tile:FadeTileButton id="pauseBtn"
                         upTileID="{TileID.BTN_PAUSE}"
                         visible="false" visible.playing="true"
                         includeInLayout="false" includeInLayout.playing="true"
                         click="pause()"/>

    <s:Label text="{secToStr(player.playbackTime)}"
             fontSize="{Values.PT14}"
             paddingTop="1"
             color="{AppColors.TEXT_BLACK}"/>

    <components2:RewindingSlider id="rewindingSlider"
                                 width="100%"
                                 mouseEnabled.normal="false"
                                 minimum="0"
                                 maximum="{player.soundDuration}"
                                 showDataTip="false"
                                 stepSize="0.1"
                                 value="@{player.playbackTime}"
                                 snapInterval="0.1"
                                 liveDragging="true"
                                 skinClass="de.dittner.testmyself.ui.common.audio.skins.slider.RewindingSliderSkin"/>

    <s:Label text="{secToStr(player.soundDuration)}"
             text.normal="00:00"
             fontSize="{Values.PT14}"
             paddingTop="1"
             color="{AppColors.TEXT_BLACK}"/>

    <tile:FadeTileButton id="removeRecordBtn"
                         upTileID="{TileID.BTN_DELETE_AUDIO}"
                         enabled="{removeRecordEnabled}"
                         visible="{removeRecordEnabled}"
                         includeInLayout="{removeRecordEnabled}"
                         click="removeRecord()"/>

</s:Group>
