<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:audio="de.dittner.testmyself.ui.common.audio.*"
         xmlns:mp3="de.dittner.testmyself.ui.common.audio.mp3.*"
         xmlns:button="de.dittner.testmyself.ui.common.button.*"
         xmlns:input="de.dittner.testmyself.ui.common.input.*"
         xmlns:utils="de.dittner.testmyself.ui.common.utils.*">
    <fx:Metadata>
        [Event(name="loadRemoteMp3WithError", type="flash.events.Event")]
    </fx:Metadata>
    <fx:Script><![CDATA[
        import de.dittner.async.IAsyncOperation;
        import de.dittner.testmyself.model.domain.audioComment.AudioComment;
        import de.dittner.testmyself.ui.common.audio.event.VoiceCommentEvent;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.utils.FileChooser;
        import de.dittner.testmyself.utils.Values;

        //--------------------------------------
        //  comment
        //--------------------------------------
        private var _comment:AudioComment;
        public function getComment():AudioComment {
            if (_comment && _comment.bytes) return _comment;
            var ac:AudioComment = new AudioComment();

            if (rawDataPlayer.recorder.recordedBytes && rawDataPlayer.recorder.recordedBytes.length > 0) {
                ac.bytes = rawDataPlayer.recorder.recordedBytes;
            }
            return ac;
        }

        public function setComment(value:AudioComment):void {
            if (_comment != value) {
                _comment = value;
                if (_comment && _comment.bytes) {
                    if (value.isMp3) {
                        mp3Player.comment = _comment;
                        showMP3Player();
                    }
                    else {
                        rawDataPlayer.comment = _comment;
                        showRawDataRecorder();
                    }
                }
                else showRawDataRecorder();
            }
        }

        //--------------------------------------
        //  recording
        //--------------------------------------
        private var _recording:Boolean;
        [Bindable("recordingChanged")]
        public function get isRecording():Boolean {return _recording;}
        private function set recording(value:Boolean):void {
            if (_recording != value) {
                _recording = value;
                dispatchEvent(new Event("recordingChanged"));
            }
        }

        //--------------------------------------
        //  maxRecordSizeInMin
        //--------------------------------------
        private var _maxRecordSizeInMin:Number = 30;
        [Bindable("maxRecordSizeInMinChanged")]
        public function get maxRecordSizeInMin():Number {return _maxRecordSizeInMin;}
        public function set maxRecordSizeInMin(value:Number):void {
            if (_maxRecordSizeInMin != value) {
                _maxRecordSizeInMin = value;
                dispatchEvent(new Event("maxRecordSizeInMinChanged"));
            }
        }

        //--------------------------------------
        //  noteTitleToLoadMp3
        //--------------------------------------
        private var _noteTitleToLoadMp3:String = "";
        [Bindable("noteTitleToLoadMp3Changed")]
        public function get noteTitleToLoadMp3():String {return _noteTitleToLoadMp3;}
        public function set noteTitleToLoadMp3(value:String):void {
            if (_noteTitleToLoadMp3 != value) {
                _noteTitleToLoadMp3 = value;
                dispatchEvent(new Event("noteTitleToLoadMp3Changed"));
            }
        }

        //--------------------------------------
        //  isMp3Loading
        //--------------------------------------
        private var _isMp3Loading:Boolean = false;
        [Bindable("isMp3LoadingChanged")]
        public function get isMp3Loading():Boolean {return _isMp3Loading;}
        public function set isMp3Loading(value:Boolean):void {
            if (_isMp3Loading != value) {
                _isMp3Loading = value;
                dispatchEvent(new Event("isMp3LoadingChanged"));
            }
        }

        //--------------------------------------
        //  isLoadMp3FileFromDudenEnabled
        //--------------------------------------
        private var _isLoadMp3FileFromDudenEnabled:Boolean = true;
        [Bindable("isLoadMp3FileFromDudenEnabledChanged")]
        public function get isLoadMp3FileFromDudenEnabled():Boolean {return _isLoadMp3FileFromDudenEnabled;}
        public function set isLoadMp3FileFromDudenEnabled(value:Boolean):void {
            if (_isLoadMp3FileFromDudenEnabled != value) {
                _isLoadMp3FileFromDudenEnabled = value;
                dispatchEvent(new Event("isLoadMp3FileFromDudenEnabledChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        private function showRawDataRecorder():void {
            mp3Player.visible = false;
            rawDataPlayer.visible = true;
        }

        private function showMP3Player():void {
            mp3Player.visible = true;
            rawDataPlayer.visible = false;
        }

        public function clear():void {
            clearBytes();
            rawDataPlayer.clear();
            mp3Player.clear();
            showRawDataRecorder();
        }

        private function mp3Player_removeCommentClickHandler(event:VoiceCommentEvent):void {
            clearBytes();
            showRawDataRecorder();
        }

        private function clearBytes():void {
            rawDataPlayer.comment = null;
            mp3Player.comment = null;
            _comment = null;
        }

        //--------------------------------------
        //  load mp3 from website
        //--------------------------------------

        private function loadRemoteMp3BtnVisible(isLoadMp3FileFromDudenEnabled:Boolean, mp3FromSiteUrl:String, isRecording:Boolean, isRawDataPlayerVisible:Boolean, recordedBytes:ByteArray):Boolean {
            return isLoadMp3FileFromDudenEnabled && mp3FromSiteUrl && !isRecording && isRawDataPlayerVisible && !(recordedBytes && recordedBytes.length > 0);
        }

        private function loadLocalMp3BtnVisible(isRecording:Boolean, isRawDataPlayerVisible:Boolean, mp3PlayerComment:AudioComment, recordedBytes:ByteArray):Boolean {
            return !isRecording && isRawDataPlayerVisible && !( (recordedBytes && recordedBytes.length > 0) || (mp3PlayerComment && mp3PlayerComment.bytes.length > 0) );
        }

        private function loadRemoteMp3():void {
            if (isMp3Loading) return;

            if (noteTitleToLoadMp3) {
                isMp3Loading = true;
                var cmd:LoadRemoteMp3Cmd = new LoadRemoteMp3Cmd(noteTitleToLoadMp3);
                cmd.addCompleteCallback(remoteMp3Loaded);
                cmd.execute();
            }
        }

        private function remoteMp3Loaded(op:IAsyncOperation):void {
            if (op.isSuccess && op.result)
                setComment(op.result);

            if (!op.isSuccess) dispatchEvent(new Event("loadRemoteMp3WithError"));
            isMp3Loading = false;
        }

        private static const BROWSE_FILE_FILTERS:Array = [new FileFilter("MP3-file", "*.mp3")];
        private function loadLocalMp3():void {
            var op:IAsyncOperation = FileChooser.browse(BROWSE_FILE_FILTERS);
            op.addCompleteCallback(mp3Browsed);
        }

        private function mp3Browsed(op:IAsyncOperation):void {
            if (op.isSuccess && op.result) {
                var mp3:ByteArray = op.result as ByteArray;
                var ac:AudioComment;
                if (mp3 && mp3.length > 0) {
                    ac = new AudioComment();
                    ac.bytes = mp3;
                    ac.bytes.position = 0;
                    ac.isMp3 = true;
                    setComment(ac);
                }
            }
        }
        ]]></fx:Script>
    <fx:Binding source="rawDataPlayer.recording" destination="recording"/>

    <input:MXLabel height="{Values.PT20}"
                   fontSize="{Values.PT15}"
                   mouseEnabled="false"
                   text="{resourceManager.getString('app', 'AudioRecord')}"
                   color="{AppColors.TEXT_CONTROL_TITLE}"/>

    <utils:BG percentWidth="100" top="{Values.PT20}" bottom="0"
              fillAlpha="0" borderColor="{AppColors.INPUT_BORDER}" borderWeight="1"/>

    <audio:RawDataPlayer id="rawDataPlayer"
                         top="{Values.PT32}" bottom="0"
                         width="100%"
                         maxRecordSizeInMin="{maxRecordSizeInMin}"
                         removeCommentClick="mp3Player_removeCommentClickHandler(event)"
                         skinClass="de.dittner.testmyself.ui.common.audio.skins.RawDataPlayerSkin"/>

    <mp3:MP3PlayerComponent id="mp3Player"
                            top="{Values.PT22}" bottom="0"
                            width="100%"
                            visible="false"
                            removeRecordEnabled="true"
                            removeCommentClick="mp3Player_removeCommentClickHandler(event)"/>

    <button:WhiteButton id="loadRemoteMp3Btn"
                        verticalCenter="{Values.PT11}"
                        paddingLeft="{Values.PT15}"
                        paddingRight="{Values.PT15}"
                        right="{Values.PT170}"
                        title="Duden"
                        enabled="{!isMp3Loading}"
                        visible="{loadRemoteMp3BtnVisible(isLoadMp3FileFromDudenEnabled, noteTitleToLoadMp3, rawDataPlayer.recording, rawDataPlayer.visible, rawDataPlayer.recorder.recordedBytes)}"
                        click="loadRemoteMp3()"/>

    <button:WhiteButton id="loadLocalMp3Btn"
                        verticalCenter="{Values.PT11}"
                        paddingLeft="{Values.PT15}"
                        paddingRight="{Values.PT15}"
                        right="{Values.PT10}"
                        title="{resourceManager.getString('app', 'ChooseMp3File')}"
                        enabled="{!isMp3Loading}"
                        visible="{loadLocalMp3BtnVisible(rawDataPlayer.recording, rawDataPlayer.visible, mp3Player.comment, rawDataPlayer.recorder.recordedBytes)}"
                        click="loadLocalMp3()"/>
</s:Group>
