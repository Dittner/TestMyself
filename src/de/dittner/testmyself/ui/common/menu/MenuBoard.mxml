<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:menu="de.dittner.testmyself.ui.common.menu.*"
         xmlns:components="de.dittner.testmyself.ui.view.test.testing.components.*"
         implements="de.dittner.testmyself.ui.common.menu.IMenuBoard"
         currentState="view">

    <fx:Metadata>
        [Event(name="selected", type="de.dittner.testmyself.ui.common.menu.MenuBoardEvent")]
        [Event(name="clicked", type="de.dittner.testmyself.ui.common.menu.MenuBoardEvent")]
        [Event(name="taskPriorityChanged", type="flash.events.Event")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.domain.test.TestTaskPriority;
        import de.dittner.testmyself.ui.common.utils.AppColors;

        //--------------------------------------
        //  hasNetworkConnection
        //--------------------------------------
        private var _hasNetworkConnection:Boolean = false;
        [Bindable("hasNetworkConnectionChanged")]
        public function get hasNetworkConnection():Boolean {return _hasNetworkConnection;}
        public function set hasNetworkConnection(value:Boolean):void {
            if (_hasNetworkConnection != value) {
                _hasNetworkConnection = value;
                dispatchEvent(new Event("hasNetworkConnectionChanged"));
            }
        }

        //--------------------------------------
        //  selectedViewMenuID
        //--------------------------------------
        private var _selectedViewMenuID:String = "";
        [Bindable("selectedViewMenuIDChanged")]
        public function get selectedViewMenuID():String {return _selectedViewMenuID;}
        public function set selectedViewMenuID(value:String):void {
            if (_selectedViewMenuID != value) {
                _selectedViewMenuID = value;
                dispatchEvent(new Event("selectedViewMenuIDChanged"));
            }
        }

        //--------------------------------------
        //  taskPriority
        //--------------------------------------
        private var _taskPriority:uint = TestTaskPriority.HIGH;
        [Bindable("taskPriorityChanged")]
        public function get taskPriority():uint {return _taskPriority;}
        public function set taskPriority(value:uint):void {
            if (_taskPriority != value) {
                _taskPriority = value;
                dispatchEvent(new Event("taskPriorityChanged"));
            }
        }

        //--------------------------------------
        //  playCommentBtnVisible
        //--------------------------------------
        private var _playCommentBtnVisible:Boolean = false;
        [Bindable("playCommentBtnVisibleChanged")]
        public function get playCommentBtnVisible():Boolean {return _playCommentBtnVisible;}
        public function set playCommentBtnVisible(value:Boolean):void {
            if (_playCommentBtnVisible != value) {
                _playCommentBtnVisible = value;
                dispatchEvent(new Event("playCommentBtnVisibleChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------
        private var stateStack:Array = [];

        public function showViewMenu():void {
            stateStack.push("view");
            setCurrentState("view");
        }

        public function showFormMenu():void {
            stateStack.push("form");
            setCurrentState("form");
        }

        //--------------------------------------
        //  trueBtnEnabled
        //--------------------------------------
        private var _trueBtnEnabled:Boolean = true;
        [Bindable("testBtnEnabledChanged")]
        public function get trueBtnEnabled():Boolean {return _trueBtnEnabled;}

        //--------------------------------------
        //  falseBtnEnabled
        //--------------------------------------
        private var _falseBtnEnabled:Boolean = true;
        [Bindable("testBtnEnabledChanged")]
        public function get falseBtnEnabled():Boolean {return _falseBtnEnabled;}

        //--------------------------------------
        //  nextTaskBtnEnabled
        //--------------------------------------
        private var _nextTaskBtnEnabled:Boolean = true;
        [Bindable("testBtnEnabledChanged")]
        public function get nextTaskBtnEnabled():Boolean {return _nextTaskBtnEnabled;}

        public function showTestMenu(trueBtnEnabled:Boolean = true, falseBtnEnabled:Boolean = true, nextTaskBtnEnabled:Boolean = false):void {
            stateStack.push("test");
            setCurrentState("test");
            _trueBtnEnabled = trueBtnEnabled;
            _falseBtnEnabled = falseBtnEnabled;
            _nextTaskBtnEnabled = nextTaskBtnEnabled;
            dispatchEvent(new Event("testBtnEnabledChanged"));
        }

        public function hideFormMenu():void {
            openPrevMenu();
        }

        public function hideTestMenu():void {
            openPrevMenu();
        }

        private function openPrevMenu():void {
            var newState:String = "view";
            if (stateStack.length > 1) {
                stateStack.pop();
                newState = stateStack.pop();
            }

            stateStack.push(newState);
            setCurrentState(newState);
        }

        private function menuBtnClickHandler(e:Event):void {
            var menuBtn:MenuBitmapButton = e.target as MenuBitmapButton;
            if (menuBtn) dispatchEvent(new MenuBoardEvent(MenuBoardEvent.CLICKED, menuBtn.menuID));
        }

        private function viewMenuBtnSelectedHandler(e:Event):void {
            var menuBtn:MenuBitmapToggleButton = e.target as MenuBitmapToggleButton;
            if (menuBtn && menuBtn.selected) {
                selectedViewMenuID = menuBtn.menuID;
                dispatchEvent(new MenuBoardEvent(MenuBoardEvent.SELECTED, menuBtn.menuID));
            }
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="view"/>
        <s:State name="form"/>
        <s:State name="test"/>
    </s:states>

    <s:Rect width="100%" height="100%">
        <s:fill>
            <s:SolidColor color="{AppColors.MENU_LIST_BG}"/>
        </s:fill>
    </s:Rect>

    <!--View Menu-->

    <s:VGroup width="100%" height="100%"
              disabledAlpha="1"
              paddingTop="10" paddingBottom="10" gap="25"
              includeIn="view"
              horizontalAlign="center">
        <menu:MenuBitmapToggleButton id="mapViewBtn"
                                     visible="{!hasNetworkConnection}"
                                     includeInLayout="{!hasNetworkConnection}"
                                     enabled="{enabled}"
                                     menuID="{MenuID.MAP}"
                                     selected="{selectedViewMenuID == MenuID.MAP}"
                                     image="@Embed(source='/assets/menu/map.png')"
                                     disabledImage="@Embed(source='/assets/menu/map_red.png')"
                                     change="viewMenuBtnSelectedHandler(event)"/>

        <menu:MenuBitmapToggleButton id="mapViewWithNetworkBtn"
                                     visible="{hasNetworkConnection}"
                                     includeInLayout="{hasNetworkConnection}"
                                     enabled="{enabled}"
                                     menuID="{MenuID.MAP}"
                                     selected="{selectedViewMenuID == MenuID.MAP}"
                                     image="@Embed(source='/assets/menu/map_with_network.png')"
                                     disabledImage="@Embed(source='/assets/menu/map_with_network_red.png')"
                                     change="viewMenuBtnSelectedHandler(event)"/>

        <s:Spacer height="100%"/>

        <menu:MenuBitmapToggleButton id="wordViewBtn"
                                     menuID="{MenuID.WORD}"
                                     selected="{selectedViewMenuID == MenuID.WORD}"
                                     enabled="{enabled}"
                                     image="@Embed(source='/assets/menu/word.png')"
                                     disabledImage="@Embed(source='/assets/menu/word_red.png')"
                                     change="viewMenuBtnSelectedHandler(event)"/>

        <menu:MenuBitmapToggleButton id="verbViewBtn"
                                     menuID="{MenuID.VERB}"
                                     selected="{selectedViewMenuID == MenuID.VERB}"
                                     enabled="{enabled}"
                                     image="@Embed(source='/assets/menu/verb.png')"
                                     disabledImage="@Embed(source='/assets/menu/verb_red.png')"
                                     change="viewMenuBtnSelectedHandler(event)"/>

        <menu:MenuBitmapToggleButton id="lessonViewBtn"
                                     menuID="{MenuID.LESSON}"
                                     selected="{selectedViewMenuID == MenuID.LESSON}"
                                     enabled="{enabled}"
                                     image="@Embed(source='/assets/menu/lesson.png')"
                                     disabledImage="@Embed(source='/assets/menu/lesson_red.png')"
                                     change="viewMenuBtnSelectedHandler(event)"/>

        <s:Spacer height="100%"/>

        <menu:MenuBitmapToggleButton id="testingViewBtn"
                                     menuID="{MenuID.TEST}"
                                     selected="{selectedViewMenuID == MenuID.TEST}"
                                     enabled="{enabled}"
                                     image="@Embed(source='/assets/menu/testing.png')"
                                     disabledImage="@Embed(source='/assets/menu/testing_red.png')"
                                     change="viewMenuBtnSelectedHandler(event)"/>

        <menu:MenuBitmapToggleButton id="searchViewBtn"
                                     menuID="{MenuID.SEARCH}"
                                     selected="{selectedViewMenuID == MenuID.SEARCH}"
                                     enabled="{enabled}"
                                     image="@Embed(source='/assets/menu/search.png')"
                                     disabledImage="@Embed(source='/assets/menu/search_red.png')"
                                     change="viewMenuBtnSelectedHandler(event)"/>

        <s:Spacer height="100%"/>

        <menu:MenuBitmapToggleButton id="settingsViewBtn"
                                     menuID="{MenuID.SETTINGS}"
                                     selected="{selectedViewMenuID == MenuID.SETTINGS}"
                                     enabled="{enabled}"
                                     image="@Embed(source='/assets/menu/settings.png')"
                                     disabledImage="@Embed(source='/assets/menu/settings_red.png')"
                                     change="viewMenuBtnSelectedHandler(event)"/>

    </s:VGroup>

    <!--Form Menu-->

    <s:VGroup width="100%" height="100%"
              includeIn="form"
              gap="25"
              horizontalAlign="center" verticalAlign="middle">
        <menu:MenuBitmapButton id="applyBtn"
                               menuID="{MenuID.APPLY}"
                               enabled="{enabled}"
                               image="@Embed(source='/assets/menu/apply.png')"
                               disabledImage="@Embed(source='/assets/menu/apply_red.png')"
                               click="menuBtnClickHandler(event)"/>

        <menu:MenuBitmapButton id="cancelBtn"
                               menuID="{MenuID.CANCEL}"
                               enabled="{enabled}"
                               image="@Embed(source='/assets/menu/cancel.png')"
                               disabledImage="@Embed(source='/assets/menu/cancel_red.png')"
                               click="menuBtnClickHandler(event)"/>

    </s:VGroup>

    <!--Test Menu-->

    <s:VGroup width="100%" height="100%"
              includeIn="test"
              gap="25"
              horizontalAlign="center" verticalAlign="middle">
        <s:Spacer height="100%"/>

        <components:TaskPriorityBoard id="taskPriorityBoard"
                                      enabled="{enabled}"
                                      taskPriority="@{taskPriority}"/>

        <s:Spacer height="100%"/>

        <menu:MenuBitmapButton id="trueBtn"
                               menuID="{MenuID.TRUE}"
                               visible="{trueBtnEnabled}" includeInLayout="{trueBtnEnabled}"
                               enabled="{enabled}"
                               image="@Embed(source='/assets/menu/apply.png')"
                               disabledImage="@Embed(source='/assets/menu/apply_red.png')"
                               click="menuBtnClickHandler(event)"/>

        <menu:MenuBitmapButton id="falseBtn"
                               menuID="{MenuID.FALSE}"
                               visible="{falseBtnEnabled}" includeInLayout="{falseBtnEnabled}"
                               enabled="{enabled}"
                               image="@Embed(source='/assets/menu/cancel.png')"
                               disabledImage="@Embed(source='/assets/menu/cancel_red.png')"
                               click="menuBtnClickHandler(event)"/>

        <menu:MenuBitmapButton id="nextBtn"
                               menuID="{MenuID.NEXT}"
                               visible="{nextTaskBtnEnabled}" includeInLayout="{nextTaskBtnEnabled}"
                               enabled="{enabled}"
                               image="@Embed(source='/assets/menu/next.png')"
                               disabledImage="@Embed(source='/assets/menu/next_red.png')"
                               click="menuBtnClickHandler(event)"/>

        <menu:MenuBitmapButton id="answerBtn"
                               menuID="{MenuID.ANSWER}"
                               enabled="{enabled}"
                               image="@Embed(source='/assets/menu/question.png')"
                               disabledImage="@Embed(source='/assets/menu/question_red.png')"
                               click="menuBtnClickHandler(event)"/>

        <menu:MenuBitmapButton id="playCommentBtn"
                               menuID="{MenuID.AUDIO}"
                               visible="{playCommentBtnVisible}"
                               enabled="{enabled}"
                               image="@Embed(source='/assets/menu/audio.png')"
                               disabledImage="@Embed(source='/assets/menu/audio_red.png')"
                               click="menuBtnClickHandler(event)"/>

        <s:Spacer height="100%"/>
    </s:VGroup>

</s:Group>
