<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:menu="de.dittner.testmyself.ui.common.menu.*"
         xmlns:components="de.dittner.testmyself.ui.view.test.testing.components.*"
         xmlns:tile="de.dittner.testmyself.ui.common.tile.*"
         implements="de.dittner.testmyself.ui.common.menu.IMenuBoard"
         currentState="view">

    <fx:Metadata>
        [Event(name="selected", type="de.dittner.testmyself.ui.common.menu.MenuBoardEvent")]
        [Event(name="clicked", type="de.dittner.testmyself.ui.common.menu.MenuBoardEvent")]
        [Event(name="taskPriorityChanged", type="flash.events.Event")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.domain.test.TestTaskPriority;
        import de.dittner.testmyself.ui.common.tile.TileID;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.utils.Values;

        //--------------------------------------
        //  hasNetworkConnection
        //--------------------------------------
        private var _hasNetworkConnection:Boolean = false;
        [Bindable("hasNetworkConnectionChanged")]
        public function get hasNetworkConnection():Boolean {return _hasNetworkConnection;}
        public function set hasNetworkConnection(value:Boolean):void {
            if (_hasNetworkConnection != value) {
                _hasNetworkConnection = value;
                dispatchEvent(new Event("hasNetworkConnectionChanged"));
            }
        }

        //--------------------------------------
        //  selectedViewMenuID
        //--------------------------------------
        private var _selectedViewMenuID:String = "";
        [Bindable("selectedViewMenuIDChanged")]
        public function get selectedViewMenuID():String {return _selectedViewMenuID;}
        public function set selectedViewMenuID(value:String):void {
            if (_selectedViewMenuID != value) {
                _selectedViewMenuID = value;
                dispatchEvent(new Event("selectedViewMenuIDChanged"));
            }
        }

        //--------------------------------------
        //  taskPriority
        //--------------------------------------
        private var _taskPriority:uint = TestTaskPriority.HIGH;
        [Bindable("taskPriorityChanged")]
        public function get taskPriority():uint {return _taskPriority;}
        public function set taskPriority(value:uint):void {
            if (_taskPriority != value) {
                _taskPriority = value;
                dispatchEvent(new Event("taskPriorityChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------
        private var stateStack:Array = [];

        public function showViewMenu():void {
            stateStack.push("view");
            setCurrentState("view");
        }

        public function showFormMenu():void {
            stateStack.push("form");
            setCurrentState("form");
        }

        //--------------------------------------
        //  trueBtnEnabled
        //--------------------------------------
        private var _trueBtnEnabled:Boolean = true;
        [Bindable("testBtnEnabledChanged")]
        public function get trueBtnEnabled():Boolean {return _trueBtnEnabled;}

        //--------------------------------------
        //  falseBtnEnabled
        //--------------------------------------
        private var _falseBtnEnabled:Boolean = true;
        [Bindable("testBtnEnabledChanged")]
        public function get falseBtnEnabled():Boolean {return _falseBtnEnabled;}

        //--------------------------------------
        //  nextTaskBtnEnabled
        //--------------------------------------
        private var _nextTaskBtnEnabled:Boolean = true;
        [Bindable("testBtnEnabledChanged")]
        public function get nextTaskBtnEnabled():Boolean {return _nextTaskBtnEnabled;}

        public function showTestMenu(trueBtnEnabled:Boolean = true, falseBtnEnabled:Boolean = true, nextTaskBtnEnabled:Boolean = false):void {
            stateStack.push("test");
            setCurrentState("test");
            _trueBtnEnabled = trueBtnEnabled;
            _falseBtnEnabled = falseBtnEnabled;
            _nextTaskBtnEnabled = nextTaskBtnEnabled;
            dispatchEvent(new Event("testBtnEnabledChanged"));
        }

        public function showPrevMenu():void {
            var newState:String = "view";
            if (stateStack.length > 1) {
                stateStack.pop();
                newState = stateStack.pop();
            }

            stateStack.push(newState);
            setCurrentState(newState);
        }

        private function menuBtnClickHandler(e:Event):void {
            var menuBtn:MenuButton = e.target as MenuButton;
            if (menuBtn) dispatchEvent(new MenuBoardEvent(MenuBoardEvent.CLICKED, menuBtn.menuID));
        }

        private function viewMenuBtnSelectedHandler(e:Event):void {
            var menuBtn:MenuButton = e.target as MenuButton;
            if (menuBtn && menuBtn.selected) {
                selectedViewMenuID = menuBtn.menuID;
                dispatchEvent(new MenuBoardEvent(MenuBoardEvent.SELECTED, menuBtn.menuID));
            }
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="view"/>
        <s:State name="form"/>
        <s:State name="test"/>
    </s:states>

    <s:Group id="cont" width="100%" height="100%">
        <s:Rect width="100%" height="100%">
            <s:fill>
                <s:SolidColor color="{AppColors.MENU_LIST_BG}"/>
            </s:fill>
        </s:Rect>

        <!--View Menu-->

        <s:VGroup width="100%" height="100%"
                  disabledAlpha="1"
                  paddingTop="{Values.PT15}" paddingBottom="{Values.PT10}" gap="{Values.PT25}"
                  includeIn="view"
                  horizontalAlign="center">
            <menu:MenuButton id="langListViewBtn"
                             enabled="{enabled}"
                             isToggle="true"
                             deselectOnlyProgrammatically="true"
                             menuID="{MenuID.LANG_LIST}"
                             upTileID="{TileID.MENU_INFO_ICON}"
                             disabledTileID="{TileID.MENU_INFO_RED_ICON}"
                             selected="{selectedViewMenuID == MenuID.LANG_LIST}"
                             change="viewMenuBtnSelectedHandler(event)"/>

            <s:Spacer height="100%"/>

            <menu:MenuButton id="wordViewBtn"
                             isToggle="true"
                             deselectOnlyProgrammatically="true"
                             menuID="{MenuID.WORD}"
                             upTileID="{TileID.MENU_WORD_ICON}"
                             disabledTileID="{TileID.MENU_WORD_RED_ICON}"
                             selected="{selectedViewMenuID == MenuID.WORD}"
                             enabled="{enabled}"
                             change="viewMenuBtnSelectedHandler(event)"/>

            <menu:MenuButton id="verbViewBtn"
                             isToggle="true"
                             deselectOnlyProgrammatically="true"
                             menuID="{MenuID.VERB}"
                             upTileID="{TileID.MENU_VERB_ICON}"
                             disabledTileID="{TileID.MENU_VERB_RED_ICON}"
                             selected="{selectedViewMenuID == MenuID.VERB}"
                             enabled="{enabled}"
                             change="viewMenuBtnSelectedHandler(event)"/>

            <menu:MenuButton id="lessonViewBtn"
                             isToggle="true"
                             deselectOnlyProgrammatically="true"
                             menuID="{MenuID.LESSON}"
                             upTileID="{resourceManager.getString('app', 'LESSON_MENU_ICON')}"
                             disabledTileID="{resourceManager.getString('app', 'LESSON_DISABLED_MENU_ICON')}"
                             selected="{selectedViewMenuID == MenuID.LESSON}"
                             enabled="{enabled}"
                             change="viewMenuBtnSelectedHandler(event)"/>

            <s:Spacer height="100%"/>

            <menu:MenuButton id="mapViewBtn"
                             isToggle="true"
                             deselectOnlyProgrammatically="true"
                             enabled="{enabled}"
                             menuID="{MenuID.MAP}"
                             upTileID="{TileID.MENU_MAP_ICON}"
                             disabledTileID="{TileID.MENU_MAP_RED_ICON}"
                             selected="{selectedViewMenuID == MenuID.MAP}"
                             change="viewMenuBtnSelectedHandler(event)"/>

            <menu:MenuButton id="testingViewBtn"
                             isToggle="true"
                             deselectOnlyProgrammatically="true"
                             menuID="{MenuID.TEST}"
                             upTileID="{TileID.MENU_TESTING_ICON}"
                             disabledTileID="{TileID.MENU_TESTING_RED_ICON}"
                             selected="{selectedViewMenuID == MenuID.TEST}"
                             enabled="{enabled}"
                             change="viewMenuBtnSelectedHandler(event)"/>

            <menu:MenuButton id="searchViewBtn"
                             isToggle="true"
                             deselectOnlyProgrammatically="true"
                             menuID="{MenuID.SEARCH}"
                             upTileID="{TileID.MENU_SEARCH_ICON}"
                             disabledTileID="{TileID.MENU_SEARCH_RED_ICON}"
                             selected="{selectedViewMenuID == MenuID.SEARCH}"
                             enabled="{enabled}"
                             change="viewMenuBtnSelectedHandler(event)"/>

            <s:Spacer height="100%"/>

            <menu:MenuButton id="settingsViewBtn"
                             isToggle="true"
                             deselectOnlyProgrammatically="true"
                             menuID="{MenuID.SETTINGS}"
                             upTileID="{TileID.MENU_SETTINGS_ICON}"
                             disabledTileID="{TileID.MENU_SETTINGS_RED_ICON}"
                             selected="{selectedViewMenuID == MenuID.SETTINGS}"
                             enabled="{enabled}"
                             change="viewMenuBtnSelectedHandler(event)"/>
        </s:VGroup>

        <!--Form Menu-->

        <s:VGroup width="100%" height="100%"
                  includeIn="form"
                  gap="{Values.PT25}"
                  horizontalAlign="center" verticalAlign="middle">
            <menu:MenuButton id="applyBtn"
                             menuID="{MenuID.APPLY}"
                             upTileID="{TileID.MENU_APPLY_ICON}"
                             disabledTileID="{TileID.MENU_APPLY_RED_ICON}"
                             enabled="{enabled}"
                             click="menuBtnClickHandler(event)"/>

            <menu:MenuButton id="cancelBtn"
                             menuID="{MenuID.CANCEL}"
                             upTileID="{TileID.MENU_CANCEL_ICON}"
                             disabledTileID="{TileID.MENU_CANCEL_RED_ICON}"
                             enabled="{enabled}"
                             click="menuBtnClickHandler(event)"/>

        </s:VGroup>

        <!--Test Menu-->

        <s:VGroup width="100%" height="100%"
                  includeIn="test"
                  gap="{Values.PT25}"
                  horizontalAlign="center" verticalAlign="middle">
            <s:Spacer height="100%"/>

            <components:TaskPriorityBoard id="taskPriorityBoard"
                                          enabled="{enabled}"
                                          taskPriority="@{taskPriority}"/>

            <s:Spacer height="100%"/>

            <menu:MenuButton id="trueBtn"
                             menuID="{MenuID.TRUE}"
                             upTileID="{TileID.MENU_APPLY_ICON}"
                             disabledTileID="{TileID.MENU_APPLY_RED_ICON}"
                             visible="{trueBtnEnabled}" includeInLayout="{trueBtnEnabled}"
                             enabled="{enabled}"
                             click="menuBtnClickHandler(event)"/>

            <menu:MenuButton id="falseBtn"
                             menuID="{MenuID.FALSE}"
                             upTileID="{TileID.MENU_CANCEL_ICON}"
                             disabledTileID="{TileID.MENU_CANCEL_RED_ICON}"
                             visible="{falseBtnEnabled}" includeInLayout="{falseBtnEnabled}"
                             enabled="{enabled}"
                             click="menuBtnClickHandler(event)"/>

            <menu:MenuButton id="nextBtn"
                             menuID="{MenuID.NEXT}"
                             upTileID="{TileID.MENU_NEXT_ICON}"
                             disabledTileID="{TileID.MENU_NEXT_RED_ICON}"
                             visible="{nextTaskBtnEnabled}" includeInLayout="{nextTaskBtnEnabled}"
                             enabled="{enabled}"
                             click="menuBtnClickHandler(event)"/>

            <menu:MenuButton id="answerBtn"
                             menuID="{MenuID.ANSWER}"
                             upTileID="{TileID.MENU_QUESTION_ICON}"
                             disabledTileID="{TileID.MENU_QUESTION_RED_ICON}"
                             enabled="{enabled}"
                             click="menuBtnClickHandler(event)"/>

            <s:Spacer height="100%"/>
        </s:VGroup>

        <tile:FadeTileButton left="{Values.PT5}" top="{Values.PT5}"
                             mouseEnabled="false"
                             visible="{hasNetworkConnection}"
                             upTileID="{TileID.NETWORK_ICON}"
                             disabledTileID="{TileID.NETWORK_RED_ICON}"
                             enabled="{enabled}"
                             animationDuration="{langListViewBtn.animationDuration}"/>
    </s:Group>
</s:Group>
