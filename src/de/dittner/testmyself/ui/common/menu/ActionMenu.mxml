<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:menu="de.dittner.testmyself.ui.common.menu.*"
         xmlns:components="de.dittner.testmyself.ui.view.test.testing.components.*"
         implements="de.dittner.testmyself.ui.common.menu.IActionMenu"
         currentState="navigation">

    <fx:Metadata>
        [Event(name="selected", type="de.dittner.testmyself.ui.common.menu.NavigationMenuEvent")]
        [Event(name="clicked", type="de.dittner.testmyself.ui.common.menu.NavigationMenuEvent")]
        [Event(name="taskPriorityChanged", type="flash.events.Event")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.domain.test.TestTaskPriority;
        import de.dittner.testmyself.ui.common.tile.TileID;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.utils.Values;

        //--------------------------------------
        //  selectedActionID
        //--------------------------------------
        private var _selectedActionID:String = "";
        [Bindable("selectedActionIDChanged")]
        public function get selectedActionID():String {return _selectedActionID;}
        public function set selectedActionID(value:String):void {
            if (_selectedActionID != value) {
                _selectedActionID = value;
                dispatchEvent(new Event("selectedActionIDChanged"));
            }
        }

        //--------------------------------------
        //  taskPriority
        //--------------------------------------
        private var _taskPriority:uint = TestTaskPriority.HIGH;
        [Bindable("taskPriorityChanged")]
        public function get taskPriority():uint {return _taskPriority;}
        public function set taskPriority(value:uint):void {
            if (_taskPriority != value) {
                _taskPriority = value;
                dispatchEvent(new Event("taskPriorityChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------
        private var stateStack:Array = [];

        //--------------------------------------
        //  trueBtnEnabled
        //--------------------------------------
        private var _trueBtnEnabled:Boolean = true;
        [Bindable("testBtnEnabledChanged")]
        public function get trueBtnEnabled():Boolean {return _trueBtnEnabled;}

        //--------------------------------------
        //  falseBtnEnabled
        //--------------------------------------
        private var _falseBtnEnabled:Boolean = true;
        [Bindable("testBtnEnabledChanged")]
        public function get falseBtnEnabled():Boolean {return _falseBtnEnabled;}

        //--------------------------------------
        //  nextTaskBtnEnabled
        //--------------------------------------
        private var _nextTaskBtnEnabled:Boolean = true;
        [Bindable("testBtnEnabledChanged")]
        public function get nextTaskBtnEnabled():Boolean {return _nextTaskBtnEnabled;}

        public function showNavigationMenu():void {
            visible = includeInLayout = true;
            stateStack.push("navigation");
            setCurrentState("navigation");
        }

        public function showFormMenu():void {
            visible = includeInLayout = true;
            stateStack.push("form");
            setCurrentState("form");
        }

        public function showTestMenu(trueBtnEnabled:Boolean = true, falseBtnEnabled:Boolean = true, nextTaskBtnEnabled:Boolean = false):void {
            visible = includeInLayout = true;
            stateStack.push("test");
            setCurrentState("test");
            _trueBtnEnabled = trueBtnEnabled;
            _falseBtnEnabled = falseBtnEnabled;
            _nextTaskBtnEnabled = nextTaskBtnEnabled;
            dispatchEvent(new Event("testBtnEnabledChanged"));
        }

        public function showPrevMenu():void {
            visible = includeInLayout = true;

            if (stateStack.length > 1) {
                stateStack.pop();
                var newState:String = stateStack.pop();
                stateStack.push(newState);
                setCurrentState(newState);
            }
            else {
                hide();
            }
        }

        public function hide():void {
            stateStack.length = 0;
            visible = includeInLayout = false;
        }

        private function notifyAction(actionID:String, isSelected:Boolean = false):void {
            dispatchEvent(new ToolActionEvent(ToolActionEvent.SELECTED, actionID, isSelected));
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="navigation"/>
        <s:State name="form"/>
        <s:State name="test"/>
    </s:states>

    <s:Rect width="100%" height="100%">
        <s:fill>
            <s:SolidColor color="{AppColors.MENU_LIST_BG}"/>
        </s:fill>
    </s:Rect>

    <!--Note navigation Menu-->

    <s:HGroup width="80%" height="100%"
              includeIn="navigation"
              gap="{Values.PT10}"
              verticalAlign="middle" horizontalCenter="0">
        <menu:MenuButton id="prevNoteBtn"
                         upTileID="{TileID.MENU_PREV_NOTE_ICON}"
                         disabledTileID="{TileID.MENU_PREV_NOTE_RED_ICON}"
                         enabled="{enabled}"
                         click="notifyAction(ToolAction.PREV_NOTE)"/>

        <s:Spacer width="100%"/>

        <menu:MenuButton id="nextNoteBtn"
                         upTileID="{TileID.MENU_NEXT_NOTE_ICON}"
                         disabledTileID="{TileID.MENU_NEXT_NOTE_RED_ICON}"
                         enabled="{enabled}"
                         click="notifyAction(ToolAction.NEXT_NOTE)"/>

    </s:HGroup>

    <!--Form Menu-->

    <s:HGroup width="80%" height="100%"
              includeIn="form"
              gap="{Values.PT10}"
              verticalAlign="middle" horizontalCenter="0">
        <menu:MenuButton id="cancelBtn"
                         upTileID="{TileID.MENU_CANCEL_ICON}"
                         disabledTileID="{TileID.MENU_CANCEL_RED_ICON}"
                         enabled="{enabled}"
                         click="notifyAction(ToolAction.CANCEL)"/>

        <s:Spacer width="100%"/>

        <menu:MenuButton id="applyBtn"
                         upTileID="{TileID.MENU_APPLY_ICON}"
                         disabledTileID="{TileID.MENU_APPLY_RED_ICON}"
                         enabled="{enabled}"
                         click="notifyAction(ToolAction.APPLY)"/>
    </s:HGroup>

    <!--Test Menu-->

    <s:HGroup width="80%" height="100%"
              includeIn="test"
              gap="{Values.PT10}"
              verticalAlign="middle" horizontalCenter="0">
        <s:Spacer width="100%"/>

        <components:TaskPriorityBoard id="taskPriorityBoard"
                                      enabled="{enabled}"
                                      taskPriority="@{taskPriority}"/>

        <s:Spacer width="100%"/>

        <menu:MenuButton id="trueBtn"
                         upTileID="{TileID.MENU_APPLY_ICON}"
                         disabledTileID="{TileID.MENU_APPLY_RED_ICON}"
                         visible="{trueBtnEnabled}" includeInLayout="{trueBtnEnabled}"
                         enabled="{enabled}"
                         click="notifyAction(ToolAction.TRUE)"/>

        <menu:MenuButton id="falseBtn"
                         upTileID="{TileID.MENU_CANCEL_ICON}"
                         disabledTileID="{TileID.MENU_CANCEL_RED_ICON}"
                         visible="{falseBtnEnabled}" includeInLayout="{falseBtnEnabled}"
                         enabled="{enabled}"
                         click="notifyAction(ToolAction.FALSE)"/>

        <menu:MenuButton id="nextTaskBtn"
                         upTileID="{TileID.MENU_NEXT_ICON}"
                         disabledTileID="{TileID.MENU_NEXT_RED_ICON}"
                         visible="{nextTaskBtnEnabled}" includeInLayout="{nextTaskBtnEnabled}"
                         enabled="{enabled}"
                         click="notifyAction(ToolAction.NEXT_TASK)"/>

        <menu:MenuButton id="answerBtn"
                         upTileID="{TileID.MENU_QUESTION_ICON}"
                         disabledTileID="{TileID.MENU_QUESTION_RED_ICON}"
                         enabled="{enabled}"
                         click="notifyAction(ToolAction.ANSWER)"/>

        <s:Spacer width="100%"/>
    </s:HGroup>

</s:Group>
