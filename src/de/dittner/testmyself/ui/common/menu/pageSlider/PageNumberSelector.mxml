<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:components="de.dittner.testmyself.ui.common.audio.components.*"
         xmlns:tile="de.dittner.testmyself.ui.common.tile.*"
         height="{Values.PT100}">
    <fx:Metadata>
        [Event(name="pageNumSelected", type="flash.events.Event")]
    </fx:Metadata>
    <fx:Script><![CDATA[
        import de.dittner.testmyself.ui.common.popup.SimplePopup;
        import de.dittner.testmyself.ui.common.tile.TileID;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.utils.Values;

        //--------------------------------------
        //  totalPages
        //--------------------------------------
        private var _totalPages:int = 0;
        [Bindable("totalPagesChanged")]
        public function get totalPages():int {return _totalPages;}
        public function set totalPages(value:int):void {
            if (_totalPages != value) {
                _totalPages = value;
                dispatchEvent(new Event("totalPagesChanged"));
            }
        }

        //--------------------------------------
        //  curPageNum
        //--------------------------------------
        private var _curPageNum:int = 0;
        [Bindable("curPageNumChanged")]
        public function get curPageNum():int {return _curPageNum;}
        public function set curPageNum(value:int):void {
            if (_curPageNum != value) {
                _curPageNum = value;
                dispatchEvent(new Event("curPageNumChanged"));
            }
        }

        override protected function updateDisplayList(w:Number, h:Number):void {
            super.updateDisplayList(w, h);
            var g:Graphics = graphics;
            g.clear();
            var arrowWid:Number = Values.PT20;
            var arrowHei:Number = Values.PT10;
            g.beginFill(0);
            g.drawRoundRect(0, 0, w, h - arrowHei, Values.PT20, Values.PT20);
            g.endFill();

            g.lineStyle(1, 0);
            g.beginFill(0);
            g.moveTo(w / 2 - arrowWid / 2, h - arrowHei);
            g.lineTo(w / 2 + arrowWid / 2, h - arrowHei);
            g.lineTo(w / 2, h);
            g.endFill();
        }

        private function apply():void {
            dispatchEvent(new Event("pageNumSelected"));
            SimplePopup.close();
        }

        private function cancel():void {
            SimplePopup.close();
        }
        ]]></fx:Script>

    <s:Label text="{rewindingSlider.value + 1}"
             width="50%" horizontalCenter="0" textAlign="center"
             fontSize="{Values.PT20}" verticalAlign="middle" paddingTop="{Values.PT15}"
             maxDisplayedLines="1"
             color="{AppColors.WHITE}"/>

    <tile:FadeTileButton id="cancelBtn"
                         left="{Values.PT5}"
                         upTileID="{TileID.MENU_FORM_CANCEL_ICON}"
                         click="cancel()"/>

    <tile:FadeTileButton id="applyBtn"
                         right="{Values.PT5}"
                         enabled="{enabled}"
                         upTileID="{TileID.MENU_FORM_APPLY_ICON}"
                         click="apply()"/>

    <components:RewindingSlider id="rewindingSlider"
                                top="{Values.PT40}"
                                left="{Values.PT20}"
                                right="{Values.PT20}"
                                minimum="0"
                                maximum="{totalPages-1}"
                                value="@{curPageNum}"
                                showDataTip="false"
                                stepSize="1"
                                snapInterval="1"
                                liveDragging="true"
                                skinClass="de.dittner.testmyself.ui.common.menu.pageSlider.PageSliderSkin"/>
</s:Group>
