<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:tile="de.dittner.testmyself.ui.common.tile.*"
         implements="de.dittner.testmyself.ui.common.menu.INoteToolbar"
         addedToStage="addedToStageHandler(event)">

    <fx:Metadata>
        [Event(name="selected", type="de.dittner.testmyself.ui.common.menu.ToolActionEvent")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import com.greensock.TweenLite;

        import de.dittner.testmyself.model.domain.note.DeWordArticle;
        import de.dittner.testmyself.ui.common.audio.mp3.MP3Player;
        import de.dittner.testmyself.ui.common.tile.TileID;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.utils.Values;

        public function revert():void {
            goBackBtn.enabled = false;
            formatTextBtn.enabled = false;
            internetSearchBtn.enabled = false;
            addNoteBtn.enabled = false;
            editNoteBtn.enabled = false;
            removeNoteBtn.enabled = false;
            showDetailsBtn.enabled = false;
            transInvertBtn.enabled = false;
            filterBtn.enabled = false;
            setTaskAsRightBtn.enabled = false;
            moveTaskToStartBtn.enabled = false;
            showFailedTasksBtn.enabled = false;
            showDetailsBtn.selected = false;
            showFailedTasksBtn.selected = true;
            playCommentBtn.enabled = false;
            playCommentBtn.selected = false;
            articleBar.enabled = false;
        }

        //--------------------------------------
        //  isShown
        //--------------------------------------
        private var _isShown:Boolean = false;
        [Bindable("isShownChanged")]
        public function get isShown():Boolean {return _isShown;}
        private function setIsShown(value:Boolean):void {
            if (_isShown != value) {
                _isShown = value;
                dispatchEvent(new Event("isShownChanged"));
            }
        }

        private var isAnimating:Boolean = false;
        private var hasPendingAnimation:Boolean = false;

        public function show():void {
            if (!isShown) {
                setIsShown(true);
                startAlphaAnimation();
            }
        }

        public function hide():void {
            if (isShown) {
                setIsShown(false);
                startAlphaAnimation();
            }
        }

        private function startAlphaAnimation():void {
            if (isAnimating) {
                hasPendingAnimation = true;
            }
            else {
                isAnimating = true;
                TweenLite.to(this, 0.4, {y: (isShown ? AppSizes.MENU_HEIGHT : 0), onComplete: animationComplete});
            }
        }

        private function animationComplete():void {
            isAnimating = false;
            if (hasPendingAnimation) {
                hasPendingAnimation = false;
                startAlphaAnimation();
            }
        }

        private function notifyToolAction(actionID:String):void {
            dispatchEvent(new ToolActionEvent(ToolActionEvent.SELECTED, actionID));
        }

        override protected function updateDisplayList(w:Number, h:Number):void {
            super.updateDisplayList(w, h);
            var g:Graphics = graphics;
            g.clear();
            g.beginFill(AppColors.TOOLBAR_BG);
            g.drawRect(0, 0, w, h);
            g.endFill();
        }

        private function formToolsVisible(addEnabled:Boolean, editEnabled:Boolean, removeEnabled:Boolean):Boolean {
            return addEnabled || editEnabled || removeEnabled;
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Enable Buttons
        //
        //----------------------------------------------------------------------------------------------

        public function enableGoBack(value:Boolean = true):void {
            goBackBtn.enabled = value;
        }

        public function enableFormatText(value:Boolean = true):void {
            formatTextBtn.enabled = value;
        }

        public function enableInternetSearch(value:Boolean = true):void {
            internetSearchBtn.enabled = value;
        }

        public function enableAddNote(value:Boolean = true):void {
            addNoteBtn.enabled = value;
        }
        public function enableEditNote(value:Boolean = true):void {
            editNoteBtn.enabled = value;
        }
        public function enableRemoveNote(value:Boolean = true):void {
            removeNoteBtn.enabled = value;
        }
        public function enableShowDetails(value:Boolean = true):void {
            showDetailsBtn.enabled = value;
        }
        public function enableTransInvert(value:Boolean = true):void {
            transInvertBtn.enabled = value;
        }
        public function enableFilter(value:Boolean = true):void {
            filterBtn.enabled = value;
        }
        public function enableShowFailedTasks(value:Boolean = true):void {
            showFailedTasksBtn.enabled = value;
        }
        public function enablesSetTaskAsRight(value:Boolean = true):void {
            setTaskAsRightBtn.enabled = value;
        }
        public function enablesMoveTaskToStart(value:Boolean = true):void {
            moveTaskToStartBtn.enabled = value;
        }
        public function enablePlayCommentBtn(value:Boolean = true):void {
            playCommentBtn.enabled = value;
        }
        public function enableArticleBar(value:Boolean = true, selectedArticle:String = ""):void {
            articleBar.enabled = value;
            derBtn.selected = dieBtn.selected = dasBtn.selected = false;
            if (!selectedArticle) return;

            if (selectedArticle == DeWordArticle.DER_DIE_DAS) {
                derBtn.selected = dieBtn.selected = dasBtn.selected = true;
            }
            else if (selectedArticle == DeWordArticle.DER_DIE) {
                derBtn.selected = dieBtn.selected = true;
            }
            else if (selectedArticle == DeWordArticle.DER_DAS) {
                derBtn.selected = dasBtn.selected = true;
            }
            else if (selectedArticle == DeWordArticle.DIE_DAS) {
                dieBtn.selected = dasBtn.selected = true;
            }
            else if (selectedArticle == DeWordArticle.DER) {
                derBtn.selected = true;
            }
            else if (selectedArticle == DeWordArticle.DIE) {
                dieBtn.selected = true;
            }
            else if (selectedArticle == DeWordArticle.DAS) {
                dasBtn.selected = true;
            }
        }

        public function getSelectedArticle():String {
            if (derBtn.selected && dieBtn.selected && dasBtn.selected) return DeWordArticle.DER_DIE_DAS;
            if (derBtn.selected && dieBtn.selected) return DeWordArticle.DER_DIE;
            if (derBtn.selected && dasBtn.selected) return DeWordArticle.DER_DAS;
            if (dieBtn.selected && dasBtn.selected) return DeWordArticle.DIE_DAS;
            if (derBtn.selected) return DeWordArticle.DER;
            if (dieBtn.selected) return DeWordArticle.DIE;
            if (dasBtn.selected) return DeWordArticle.DAS;
            return "";
        }

        public function selectTransInvert(value:Boolean = true):void {
            transInvertBtn.selected = value;
        }
        public function selectShowDetails(value:Boolean = true):void {
            showDetailsBtn.selected = value;
        }
        public function selectShowFailedTasks(value:Boolean = true):void {
            showFailedTasksBtn.selected = value;
        }

        private function addedToStageHandler(event:Event):void {
            stage.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);
        }

        //--------------------------------------
        //  keyboardEnabled
        //--------------------------------------
        private var _keyboardEnabled:Boolean = true;
        [Bindable("keyboardEnabledChanged")]
        public function get keyboardEnabled():Boolean {return _keyboardEnabled;}
        public function set keyboardEnabled(value:Boolean):void {
            if (_keyboardEnabled != value) {
                _keyboardEnabled = value;
                dispatchEvent(new Event("keyboardEnabledChanged"));
            }
        }

        override protected function keyUpHandler(event:KeyboardEvent):void {
            if (keyboardEnabled && playCommentBtn && playCommentBtn.enabled && event.keyCode == Keyboard.SPACE)
                notifyToolAction(ToolAction.PLAY_COMMENT)
            else if (keyboardEnabled && goBackBtn && goBackBtn.enabled && event.keyCode == Keyboard.BACKSPACE)
                notifyToolAction(ToolAction.GO_BACK)
        }
        ]]></fx:Script>

    <tile:FadeTileButton id="goBackBtn"
                         visible="{goBackBtn.enabled}"
                         includeInLayout="{goBackBtn.enabled}"
                         upTileID="{TileID.TOOLBAR_GO_BACK}"
                         left="0"
                         verticalCenter="0"
                         paddingLeft="{Values.PT40}"
                         paddingRight="0"
                         fontSize="{Values.PT18}"
                         textColor="0"
                         title="{resourceManager.getString('app', 'GoBack')}"
                         click="notifyToolAction(ToolAction.GO_BACK)"/>

    <tile:FadeTileButton id="formatTextBtn"
                         visible="{formatTextBtn.enabled}"
                         includeInLayout="{formatTextBtn.enabled}"
                         upTileID="{TileID.TOOLBAR_FORMAT_TEXT}"
                         left="{Values.PT5}"
                         verticalCenter="0"
                         paddingLeft="{Values.PT40}"
                         paddingRight="0"
                         fontSize="{Values.PT18}"
                         textColor="0"
                         title="{resourceManager.getString('app', 'Formatting')}"
                         click="notifyToolAction(ToolAction.FORMAT_TEXT)"/>

    <tile:FadeTileButton id="internetSearchBtn"
                         visible="{internetSearchBtn.enabled}"
                         includeInLayout="{internetSearchBtn.enabled}"
                         upTileID="{TileID.TOOLBAR_SEARCH_ON_THE_INTERNET}"
                         left="{Values.PT180}"
                         verticalCenter="0"
                         paddingLeft="{Values.PT40}"
                         paddingRight="0"
                         fontSize="{Values.PT18}"
                         textColor="0"
                         title="{resourceManager.getString('app', 'InternetSearch')}"
                         click="notifyToolAction(ToolAction.SEARCH)"/>

    <s:HGroup height="100%" horizontalCenter="0" verticalAlign="middle" gap="{Values.PT15}">
        <tile:FadeTileButton id="addNoteBtn"
                             upTileID="{TileID.TOOLBAR_ADD}"
                             visible="{formToolsVisible(addNoteBtn.enabled, editNoteBtn.enabled, removeNoteBtn.enabled)}"
                             includeInLayout="{addNoteBtn.visible}"
                             click="notifyToolAction(ToolAction.CREATE_NOTE)"/>

        <tile:FadeTileButton id="editNoteBtn"
                             upTileID="{TileID.TOOLBAR_EDIT}"
                             visible="{formToolsVisible(addNoteBtn.enabled, editNoteBtn.enabled, removeNoteBtn.enabled)}"
                             includeInLayout="{editNoteBtn.visible}"
                             click="notifyToolAction(ToolAction.EDIT_NOTE)"/>

        <tile:FadeTileButton id="removeNoteBtn"
                             upTileID="{TileID.TOOLBAR_DELETE}"
                             visible="{formToolsVisible(addNoteBtn.enabled, editNoteBtn.enabled, removeNoteBtn.enabled)}"
                             includeInLayout="{removeNoteBtn.visible}"
                             click="notifyToolAction(ToolAction.REMOVE_NOTE)"/>

        <tile:FadeTileButton id="showDetailsBtn"
                             isToggle="true"
                             visible="{showDetailsBtn.enabled}"
                             includeInLayout="{showDetailsBtn.enabled}"
                             selected="false"
                             upTileID="{TileID.TOOLBAR_COLLAPSED_LIST}"
                             downTileID="{TileID.TOOLBAR_EXPANDED_LIST}"
                             selectedChange="notifyToolAction(showDetailsBtn.selected ? ToolAction.SHOW_DETAILS : ToolAction.HIDE_DETAILS)"
                             click="notifyToolAction(showDetailsBtn.selected ? ToolAction.SHOW_DETAILS : ToolAction.HIDE_DETAILS)"/>

        <tile:FadeTileButton id="transInvertBtn"
                             isToggle="true"
                             visible="{transInvertBtn.enabled}"
                             includeInLayout="{transInvertBtn.enabled}"
                             upTileID="{TileID.TOOLBAR_INVERSE_TRANSLATION}"
                             click="notifyToolAction(transInvertBtn.selected ? ToolAction.APPLY_INVERT : ToolAction.DENY_INVERT)"/>

        <tile:FadeTileButton id="filterBtn"
                             visible="{filterBtn.enabled}"
                             includeInLayout="{filterBtn.enabled}"
                             upTileID="{TileID.TOOLBAR_FILTER}"
                             click="notifyToolAction(ToolAction.FILTER)"/>

        <tile:FadeTileButton id="showFailedTasksBtn"
                             isToggle="true"
                             visible="{showFailedTasksBtn.enabled}"
                             includeInLayout="{showFailedTasksBtn.enabled}"
                             selected="true"
                             upTileID="{TileID.TOOLBAR_SHOW_ALL_TASK}"
                             downTileID="{TileID.TOOLBAR_SHOW_FAILED_TASK}"
                             click="notifyToolAction(showFailedTasksBtn.selected ? ToolAction.SHOW_FAILED_TASK : ToolAction.SHOW_ALL_TASK)"/>

        <tile:FadeTileButton id="setTaskAsRightBtn"
                             visible="{setTaskAsRightBtn.enabled}"
                             includeInLayout="{setTaskAsRightBtn.enabled}"
                             upTileID="{TileID.TOOLBAR_SET_TASK_AS_RIGHT}"
                             click="notifyToolAction(ToolAction.SET_TASK_AS_RIGHT)"/>

        <tile:FadeTileButton id="moveTaskToStartBtn"
                             visible="{moveTaskToStartBtn.enabled}"
                             includeInLayout="{moveTaskToStartBtn.enabled}"
                             upTileID="{TileID.TOOLBAR_MOVE_TASK_TO_START}"
                             click="notifyToolAction(ToolAction.MOVE_TASK_TO_START)"/>
    </s:HGroup>

    <tile:FadeTileButton id="playCommentBtn"
                         isToggle="true"
                         upTileID="{TileID.TOOLBAR_PLAY_AUDIO}"
                         downTileID="{TileID.TOOLBAR_PLAY_AUDIO_SELECTED}"
                         visible="{playCommentBtn.enabled}"
                         right="0"
                         verticalCenter="0"
                         deselectOnlyProgrammatically="true"
                         selected="{MP3Player.instance.isPlaying}"
                         change="if(playCommentBtn.selected) notifyToolAction(ToolAction.PLAY_COMMENT)"/>

    <s:HGroup id="articleBar"
              gap="{Values.PT22}" right="{Values.PT12}" verticalCenter="0"
              visible="{articleBar.enabled}"
              includeInLayout="{articleBar.enabled}">
        <tile:FadeTileButton id="derBtn"
                             isToggle="true"
                             use9Scale="true"
                             upBgAlpha=".4"
                             selected="false"
                             upTileID="{TileID.BTN_BLACK}"
                             textColor="{AppColors.TEXT_WHITE}"
                             isBold="true"
                             fontSize="{Values.PT15}"
                             title="DER"/>

        <tile:FadeTileButton id="dieBtn"
                             isToggle="true"
                             use9Scale="true"
                             upBgAlpha=".3"
                             selected="false"
                             upTileID="{TileID.BTN_BLACK}"
                             textColor="{dieBtn.selected ? AppColors.TEXT_RED : AppColors.TEXT_WHITE}"
                             isBold="true"
                             fontSize="{Values.PT15}"
                             title="DIE"/>

        <tile:FadeTileButton id="dasBtn"
                             isToggle="true"
                             use9Scale="true"
                             upBgAlpha=".3"
                             selected="false"
                             upTileID="{TileID.BTN_BLACK}"
                             textColor="{dasBtn.selected ? AppColors.TEXT_YELLOW : AppColors.TEXT_WHITE}"
                             isBold="true"
                             fontSize="{Values.PT15}"
                             title="DAS"/>

    </s:HGroup>

</s:Group>
