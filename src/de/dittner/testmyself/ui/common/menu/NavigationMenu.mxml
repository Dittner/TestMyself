<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:menu="de.dittner.testmyself.ui.common.menu.*"
         implements="de.dittner.testmyself.ui.common.menu.INavigationMenu"
         currentState="hide"
         creationComplete="creationCompleteHandler(event)">

    <fx:Metadata>
        [Event(name="selected", type="de.dittner.testmyself.ui.common.menu.NavigationMenuEvent")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import de.dittner.testmyself.ui.common.tile.TileID;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.view.ViewInfo;
        import de.dittner.testmyself.utils.Values;

        import mx.events.FlexEvent;

        //--------------------------------------
        //  hasNetworkConnection
        //--------------------------------------
        private var _hasNetworkConnection:Boolean = false;
        [Bindable("hasNetworkConnectionChanged")]
        public function get hasNetworkConnection():Boolean {return _hasNetworkConnection;}
        public function set hasNetworkConnection(value:Boolean):void {
            if (_hasNetworkConnection != value) {
                _hasNetworkConnection = value;
                dispatchEvent(new Event("hasNetworkConnectionChanged"));
            }
        }

        //--------------------------------------
        //  selectedViewInfo
        //--------------------------------------
        private var _selectedViewInfo:ViewInfo;
        [Bindable("selectedViewInfoChanged")]
        public function get selectedViewInfo():ViewInfo {return _selectedViewInfo;}
        public function set selectedViewInfo(value:ViewInfo):void {
            if (_selectedViewInfo != value) {
                _selectedViewInfo = value;
                if (selectedViewInfo && btnHash[selectedViewInfo.viewID]) {
                    if (lastSelectedBtn) lastSelectedBtn.selected = false;
                    btnHash[selectedViewInfo.viewID].selected = true;
                    lastSelectedBtn = btnHash[selectedViewInfo.viewID];
                }
                dispatchEvent(new Event("selectedViewInfoChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        public function show():void {
            setCurrentState("show");
        }

        public function hide():void {
            setCurrentState("hide");
        }

        private var lastSelectedBtn:MenuButton;
        private function viewMenuBtnSelectedHandler(e:Event):void {
            var menuBtn:MenuButton = e.target as MenuButton;
            if (menuBtn && menuBtn.selected && menuBtn != lastSelectedBtn) {
                if (lastSelectedBtn) lastSelectedBtn.selected = false;
                lastSelectedBtn = menuBtn;
                dispatchEvent(new NavigationMenuEvent(NavigationMenuEvent.SELECTED, menuBtn.menuID));
            }
        }

        private var btnHash:Object;
        private function creationCompleteHandler(event:FlexEvent):void {
            if (!btnHash) {
                btnHash = {};
                btnHash[ViewID.INFO] = infoViewBtn;
                btnHash[ViewID.WORD_LIST] = wordViewBtn;
                btnHash[ViewID.VERB_LIST] = verbViewBtn;
                btnHash[ViewID.LESSON_TAG_LIST] = lessonViewBtn;
                btnHash[ViewID.MAP] = mapViewBtn;
                btnHash[ViewID.TEST_LIST] = testListViewBtn;
                btnHash[ViewID.SEARCH] = searchViewBtn;
                btnHash[ViewID.SETTINGS] = settingsViewBtn;
            }
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="show"/>
        <s:State name="hide"/>
    </s:states>

    <s:Rect width="100%" height="100%">
        <s:fill>
            <s:SolidColor color="{AppColors.MENU_LIST_BG}"/>
        </s:fill>
    </s:Rect>

    <s:HGroup width="100%" height="100%"
              visible.show="true"
              visible.hide="false"
              disabledAlpha="1"
              paddingLeft="{Values.PT5}" paddingRight="{Values.PT5}" gap="{Values.PT10}"
              verticalAlign="middle">

        <menu:MenuButton id="infoViewBtn"
                         enabled="{enabled}"
                         isToggle="true"
                         deselectOnlyProgrammatically="true"
                         menuID="{ViewID.INFO}"
                         upTileID="{TileID.MENU_INFO_ICON}"
                         disabledTileID="{TileID.MENU_INFO_RED_ICON}"
                         change="viewMenuBtnSelectedHandler(event)"/>

        <s:Spacer width="50%"/>

        <menu:MenuButton id="wordViewBtn"
                         isToggle="true"
                         deselectOnlyProgrammatically="true"
                         menuID="{ViewID.WORD_LIST}"
                         upTileID="{TileID.MENU_WORD_ICON}"
                         disabledTileID="{TileID.MENU_WORD_RED_ICON}"
                         enabled="{enabled}"
                         change="viewMenuBtnSelectedHandler(event)"/>

        <menu:MenuButton id="verbViewBtn"
                         isToggle="true"
                         deselectOnlyProgrammatically="true"
                         menuID="{ViewID.VERB_LIST}"
                         upTileID="{TileID.MENU_VERB_ICON}"
                         disabledTileID="{TileID.MENU_VERB_RED_ICON}"
                         enabled="{enabled}"
                         change="viewMenuBtnSelectedHandler(event)"/>

        <menu:MenuButton id="lessonViewBtn"
                         isToggle="true"
                         deselectOnlyProgrammatically="true"
                         menuID="{ViewID.LESSON_TAG_LIST}"
                         upTileID="{resourceManager.getString('app', 'LESSON_MENU_ICON')}"
                         disabledTileID="{resourceManager.getString('app', 'LESSON_DISABLED_MENU_ICON')}"
                         enabled="{enabled}"
                         change="viewMenuBtnSelectedHandler(event)"/>

        <s:Spacer width="100%"/>

        <menu:MenuButton id="mapViewBtn"
                         isToggle="true"
                         deselectOnlyProgrammatically="true"
                         enabled="{enabled}"
                         menuID="{ViewID.MAP}"
                         upTileID="{TileID.MENU_MAP_ICON}"
                         disabledTileID="{TileID.MENU_MAP_RED_ICON}"
                         change="viewMenuBtnSelectedHandler(event)"/>

        <menu:MenuButton id="testListViewBtn"
                         isToggle="true"
                         deselectOnlyProgrammatically="true"
                         menuID="{ViewID.TEST_LIST}"
                         upTileID="{TileID.MENU_TESTING_ICON}"
                         disabledTileID="{TileID.MENU_TESTING_RED_ICON}"
                         enabled="{enabled}"
                         change="viewMenuBtnSelectedHandler(event)"/>

        <menu:MenuButton id="searchViewBtn"
                         isToggle="true"
                         deselectOnlyProgrammatically="true"
                         menuID="{ViewID.SEARCH}"
                         upTileID="{TileID.MENU_SEARCH_ICON}"
                         disabledTileID="{TileID.MENU_SEARCH_RED_ICON}"
                         enabled="{enabled}"
                         change="viewMenuBtnSelectedHandler(event)"/>

        <s:Spacer width="50%"/>

        <menu:MenuButton id="settingsViewBtn"
                         isToggle="true"
                         deselectOnlyProgrammatically="true"
                         menuID="{ViewID.SETTINGS}"
                         upTileID="{TileID.MENU_SETTINGS_ICON}"
                         disabledTileID="{TileID.MENU_SETTINGS_RED_ICON}"
                         enabled="{enabled}"
                         change="viewMenuBtnSelectedHandler(event)"/>
    </s:HGroup>

    <s:Label id="langLbl"
             text="{'— '+CONFIG::LANGUAGE+' —'}"
             horizontalCenter="0"
             bottom="{Values.PT5}"
             fontWeight="bold"
             fontSize="{Values.PT10}" color="{CONFIG::LANGUAGE == 'DE' ? AppColors.TEXT_YELLOW : 0xff5b9e}" alpha="0.65"/>

</s:Group>
