<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:menu="de.dittner.testmyself.ui.common.menu.*"
         xmlns:tile="de.dittner.testmyself.ui.common.tile.*">

    <fx:Metadata>
        [Event(name="selected", type="de.dittner.testmyself.ui.common.menu.NavigationMenuEvent")]
        [Event(name="clicked", type="de.dittner.testmyself.ui.common.menu.NavigationMenuEvent")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import de.dittner.testmyself.ui.common.tile.TileID;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.utils.Values;

        //--------------------------------------
        //  hasNetworkConnection
        //--------------------------------------
        private var _hasNetworkConnection:Boolean = false;
        [Bindable("hasNetworkConnectionChanged")]
        public function get hasNetworkConnection():Boolean {return _hasNetworkConnection;}
        public function set hasNetworkConnection(value:Boolean):void {
            if (_hasNetworkConnection != value) {
                _hasNetworkConnection = value;
                dispatchEvent(new Event("hasNetworkConnectionChanged"));
            }
        }

        //--------------------------------------
        //  selectedViewMenuID
        //--------------------------------------
        private var _selectedViewMenuID:String = "";
        [Bindable("selectedViewMenuIDChanged")]
        public function get selectedViewMenuID():String {return _selectedViewMenuID;}
        public function set selectedViewMenuID(value:String):void {
            if (_selectedViewMenuID != value) {
                _selectedViewMenuID = value;
                dispatchEvent(new Event("selectedViewMenuIDChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        private function menuBtnClickHandler(e:Event):void {
            var menuBtn:MenuButton = e.target as MenuButton;
            if (menuBtn) dispatchEvent(new NavigationMenuEvent(NavigationMenuEvent.CLICKED, menuBtn.menuID));
        }

        private function viewMenuBtnSelectedHandler(e:Event):void {
            var menuBtn:MenuButton = e.target as MenuButton;
            if (menuBtn && menuBtn.selected) {
                selectedViewMenuID = menuBtn.menuID;
                dispatchEvent(new NavigationMenuEvent(NavigationMenuEvent.SELECTED, menuBtn.menuID));
            }
        }
        ]]></fx:Script>

    <s:Rect width="100%" height="100%">
        <s:fill>
            <s:SolidColor color="{AppColors.MENU_LIST_BG}"/>
        </s:fill>
    </s:Rect>

    <s:HGroup width="100%" height="100%"
              disabledAlpha="1"
              paddingLeft="0" paddingRight="0" gap="{Values.PT10}"
              verticalAlign="middle">
        <menu:MenuButton id="langListViewBtn"
                         enabled="{enabled}"
                         isToggle="true"
                         deselectOnlyProgrammatically="true"
                         menuID="{ViewID.LANG_LIST}"
                         upTileID="{TileID.MENU_INFO_ICON}"
                         disabledTileID="{TileID.MENU_INFO_RED_ICON}"
                         selected="{selectedViewMenuID == ViewID.LANG_LIST}"
                         change="viewMenuBtnSelectedHandler(event)"/>

        <s:Spacer width="50%"/>

        <menu:MenuButton id="wordViewBtn"
                         isToggle="true"
                         deselectOnlyProgrammatically="true"
                         menuID="{ViewID.WORD}"
                         upTileID="{TileID.MENU_WORD_ICON}"
                         disabledTileID="{TileID.MENU_WORD_RED_ICON}"
                         selected="{selectedViewMenuID == ViewID.WORD}"
                         enabled="{enabled}"
                         change="viewMenuBtnSelectedHandler(event)"/>

        <menu:MenuButton id="verbViewBtn"
                         isToggle="true"
                         deselectOnlyProgrammatically="true"
                         menuID="{ViewID.VERB}"
                         upTileID="{TileID.MENU_VERB_ICON}"
                         disabledTileID="{TileID.MENU_VERB_RED_ICON}"
                         selected="{selectedViewMenuID == ViewID.VERB}"
                         enabled="{enabled}"
                         change="viewMenuBtnSelectedHandler(event)"/>

        <menu:MenuButton id="lessonViewBtn"
                         isToggle="true"
                         deselectOnlyProgrammatically="true"
                         menuID="{ViewID.LESSON}"
                         upTileID="{resourceManager.getString('app', 'LESSON_MENU_ICON')}"
                         disabledTileID="{resourceManager.getString('app', 'LESSON_DISABLED_MENU_ICON')}"
                         selected="{selectedViewMenuID == ViewID.LESSON}"
                         enabled="{enabled}"
                         change="viewMenuBtnSelectedHandler(event)"/>

        <s:Spacer width="100%"/>

        <menu:MenuButton id="mapViewBtn"
                         isToggle="true"
                         deselectOnlyProgrammatically="true"
                         enabled="{enabled}"
                         menuID="{ViewID.MAP}"
                         upTileID="{TileID.MENU_MAP_ICON}"
                         disabledTileID="{TileID.MENU_MAP_RED_ICON}"
                         selected="{selectedViewMenuID == ViewID.MAP}"
                         change="viewMenuBtnSelectedHandler(event)"/>

        <menu:MenuButton id="testingViewBtn"
                         isToggle="true"
                         deselectOnlyProgrammatically="true"
                         menuID="{ViewID.TEST}"
                         upTileID="{TileID.MENU_TESTING_ICON}"
                         disabledTileID="{TileID.MENU_TESTING_RED_ICON}"
                         selected="{selectedViewMenuID == ViewID.TEST}"
                         enabled="{enabled}"
                         change="viewMenuBtnSelectedHandler(event)"/>

        <menu:MenuButton id="searchViewBtn"
                         isToggle="true"
                         deselectOnlyProgrammatically="true"
                         menuID="{ViewID.SEARCH}"
                         upTileID="{TileID.MENU_SEARCH_ICON}"
                         disabledTileID="{TileID.MENU_SEARCH_RED_ICON}"
                         selected="{selectedViewMenuID == ViewID.SEARCH}"
                         enabled="{enabled}"
                         change="viewMenuBtnSelectedHandler(event)"/>

        <s:Spacer width="50%"/>

        <menu:MenuButton id="settingsViewBtn"
                         isToggle="true"
                         deselectOnlyProgrammatically="true"
                         menuID="{ViewID.SETTINGS}"
                         upTileID="{TileID.MENU_SETTINGS_ICON}"
                         disabledTileID="{TileID.MENU_SETTINGS_RED_ICON}"
                         selected="{selectedViewMenuID == ViewID.SETTINGS}"
                         enabled="{enabled}"
                         change="viewMenuBtnSelectedHandler(event)"/>
    </s:HGroup>

    <tile:FadeTileButton left="{Values.PT2}" top="{Values.PT2}"
                         mouseEnabled="false"
                         visible="{hasNetworkConnection}"
                         upTileID="{TileID.NETWORK_ICON}"
                         disabledTileID="{TileID.NETWORK_RED_ICON}"
                         enabled="{enabled}"
                         animationDuration="{langListViewBtn.animationDuration}"/>
</s:Group>
