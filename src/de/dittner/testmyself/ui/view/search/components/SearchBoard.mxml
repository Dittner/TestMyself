<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:button="de.dittner.testmyself.ui.common.button.*"
         xmlns:input="de.dittner.testmyself.ui.common.input.*"
         xmlns:tile="de.dittner.testmyself.ui.common.tile.*"
         currentState="collapsed">
    <fx:Metadata>
        [Event(name="startSearch", type="flash.events.Event")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import de.dittner.testmyself.ui.common.tile.TileID;
        import de.dittner.testmyself.utils.Values;

        import mx.collections.ArrayCollection;

        [Embed(source='/assets/screen_bg_pattern.png')]
        private static const BgClass:Class;
        private static var bgBitmapData:BitmapData;
        private static const SEARCH_TEMPLATES:Array = ["halten+", "weisen+", "lassen+", "gehen+", "setzen+", "tragen+", "nehmen+", "gehen+", "finden+", "treten+", "stellen+", "ziehen+", "wenden+", "kommen+", "sehen+", "geben+", "stehen+", "legen+", "steigen+", "bringen+", "treffen+", "werfen+", "fallen+", "sprechen+", "werfen+", "fangen+", "heben+", "brechen+", "fassen+", "richten+", "stoÃŸen+"];

        //--------------------------------------
        //  isTemplatesEnabled
        //--------------------------------------
        private var _isTemplatesEnabled:Boolean = true;
        [Bindable("isTemplatesEnabledChanged")]
        public function get isTemplatesEnabled():Boolean {return _isTemplatesEnabled;}
        public function set isTemplatesEnabled(value:Boolean):void {
            if (_isTemplatesEnabled != value) {
                _isTemplatesEnabled = value;
                dispatchEvent(new Event("isTemplatesEnabledChanged"));
            }
        }

        override protected function measure():void {
            super.measure();
            measuredHeight = measuredMinHeight = currentState == "normal" ? Values.PT115 : Values.PT65;
        }

        override protected function updateDisplayList(w:Number, h:Number):void {
            super.updateDisplayList(w, h);
            var g:Graphics = graphics;
            g.clear();
            if (!bgBitmapData) bgBitmapData = (new BgClass() as Bitmap).bitmapData;
            g.beginBitmapFill(bgBitmapData);
            g.drawRect(0, 0, w, h);
            g.endFill();
        }

        private static var history:TextHistory = new TextHistory();
        private function undoSearch():void {
            history.undo();
            updateSearchInput();
        }

        private function redoSearch():void {
            history.redo();
            updateSearchInput();
        }

        public function updateSearchInput():void {
            searchInput.text = history.row;
            searchInput.input.setInputInFocus();
            searchInput.input.selectAll();
        }

        private function startSearch():void {
            if (searchInput.text.length <= 1) return;

            if (history.row != searchInput.text)
                history.push(searchInput.text, searchInput.text.length);

            updateSearchInput();
            dispatchEvent(new Event("startSearch"));
        }
        ]]></fx:Script>
    <s:states>
        <s:State name="normal"/>
        <s:State name="collapsed"/>
    </s:states>

    <s:layout>
        <s:VerticalLayout gap="{Values.PT10}"
                          paddingTop="{Values.PT5}" paddingRight="{Values.PT20}" paddingLeft="{Values.PT20}" paddingBottom="{Values.PT10}"/>
    </s:layout>

    <s:HGroup width="100%"
              height="{Values.PT40}" paddingTop="{Values.PT10}"
              gap="{Values.PT30}" horizontalAlign="center"
              visible="true" includeInLayout="true"
              visible.collapsed="false" includeInLayout.collapsed="false">
        <tile:TileCheckboxButton id="wordBox"
                                 title="{resourceManager.getString('app', 'Words')}" selected="true"/>

        <tile:TileCheckboxButton id="verbBox"
                                 title="{resourceManager.getString('app', 'IrregularVerbs')}" selected="true"/>

        <tile:TileCheckboxButton id="lessonBox"
                                 title="{resourceManager.getString('app', 'Lessons')}" selected="true"/>

        <tile:TileCheckboxButton id="examplesBox"
                                 title="{resourceManager.getString('app', 'WithExamples')}" selected="true"/>

    </s:HGroup>

    <s:HGroup width="100%"
              gap="{Values.PT20}" verticalAlign="bottom">

        <input:DropdownInputForm id="searchInput"
                                 width="{width/2-Values.PT20}"
                                 isTemplatesEnabled="{isTemplatesEnabled}"
                                 title="{resourceManager.getString('app', 'EnterTheTextThatYouWantToSearch')}"
                                 inputTemplateColl="{new ArrayCollection(SEARCH_TEMPLATES)}"
                                 enterPressed="startSearch()"/>

        <tile:FadeTileButton id="undoBtn"
                             upTileID="{TileID.BTN_HISTORY_UNDO}"
                             enabled="{history.canUndo}"
                             click="undoSearch()"/>

        <tile:FadeTileButton id="redoBtn"
                             upTileID="{TileID.BTN_HISTORY_REDO}"
                             enabled="{history.canRedo}"
                             click="redoSearch()"/>

        <button:BlackButton id="applyBtn"
                            width="100%"
                            enabled="{searchInput.text.length > 1}"
                            title="{resourceManager.getString('app', 'Search')}"
                            click="startSearch()"/>

        <tile:FadeTileButton id="openFilterBtn"
                             upTileID="{TileID.PANEL_EXPAND_ICON}"
                             visible="false" includeInLayout="false"
                             visible.collapsed="true" includeInLayout.collapsed="true"
                             click="setCurrentState('normal')"/>

        <tile:FadeTileButton id="closeFilterBtn"
                             upTileID="{TileID.PANEL_COLLAPSE_ICON}"
                             visible="false" includeInLayout="false"
                             visible.normal="true" includeInLayout.normal="true"
                             click="setCurrentState('collapsed')"/>

    </s:HGroup>

</s:Group>
