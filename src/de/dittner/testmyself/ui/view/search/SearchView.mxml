<?xml version="1.0"?>
<view:SmartView xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:components="de.dittner.testmyself.ui.view.search.components.*"
                xmlns:view="de.dittner.testmyself.ui.common.view.*"
                xmlns:scroller="de.dittner.testmyself.ui.common.scroller.*"
                xmlns:note="de.dittner.testmyself.ui.common.note.*">

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.Device;
        import de.dittner.testmyself.model.domain.language.LanguageID;
        import de.dittner.testmyself.ui.common.menu.ToolAction;
        import de.dittner.testmyself.ui.common.menu.ToolActionEvent;
        import de.dittner.testmyself.ui.common.note.NoteRenderOptions;
        import de.dittner.testmyself.ui.common.view.ViewModelFactory;
        import de.dittner.testmyself.utils.Values;

        [Bindable]
        public var vm:SearchVM;
        private var renderOptions:NoteRenderOptions;

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        override protected function activating():void {
            if (!renderOptions) {
                renderOptions = new NoteRenderOptions();
                renderOptions.showDetails = true;
            }
            vm = ViewModelFactory.instance.searchVM;
            vm.lockView();
            vm.viewActivated(viewInfo);
        }

        override protected function activate():void {
            vm.unlockView();

            navigationMenu.show();
            actionMenu.showPaginationBar(vm.page);

            toolbar.show();
            toolbar.revert();
            toolbar.enableShowDetails();
            toolbar.enableTransInvert();
            toolbar.enableShowDetails();
            toolbar.selectTransInvert(renderOptions.inverted);
            toolbar.selectShowDetails(renderOptions.showDetails);
            noteList.renderOptions = renderOptions;
            toolbar.addEventListener(ToolActionEvent.SELECTED, actionSelectedHandler);
            actionMenu.addEventListener(ToolActionEvent.SELECTED, actionSelectedHandler);

            searchBoard.updateSearchInput();
            NativeApplication.nativeApplication.addEventListener(Event.ACTIVATE, nativeApplication_activateHandler);
        }

        private function nativeApplication_activateHandler(event:Event):void {
            if (stage && Device.isDesktop) stage.focus = searchBoard.searchInput.input;
        }

        override protected function deactivate():void {
            toolbar.removeEventListener(ToolActionEvent.SELECTED, actionSelectedHandler);
            actionMenu.removeEventListener(ToolActionEvent.SELECTED, actionSelectedHandler);

            vm.viewDeactivated();
            NativeApplication.nativeApplication.removeEventListener(Event.ACTIVATE, nativeApplication_activateHandler);
        }

        private function actionSelectedHandler(event:ToolActionEvent):void {
            switch (event.actionID) {
                case(ToolAction.GO_BACK) :
                    vm.goBack();
                    break;
                case(ToolAction.APPLY_INVERT) :
                    renderOptions.inverted = true;
                    invalidateRenderOptions();
                    break;
                case(ToolAction.DENY_INVERT) :
                    renderOptions.inverted = false;
                    invalidateRenderOptions();
                    break;
                case(ToolAction.HIDE_DETAILS) :
                    renderOptions.showDetails = false;
                    invalidateRenderOptions();
                    break;
                case(ToolAction.SHOW_DETAILS) :
                    renderOptions.showDetails = true;
                    invalidateRenderOptions();
                    break;
                case(ToolAction.PAGE_NUM_CHANGED) :
                    search();
                    break;
            }
        }

        private function invalidateRenderOptions():void {
            if (isActive && noteList) noteList.invalidateRenderView();
        }

        private function startSearchActivatedHandler(event:Event):void {
            vm.page.countAllNotes = true;
            vm.page.number = 0;
            search();
        }

        private function pageNumChanged():void {
            search();
        }

        private function search():void {
            var searchText:String = searchBoard.searchInput.text;
            if (searchText.length >= 1) {
                renderOptions.searchText = searchText.replace(/\+/g, "").toLowerCase();
                vm.loadPage(searchBoard.searchInput.text, searchBoard.examplesBox.selected, searchBoard.wordBox.selected, searchBoard.verbBox.selected, searchBoard.lessonBox.selected);
            }
        }

        private function noteList_selectedItemChangeHandler(event:Event):void {
            if (!isActive || !noteList.selectedItem) return;
            vm.showNote(noteList.selectedIndex);
        }
        ]]></fx:Script>

    <components:SearchBoard id="searchBoard"
                            isTemplatesEnabled="{vm.appModel.lang.id == LanguageID.DE}"
                            maxWidth="{Values.PT768}" horizontalCenter="0"
                            left="{Values.PT15}" right="{Values.PT15}"
                            startSearch="startSearchActivatedHandler(event)"/>

    <scroller:CustomScroller width="100%" maxWidth="{Values.PT798}" horizontalCenter="0"
                             top="{searchBoard.height}" bottom="0"
                             horizontalScrollPolicy="off"
                             hasFocusableChildren="false">
        <note:NoteList id="noteList"
                       width="100%"
                       dataProvider="{vm.page.coll}"
                       contentBackgroundAlpha="0"
                       deselectEnabled="true"
                       itemRenderer="de.dittner.testmyself.ui.view.noteList.components.NoteRenderer"
                       selectedItemChange="noteList_selectedItemChangeHandler(event)">
            <note:layout>
                <s:VerticalLayout gap="0" useVirtualLayout="false"/>
            </note:layout>
        </note:NoteList>
    </scroller:CustomScroller>

    <s:BitmapImage width="{Values.PT768}" height="{Values.PT7}"
                   horizontalCenter="0"
                   top="{searchBoard.height}"
                   smooth="true"
                   alpha=".75"
                   source="@Embed(source='/assets/shadow.png')"/>

</view:SmartView>