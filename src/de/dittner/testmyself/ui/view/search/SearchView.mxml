<?xml version="1.0"?>
<view:SmartView xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:core="de.dittner.testmyself.ui.common.view.*"
                xmlns:components="de.dittner.testmyself.ui.view.search.components.*"
                xmlns:view="de.dittner.testmyself.ui.common.view.*"
                xmlns:note="de.dittner.testmyself.ui.common.note.*"
                currentState="inactive"
                horizontalCenter="0">

    <fx:Script><![CDATA[
        import de.dittner.async.IAsyncOperation;
        import de.dittner.testmyself.model.Device;
        import de.dittner.testmyself.model.domain.language.LanguageID;
        import de.dittner.testmyself.ui.common.menu.ToolAction;
        import de.dittner.testmyself.ui.common.menu.ToolActionEvent;
        import de.dittner.testmyself.ui.common.view.ViewModelFactory;
        import de.dittner.testmyself.ui.view.noteList.components.form.FormOperationResult;
        import de.dittner.testmyself.utils.Values;

        [Bindable]
        public var vm:SearchVM;

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        override protected function activating():void {
            vm = ViewModelFactory.instance.searchVM;
            vm.lockView();

            toolbar.show();
            toolbar.revert();
            actionMenu.hide();
        }

        override protected function activate():void {
            setCurrentState("active");
            noteContent.activate(toolbar, actionMenu);

            toolbar.showDetailsBtn.enabled = true;
            toolbar.transInvertBtn.enabled = true;
            toolbar.showDetailsBtn.selected = true;

            toolbar.addEventListener(ToolActionEvent.SELECTED, toolActionSelectedHandler);
            vm.unlockView();
            vm.viewActivated(viewID);
            searchBoard.updateSearchInput();
            NativeApplication.nativeApplication.addEventListener(Event.ACTIVATE, nativeApplication_activateHandler);
        }

        private function nativeApplication_activateHandler(event:Event):void {
            if (stage && Device.isDesktop) stage.focus = searchBoard.searchInput.input;
        }

        override protected function deactivate():void {
            toolbar.removeEventListener(ToolActionEvent.SELECTED, toolActionSelectedHandler);
            vm.viewDeactivated();
            noteContent.deactivate();
            setCurrentState("inactive");
            NativeApplication.nativeApplication.removeEventListener(Event.ACTIVATE, nativeApplication_activateHandler);
        }

        private var needSelectFirstNote:Boolean = false;
        private var needSelectLastNote:Boolean = false;
        private function toolActionSelectedHandler(event:ToolActionEvent):void {
            var op:IAsyncOperation;
            switch (event.actionID) {
                case(ToolAction.GO_BACK) :
                    if (noteContent.visible && noteContent.isNoteCardShown) {
                        noteContent.hideNoteCard();
                        toolbar.goBackBtn.enabled = false;
                        searchBoard.updateSearchInput();
                    }
                    break;
                case(ToolAction.EDIT_NOTE) :
                    form.visible = true;
                    op = form.edit(noteContent.selectedNote);
                    op.addCompleteCallback(noteEditComplete);
                    break;
                case(ToolAction.REMOVE_NOTE) :
                    form.visible = true;
                    op = form.remove(noteContent.selectedNote);
                    op.addCompleteCallback(noteRemovedComplete);
                    break;
            }
        }

        private function noteRemovedComplete(op:IAsyncOperation):void {
            if (op.isSuccess && op.result == FormOperationResult.OK) {
                vm.page.allNotesAmount--;
                noteContent.hideNoteCard();
                search();
            }

            searchBoard.updateSearchInput();
            form.visible = false;
        }

        private function noteEditComplete(op:IAsyncOperation):void {
            if (op.isSuccess && op.result == FormOperationResult.OK) {
                vm.page.countAllNotes = true;
                noteContent.hideNoteCard();
                toolbar.goBackBtn.enabled = false;
                search();
            }
            else {
                noteContent.updateSelectedItem();
            }
            searchBoard.updateSearchInput();
            form.visible = false;
        }

        private function startSearchActivatedHandler(event:Event):void {
            vm.page.countAllNotes = true;
            vm.page.number = 0;
            search();
        }

        private function pageNumChanged():void {
            search();
        }

        private function search():void {
            var searchText:String = searchBoard.searchInput.text;
            if (searchText.length >= 1) {
                noteContent.searchText = searchText;
                vm.loadPage(searchText, searchBoard.examplesBox.selected, searchBoard.wordBox.selected, searchBoard.verbBox.selected, searchBoard.lessonBox.selected);
            }
        }

        private function noteList_selectedItemChangeHandler(event:Event):void {
            toolbar.editNoteBtn.enabled = noteContent.selectedNote != null;
            toolbar.removeNoteBtn.enabled = noteContent.selectedNote != null;
        }
        ]]></fx:Script>

    <core:states>
        <s:State name="disabled"/>
        <s:State name="inactive"/>
        <s:State name="active"/>
    </core:states>

    <components:SearchBoard id="searchBoard"
                            visible="{!noteContent.isNoteCardShown}"
                            isTemplatesEnabled="{vm.appModel.selectedLanguage.id == LanguageID.DE}"
                            width="100%"
                            startSearch="startSearchActivatedHandler(event)"/>

    <note:NoteContent id="noteContent"
                      width="{width}"
                      top="{noteContent.isNoteCardShown ? 0 : searchBoard.height}" bottom="0"
                      selectedItem="@{vm.selectedNote}"
                      dataProvider="{vm.page.coll}"
                      page="{vm.page}"
                      selectedItemChange="noteList_selectedItemChangeHandler(event)"
                      pageNumChanged="pageNumChanged()"/>

    <s:BitmapImage width="100%" height="{Values.PT7}"
                   top="{searchBoard.height}"
                   smooth="true"
                   alpha=".75"
                   visible="{!noteContent.isNoteCardShown}"
                   source="@Embed(source='/assets/shadow.png')"/>

</view:SmartView>