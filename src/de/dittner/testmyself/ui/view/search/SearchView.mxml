<?xml version="1.0"?>
<view:SmartView xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:core="de.dittner.testmyself.ui.common.view.*"
                xmlns:mp3="de.dittner.testmyself.ui.common.audio.mp3.*"
                xmlns:navigation="de.dittner.testmyself.ui.view.noteList.components.pagination.*"
                xmlns:utils="de.dittner.testmyself.ui.common.utils.*"
                xmlns:list2="de.dittner.testmyself.ui.common.list.*"
                xmlns:button="de.dittner.testmyself.ui.common.button.*"
                xmlns:form="de.dittner.testmyself.ui.view.noteList.components.form.*"
                xmlns:common="de.dittner.testmyself.ui.view.noteList.components.*"
                xmlns:components="de.dittner.testmyself.ui.view.search.components.*"
                currentState="inactive"
                horizontalCenter="0"
                xmlns:view="de.dittner.testmyself.ui.common.view.*">

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.Device;
        import de.dittner.testmyself.model.domain.audioComment.AudioComment;
        import de.dittner.testmyself.model.domain.note.INote;
        import de.dittner.testmyself.model.domain.note.Note;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.ui.common.utils.FontName;
        import de.dittner.testmyself.ui.common.view.ViewModelFactory;

        [Bindable]
        public var vm:SearchVM;

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        override protected function activate():void {
            setCurrentState("active");
            vm = ViewModelFactory.instance.searchVM;
            vm.viewActivated(info);
            searchBoard.updateSearchInput();
            NativeApplication.nativeApplication.addEventListener(Event.ACTIVATE, nativeApplication_activateHandler);
            searchBoard.applyBtn.addEventListener(MouseEvent.CLICK, applyBtnClickHandler);
        }

        private function nativeApplication_activateHandler(event:Event):void {
            if (stage && Device.isDesktop) stage.focus = searchBoard.searchInput;
        }

        override protected function deactivate():void {
            vm.viewDeactivated();
            mp3Player.visible = false;
            setCurrentState("inactive");
            NativeApplication.nativeApplication.removeEventListener(Event.ACTIVATE, nativeApplication_activateHandler);
            searchBoard.applyBtn.removeEventListener(MouseEvent.CLICK, applyBtnClickHandler);
        }

        override protected function updateDisplayList(w:Number, h:Number):void {
            super.updateDisplayList(w, h);
            if (form) {
                form.width = Math.min(w, AppSizes.EDITOR_MAX_WIDTH);
                form.x = w - form.width;
            }
        }

        private function editSelectedNote():void {
            form.visible = true;
            form.edit(list.selectedItem as Note);
        }

        private function removeSelectedNote():void {
            form.visible = true;
            form.remove(list.selectedItem as Note);
        }

        private function getAudioComment(selectedNote:INote, selectedExample:INote):AudioComment {
            if (hasAudioComment(selectedExample)) return selectedExample.audioComment;
            else if (hasAudioComment(selectedNote)) return selectedNote.audioComment;
            else return null;
        }

        private function hasAudioComment(note:INote):Boolean {
            return note && note.audioComment.bytes;
        }

        private function applyBtnClickHandler(event:MouseEvent):void {
            search();
        }

        private function pageNumChanged():void {
            search();
        }

        private function search():void {
            var searchText:String = searchBoard.searchInput.text;
            if (searchText.length >= 1) {
                vm.loadPage(searchText, searchBoard.examplesBox.selected, searchBoard.wordBox.selected, searchBoard.verbBox.selected, searchBoard.lessonBox.selected);
            }
        }
        ]]></fx:Script>

    <core:states>
        <s:State name="disabled"/>
        <s:State name="inactive"/>
        <s:State name="active"/>
    </core:states>

    <!--content bg-->
    <s:Rect width="100%" height="100%">
        <s:fill>
            <s:BitmapFill source="@Embed(source='/assets/screen/screen_bg_pattern.png')"
                          fillMode="repeat"/>
        </s:fill>
    </s:Rect>

    <utils:BG excludeFrom="inactive" width="100%" height="100%" color="#ffFFff"/>

    <!--header bg-->
    <s:Rect width="100%" height="{HEADER_HEI}">
        <s:fill>
            <s:SolidColor color="{AppColors.SCREEN_HEADER_BG}"/>
        </s:fill>
    </s:Rect>

    <s:Label text="{info.title}"
             fontFamily="{FontName.MYRIAD}"
             fontSize="18"
             width="100%" height="{HEADER_HEI}"
             verticalAlign="middle"
             paddingLeft="{PADDING}" paddingRight="{PADDING}"
             color="#54545d"/>

    <button:ToolButton id="removeBtn"
                       enabled="{list.selectedItem}"
                       top="8" right="{editBtn.width}"
                       description="Die Notiz entfernen"
                       image="@Embed(source='/assets/tools/recycle_bin.png')"
                       click="removeSelectedNote()"/>

    <button:ToolButton id="editBtn"
                       top="8" right="0"
                       enabled="{list.selectedItem}"
                       description="Die Notiz bearbeiten"
                       image="@Embed(source='/assets/tools/edit.png')"
                       click="editSelectedNote()"/>

    <components:SearchBoard id="searchBoard"
                            width="100%"
                            top="{HEADER_HEI}"/>

    <s:HGroup left="-1" right="-1" top="{HEADER_HEI - 1 + searchBoard.height}" bottom="{FOOTER_HEI}" gap="-1">
        <s:Scroller width="100%" height="100%"
                    excludeFrom="inactive"
                    minViewportInset="1"
                    horizontalScrollPolicy="off"
                    hasFocusableChildren="false">
            <list2:SelectableDataGroup id="list"
                                       width="100%"
                                       contentBackgroundAlpha="0"
                                       deselectEnabled="true"
                                       itemRenderer="de.dittner.testmyself.ui.view.search.components.FoundNoteRenderer">
                <list2:layout>
                    <s:VerticalLayout gap="0" useVirtualLayout="true"/>
                </list2:layout>
            </list2:SelectableDataGroup>
        </s:Scroller>

        <common:ExampleList id="exampleList"
                            width="100%" height="100%"
                            dataProvider="{list.selectedItem.examples}"
                            excludeFrom="inactive"
                            showTitle="false"
                            hasFocusableChildren="false"/>
    </s:HGroup>

    <s:BitmapImage width="100%"
                   top="{HEADER_HEI + searchBoard.height}"
                   smooth="true"
                   alpha=".75"
                   source="@Embed(source='/assets/shadow.png', scaleGridLeft='5', scaleGridRight='6', scaleGridTop='3', scaleGridBottom='4')"/>

    <!--footer-->
    <s:Group width="100%" height="{FOOTER_HEI}" bottom="0"
             excludeFrom="inactive">
        <s:Rect width="100%" bottom="0" height="100%">
            <s:fill>
                <s:SolidColor color="{AppColors.SCREEN_HEADER_BG}"/>
            </s:fill>
        </s:Rect>

        <mp3:MP3Player id="mp3Player"
                       comment="{getAudioComment(list.selectedItem as INote, exampleList.dataGroup.selectedItem as INote)}"
                       width="400"
                       left="{PADDING - 10}"
                       verticalCenter="0"
                       removeRecordEnabled="false"
                       visible="false"
                       skinClass="de.dittner.testmyself.ui.common.audio.skins.MP3PlayerSkin"/>

        <navigation:PaginationBar id="paginationBar"
                                  left="{PADDING}" right="{PADDING}"
                                  height="100%"
                                  allNotesAmount="{vm.allNotesAmount}"
                                  notesOnCurPage="{vm.noteColl.length}"
                                  pageSize="{vm.pageSize}"
                                  pageNum="@{vm.pageNum}"
                                  pageNumChanged="pageNumChanged()"/>

    </s:Group>

    <s:Group width="100%" height="100%"
             excludeFrom="inactive"
             visible="{form.visible}"
             mouseEnabled="{form.visible}">
        <s:Rect width="100%" height="100%">
            <s:fill>
                <s:SolidColor color="{AppColors.EDITOR_SHADOW}" alpha=".5"/>
            </s:fill>
        </s:Rect>

        <form:NoteForm id="form"
                       visible="false"
                       bottom="0"
                       top="{HEADER_HEI}"/>
    </s:Group>

    <s:BitmapImage width="100%"
                   top="{HEADER_HEI}"
                   smooth="true"
                   source="@Embed(source='/assets/shadow.png', scaleGridLeft='5', scaleGridRight='6', scaleGridTop='3', scaleGridBottom='4')"/>

</view:SmartView>
