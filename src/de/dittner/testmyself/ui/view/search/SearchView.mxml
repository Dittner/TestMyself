<?xml version="1.0"?>
<view:SmartView xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:core="de.dittner.testmyself.ui.common.view.*"
                xmlns:mp3="de.dittner.testmyself.ui.common.audio.mp3.*"
                xmlns:navigation="de.dittner.testmyself.ui.view.noteList.components.pagination.*"
                xmlns:utils="de.dittner.testmyself.ui.common.utils.*"
                xmlns:common="de.dittner.testmyself.ui.view.noteList.components.*"
                xmlns:components="de.dittner.testmyself.ui.view.search.components.*"
                currentState="inactive"
                horizontalCenter="0"
                xmlns:view="de.dittner.testmyself.ui.common.view.*">

    <fx:Script><![CDATA[
        import de.dittner.async.IAsyncOperation;
        import de.dittner.testmyself.model.Device;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.ui.common.view.ViewModelFactory;
        import de.dittner.testmyself.ui.view.noteList.components.form.FormOperationResult;
        import de.dittner.testmyself.ui.view.noteList.components.toolbar.ToolAction;
        import de.dittner.testmyself.ui.view.noteList.components.toolbar.ToolbarEvent;

        [Bindable]
        public var vm:SearchVM;

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        override protected function activating():void {
            vm = ViewModelFactory.instance.searchVM;
            vm.lockView();

            toolbar.visible = toolbar.includeInLayout = true;
            toolbar.disabledAll();
        }

        override protected function activate():void {
            toolbar.addEventListener(ToolbarEvent.SELECTED, toolActionSelectedHandler);
            vm.unlockView();
            setCurrentState("active");
            vm.viewActivated(viewID);
            searchBoard.updateSearchInput();
            NativeApplication.nativeApplication.addEventListener(Event.ACTIVATE, nativeApplication_activateHandler);
        }

        private function nativeApplication_activateHandler(event:Event):void {
            if (stage && Device.isDesktop) stage.focus = searchBoard.searchInput;
        }

        override protected function deactivate():void {
            toolbar.removeEventListener(ToolbarEvent.SELECTED, toolActionSelectedHandler);
            vm.viewDeactivated();
            mp3Player.visible = false;
            setCurrentState("inactive");
            NativeApplication.nativeApplication.removeEventListener(Event.ACTIVATE, nativeApplication_activateHandler);
        }

        private function toolActionSelectedHandler(event:ToolbarEvent):void {
            var op:IAsyncOperation;
            switch (event.toolAction) {
                case(ToolAction.EDIT_NOTE) :
                    form.visible = true;
                    op = form.edit(noteList.selectedNote);
                    op.addCompleteCallback(noteEditComplete);
                    break;
                case(ToolAction.REMOVE_NOTE) :
                    form.visible = true;
                    op = form.remove(noteList.selectedNote);
                    op.addCompleteCallback(noteRemovedComplete);
                    break;
            }
        }

        private function noteRemovedComplete(op:IAsyncOperation):void {
            if (op.isSuccess && op.result == FormOperationResult.OK) {
                vm.page.allNotesAmount--;
                search();
            }
            searchBoard.updateSearchInput();
            form.visible = false;
        }

        private function noteEditComplete(op:IAsyncOperation):void {
            if (op.isSuccess && op.result == FormOperationResult.OK) {
                vm.page.countAllNotes = true;
                search();
            }
            searchBoard.updateSearchInput();
            form.visible = false;
        }

        private function startSearchActivatedHandler(event:Event):void {
            vm.page.countAllNotes = true;
            vm.page.number = 0;
            search();
        }

        private function pageNumChanged():void {
            search();
        }

        private function search():void {
            var searchText:String = searchBoard.searchInput.text;
            if (searchText.length >= 1) {
                vm.loadPage(searchText, searchBoard.examplesBox.selected, searchBoard.wordBox.selected, searchBoard.verbBox.selected, searchBoard.lessonBox.selected);
            }
        }

        private function noteList_selectedItemChangeHandler(event:Event):void {
            toolbar.editNoteBtn.enabled = noteList.selectedNote;
            toolbar.removeNoteBtn.enabled = noteList.selectedNote;
        }
        ]]></fx:Script>

    <core:states>
        <s:State name="disabled"/>
        <s:State name="inactive"/>
        <s:State name="active"/>
    </core:states>

    <!--content bg-->
    <s:Rect width="100%" height="100%">
        <s:fill>
            <s:BitmapFill source="@Embed(source='/assets/menu/screen_bg_pattern.png')"
                          fillMode="repeat"/>
        </s:fill>
    </s:Rect>

    <utils:BG excludeFrom="inactive" width="100%" height="100%" color="#ffFFff"/>

    <components:SearchBoard id="searchBoard"
                            width="100%"
                            top="0"
                            startSearch="startSearchActivatedHandler(event)"/>

    <s:HGroup left="-1" right="-1" top="{searchBoard.height}" bottom="{FOOTER_HEI}" gap="-1">
        <s:Scroller width="100%" height="100%"
                    excludeFrom="inactive"
                    minViewportInset="1"
                    horizontalScrollPolicy="off"
                    hasFocusableChildren="false">
            <common:NoteList id="noteList"
                             selectedNote="@{vm.selectedNote}"
                             dataProvider="{vm.page.noteColl}"
                             width="100%"
                             contentBackgroundAlpha="0"
                             deselectEnabled="true"
                             itemRenderer="de.dittner.testmyself.ui.view.search.components.FoundNoteRenderer"
                             selectedItemChange="noteList_selectedItemChangeHandler(event)">
                <common:layout>
                    <s:VerticalLayout gap="0" useVirtualLayout="true"/>
                </common:layout>
            </common:NoteList>
        </s:Scroller>

        <common:ExampleList id="exampleList"
                            width="100%" height="100%"
                            selectedNote="@{vm.selectedExample}"
                            dataProvider="{noteList.selectedItem.exampleColl}"
                            excludeFrom="inactive"
                            showTitle="false"
                            hasFocusableChildren="false"/>
    </s:HGroup>

    <s:BitmapImage width="100%"
                   top="{searchBoard.height}"
                   smooth="true"
                   alpha=".75"
                   source="@Embed(source='/assets/shadow.png', scaleGridLeft='5', scaleGridRight='6', scaleGridTop='3', scaleGridBottom='4')"/>

    <!--footer-->
    <s:Group width="100%" height="{FOOTER_HEI}" bottom="0"
             excludeFrom="inactive">
        <s:Rect width="100%" bottom="0" height="100%">
            <s:fill>
                <s:SolidColor color="{AppColors.SCREEN_HEADER_BG}"/>
            </s:fill>
        </s:Rect>

        <mp3:MP3Player id="mp3Player"
                       comment="{vm.audioComment}"
                       width="400"
                       left="{PADDING - 10}"
                       verticalCenter="0"
                       removeRecordEnabled="false"
                       visible="{mp3Player.hasComment}"
                       skinClass="de.dittner.testmyself.ui.common.audio.skins.MP3PlayerSkin"/>

        <navigation:PaginationBar id="paginationBar"
                                  left="{PADDING + AppSizes.MENU_WID}" right="{PADDING}"
                                  height="100%"
                                  allNotesAmount="{vm.page.allNotesAmount}"
                                  notesOnCurPage="{vm.page.noteColl.length}"
                                  pageSize="{vm.page.size}"
                                  pageNum="@{vm.page.number}"
                                  pageNumChanged="pageNumChanged()"/>
        <s:Label id="titleLbl"
                 text="{vm.viewTitle}"
                 right="10" textAlign="right"
                 fontSize="14" verticalCenter="0"
                 maxDisplayedLines="1"
                 color="{AppColors.TEXT_DARK}"/>
    </s:Group>

</view:SmartView>
