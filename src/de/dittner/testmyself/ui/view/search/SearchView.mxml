<?xml version="1.0"?>
<view:SmartView xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:core="de.dittner.testmyself.ui.common.view.*"
                xmlns:navigation="de.dittner.testmyself.ui.view.noteList.components.pagination.*"
                xmlns:utils="de.dittner.testmyself.ui.common.utils.*"
                xmlns:common="de.dittner.testmyself.ui.view.noteList.components.*"
                xmlns:components="de.dittner.testmyself.ui.view.search.components.*"
                xmlns:view="de.dittner.testmyself.ui.common.view.*"
                xmlns:mp3="de.dittner.testmyself.ui.common.audio.mp3.*"
                currentState="inactive"
                horizontalCenter="0">

    <fx:Script><![CDATA[
        import de.dittner.async.IAsyncOperation;
        import de.dittner.testmyself.model.Device;
        import de.dittner.testmyself.model.domain.note.Note;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.ui.common.view.ViewModelFactory;
        import de.dittner.testmyself.ui.view.noteList.components.PageLayout;
        import de.dittner.testmyself.ui.view.noteList.components.form.FormOperationResult;
        import de.dittner.testmyself.ui.view.noteList.components.toolbar.ToolAction;
        import de.dittner.testmyself.ui.view.noteList.components.toolbar.ToolbarEvent;

        import mx.collections.ArrayCollection;

        [Bindable]
        public var vm:SearchVM;

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        override protected function activating():void {
            vm = ViewModelFactory.instance.searchVM;
            vm.lockView();

            toolbar.visible = toolbar.includeInLayout = true;
            toolbar.revert();
        }

        override protected function activate():void {
            setCurrentState("active");
            toolbar.hideDetailsBtn.enabled = true;
            toolbar.transInvertBtn.enabled = true;
            noteList.pageLayout = pageLayoutInfo;
            toolbar.addEventListener(ToolbarEvent.SELECTED, toolActionSelectedHandler);
            vm.unlockView();
            vm.viewActivated(viewID);
            searchBoard.updateSearchInput();
            if (stage && Device.isDesktop) stage.focus = searchBoard.searchInput.input;
            NativeApplication.nativeApplication.addEventListener(Event.ACTIVATE, nativeApplication_activateHandler);
        }

        private function nativeApplication_activateHandler(event:Event):void {
            if (stage && Device.isDesktop) stage.focus = searchBoard.searchInput.input;
        }

        override protected function deactivate():void {
            toolbar.removeEventListener(ToolbarEvent.SELECTED, toolActionSelectedHandler);
            vm.viewDeactivated();
            setCurrentState("inactive");
            NativeApplication.nativeApplication.removeEventListener(Event.ACTIVATE, nativeApplication_activateHandler);
        }

        private var pageLayoutInfo:PageLayout = new PageLayout();
        private function toolActionSelectedHandler(event:ToolbarEvent):void {
            var op:IAsyncOperation;
            switch (event.toolAction) {
                case(ToolAction.EDIT_NOTE) :
                    form.visible = true;
                    op = form.edit(noteList.selectedNote);
                    op.addCompleteCallback(noteEditComplete);
                    break;
                case(ToolAction.REMOVE_NOTE) :
                    form.visible = true;
                    op = form.remove(noteList.selectedNote);
                    op.addCompleteCallback(noteRemovedComplete);
                    break;
                case(ToolAction.INVERT) :
                    pageLayoutInfo.inverted = !pageLayoutInfo.inverted;
                    noteList.invalidatePageLayout();
                    break;
                case(ToolAction.HIDE_DETAILS) :
                    pageLayoutInfo.showDetails = false;
                    noteList.invalidatePageLayout();
                    break;
                case(ToolAction.SHOW_DETAILS) :
                    pageLayoutInfo.showDetails = true;
                    noteList.invalidatePageLayout();
                    break;
                case(ToolAction.PLAY_AUDIO) :
                    if (vm.selectedNote && vm.selectedNote.hasAudio)
                        vm.selectedNote.loadAndPlayAudioComment();
                    break;
            }
        }

        private function noteRemovedComplete(op:IAsyncOperation):void {
            if (op.isSuccess && op.result == FormOperationResult.OK) {
                vm.page.allNotesAmount--;
                search();
            }
            searchBoard.updateSearchInput();
            form.visible = false;
        }

        private function noteEditComplete(op:IAsyncOperation):void {
            if (op.isSuccess && op.result == FormOperationResult.OK) {
                vm.page.countAllNotes = true;
                search();
            }
            searchBoard.updateSearchInput();
            form.visible = false;
        }

        private function startSearchActivatedHandler(event:Event):void {
            vm.page.countAllNotes = true;
            vm.page.number = 0;
            search();
        }

        private function pageNumChanged():void {
            search();
        }

        private function search():void {
            var searchText:String = searchBoard.searchInput.text;
            if (searchText.length >= 1) {
                vm.loadPage(searchText, searchBoard.examplesBox.selected, searchBoard.wordBox.selected, searchBoard.verbBox.selected, searchBoard.lessonBox.selected);
            }
        }

        private function noteList_selectedItemChangeHandler(event:Event):void {
            toolbar.editNoteBtn.enabled = noteList.selectedNote;
            toolbar.removeNoteBtn.enabled = noteList.selectedNote;
            toolbar.playCommentBtn.enabled = noteList.selectedNote && noteList.selectedNote.hasAudio;
        }

        private function examplesListEnabled(selectedNote:Note, noteExampleColl:ArrayCollection):Boolean {
            return selectedNote && noteExampleColl && noteExampleColl.length > 0
        }
        ]]></fx:Script>

    <core:states>
        <s:State name="disabled"/>
        <s:State name="inactive"/>
        <s:State name="active"/>
    </core:states>

    <utils:BG width="100%" height="100%" color="{AppColors.BG}"/>

    <components:SearchBoard id="searchBoard"
                            width="100%"
                            startSearch="startSearchActivatedHandler(event)"/>

    <s:Scroller left="0" percentWidth="{exampleList.visible ? 50 : 100}"
                top="{searchBoard.height}" bottom="{AppSizes.SCREEN_FOOTER_HEIGHT}"
                excludeFrom="inactive"
                horizontalScrollPolicy="off"
                hasFocusableChildren="false">
        <common:NoteList id="noteList"
                         selectedNote="@{vm.selectedNote}"
                         dataProvider="{vm.page.noteColl}"
                         width="100%"
                         contentBackgroundAlpha="0"
                         deselectEnabled="true"
                         selectFirstItemByDefault="{vm.page.number == 0}"
                         itemRenderer="de.dittner.testmyself.ui.view.search.components.FoundNoteRenderer"
                         selectedItemChange="noteList_selectedItemChangeHandler(event)">
            <common:layout>
                <s:VerticalLayout gap="0" useVirtualLayout="false"/>
            </common:layout>
        </common:NoteList>
    </s:Scroller>

    <common:ExampleList id="exampleList"
                        width="50%" top="{searchBoard.height}" bottom="{AppSizes.SCREEN_FOOTER_HEIGHT}"
                        right="0"
                        visible="{examplesListEnabled(vm.selectedNote, vm.selectedNote.exampleColl)}"
                        selectedNote="@{vm.selectedExample}"
                        dataProvider="{noteList.selectedItem.exampleColl}"
                        excludeFrom="inactive"
                        showTitle="false"
                        hasFocusableChildren="false"/>

    <s:BitmapImage width="100%"
                   top="{searchBoard.height}"
                   smooth="true"
                   alpha=".75"
                   source="@Embed(source='/assets/shadow.png', scaleGridLeft='5', scaleGridRight='6', scaleGridTop='3', scaleGridBottom='4')"/>

    <!--footer-->
    <utils:BG width="100%" height="{AppSizes.SCREEN_FOOTER_HEIGHT}" bottom="0" color="{AppColors.SCREEN_FOOTER_BG}"/>

    <s:HGroup excludeFrom="inactive"
              verticalAlign="middle"
              width="100%" height="{AppSizes.SCREEN_FOOTER_HEIGHT}" bottom="0">
        <mp3:MP3PlayerComponent id="mp3"
                                visible="{mp3.isPlaying || mp3.isPaused}"
                                width="50%"/>

        <navigation:PaginationBar id="paginationBar"
                                  allNotesAmount="{vm.page.allNotesAmount}"
                                  notesOnCurPage="{vm.page.noteColl.length}"
                                  pageSize="{vm.page.size}"
                                  pageNum="@{vm.page.number}"
                                  height="100%"
                                  pageNumChanged="pageNumChanged()"/>
        <s:Label id="tagsLbl"
                 text="{vm.selectedNoteTags}"
                 height="100%" width="50%" textAlign="right" paddingRight="10"
                 fontSize="14" verticalAlign="middle" paddingTop="1"
                 maxDisplayedLines="1"
                 color="{AppColors.TEXT_BLACK}"/>
    </s:HGroup>
</view:SmartView>