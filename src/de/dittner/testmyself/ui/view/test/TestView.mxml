<?xml version="1.0"?>
<view:SmartView xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:core="de.dittner.testmyself.ui.common.view.*"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:testlist="de.dittner.testmyself.ui.view.test.testList.*"
                xmlns:presets="de.dittner.testmyself.ui.view.test.presets.*"
                xmlns:results="de.dittner.testmyself.ui.view.test.statistics.*"
                xmlns:testing="de.dittner.testmyself.ui.view.test.testing.*"
                currentState="inactive"
                xmlns:view="de.dittner.testmyself.ui.common.view.*">

    <fx:Script><![CDATA[
        import de.dittner.async.IAsyncOperation;
        import de.dittner.testmyself.model.domain.note.Note;
        import de.dittner.testmyself.ui.common.view.ViewModelFactory;
        import de.dittner.testmyself.ui.view.noteList.components.form.FormOperationResult;
        import de.dittner.testmyself.ui.view.noteList.components.toolbar.ToolAction;
        import de.dittner.testmyself.ui.view.noteList.components.toolbar.ToolbarEvent;

        [Bindable]
        public var vm:TestVM;

        override protected function activating():void {
            vm = ViewModelFactory.instance.testVM;
            vm.lockView();
            toolbar.visible = toolbar.includeInLayout = false;
            toolbar.revert();
        }

        override protected function activate():void {
            vm.unlockView();
            vm.viewActivated(viewID);
            showTestList();
            toolbar.addEventListener(ToolbarEvent.SELECTED, toolActionSelectedHandler);
        }

        override protected function deactivate():void {
            toolbar.removeEventListener(ToolbarEvent.SELECTED, toolActionSelectedHandler);
            setCurrentState("inactive");
            vm.viewDeactivated();
        }

        private function showTestList():void {
            vm.selectedTestTask = null;
            setCurrentState("testList");
            toolbar.visible = toolbar.includeInLayout = false;
        }

        private function showTestPresets():void {
            vm.selectedTestTask = null;
            setCurrentState("presets");
            toolbar.visible = toolbar.includeInLayout = true;
            toolbar.revert();
            toolbar.goBackBtn.enabled = true;
        }

        private function showStatistics():void {
            vm.selectedTestTask = null;
            statisticsScreen.activate();
            setCurrentState("statistics");
            toolbar.visible = toolbar.includeInLayout = true;
            toolbar.revert();
            toolbar.goBackBtn.enabled = true;
            toolbar.showFailedTasksBtn.enabled = true;
            toolbar.showFailedTasksBtn.selected = vm.testPage.loadOnlyFailedTestTask;
        }

        private function startTesting():void {
            vm.selectedTestTask = null;
            testingScreen.activate(menu);
            setCurrentState("testing");
            toolbar.visible = toolbar.includeInLayout = true;
            toolbar.revert();
            toolbar.goBackBtn.enabled = true;
        }

        private function toolActionSelectedHandler(event:ToolbarEvent):void {
            var op:IAsyncOperation;
            switch (event.toolAction) {
                case(ToolAction.GO_BACK) :
                    if (currentState == "presets") {
                        showTestList();
                    }
                    else if (currentState == "statistics") {
                        showTestPresets();
                    }
                    else if (currentState == "testing") {
                        testingScreen.deactivate();
                        showTestPresets();
                    }
                    break;
                case(ToolAction.EDIT_NOTE) :
                    form.visible = true;
                    op = form.edit(vm.selectedTestTask.note);
                    op.addCompleteCallback(noteEditOperationComplete);
                    break;
                case(ToolAction.REMOVE_NOTE) :
                    form.visible = true;
                    op = form.remove(vm.selectedTestTask.note);
                    op.addCompleteCallback(noteRemoveOperationComplete);
                    break;
                case(ToolAction.SHOW_FAILED_TASK) :
                    updateTestTaskList(true);
                    break;
                case(ToolAction.SHOW_ALL_TASK) :
                    updateTestTaskList(false);
                    break;
                case(ToolAction.SET_TASK_AS_RIGHT) :
                    if (vm.selectedTestTask && vm.selectedTestTask.isFailed) {
                        vm.selectedTestTask.isFailed = false;
                        vm.selectedTestTask.store();
                        vm.loadStatisticsPage();
                    }
                    break;
                case(ToolAction.PLAY_AUDIO) :
                    if (vm.selectedTestTask && vm.selectedTestTask.note.hasAudio)
                        vm.selectedTestTask.note.loadAndPlayAudioComment();
                    break;
            }
        }

        private function noteRemoveOperationComplete(op:IAsyncOperation):void {
            if (op.isSuccess && op.result == FormOperationResult.OK) {
                if (currentState == "statistics") {
                    vm.testPage.amountAllTasks--;
                    vm.loadStatisticsPage();
                }
                else if (currentState == "testing") {
                    vm.loadNextTestTask();
                }
            }
            form.visible = false;
        }

        private function noteEditOperationComplete(op:IAsyncOperation):void {
            if (op.isSuccess && op.result == FormOperationResult.OK) {
                if (currentState == "statistics")
                    vm.loadStatisticsPage();
                else if (currentState == "testing")
                    vm.loadNextTestTask();
            }
            form.visible = false;
        }

        private function updateTestTaskList(showOnlyFailed:Boolean):void {
            if (vm.testPage.loadOnlyFailedTestTask != showOnlyFailed) {
                vm.testPage.loadOnlyFailedTestTask = showOnlyFailed;
                vm.testPage.number = 0;
                vm.testPage.countAllNotes = true;
                vm.loadStatisticsPage();
                toolbar.setTaskAsRightBtn.enabled = vm.selectedTestTask && vm.selectedTestTask.isFailed;
            }
        }

        //--------------------------------------
        //  selectedNote
        //--------------------------------------
        private var _selectedNote:Note;
        [Bindable("selectedNoteChanged")]
        public function get selectedNote():Note {return _selectedNote;}
        public function set selectedNote(value:Note):void {
            if (_selectedNote != value) {
                _selectedNote = value;

                toolbar.editNoteBtn.enabled = selectedNote;
                toolbar.removeNoteBtn.enabled = selectedNote;
                toolbar.setTaskAsRightBtn.enabled = currentState == "statistics" && vm.selectedTestTask && vm.selectedTestTask.isFailed;
                toolbar.playCommentBtn.enabled = vm.selectedTestTask && vm.selectedTestTask.note.hasAudio;

                dispatchEvent(new Event("selectedNoteChanged"));
            }
        }
        ]]></fx:Script>
    <fx:Binding source="vm.selectedTestTask.note" destination="selectedNote"/>

    <core:states>
        <s:State name="inactive"/>
        <s:State name="normal"/>
        <s:State name="testList"/>
        <s:State name="presets"/>
        <s:State name="statistics"/>
        <s:State name="testing"/>
    </core:states>

    <!--content bg-->
    <s:Rect width="100%" height="100%">
        <s:fill>
            <s:BitmapFill source="@Embed(source='/assets/menu/screen_bg_pattern.png')"
                          fillMode="repeat"/>
        </s:fill>
    </s:Rect>

    <s:Group width="100%" top="0" bottom="0"
             excludeFrom="inactive">

        <testlist:TestListScreen id="testListScreen"
                                 vm="{vm}"
                                 width="100%" height="100%"
                                 padding="{PADDING}"
                                 visible="false" visible.testList="true"
                                 testSelected="showTestPresets()"/>

        <presets:TestPresetsScreen id="testPresetsScreen"
                                   vm="{vm}"
                                   width="100%" height="100%"
                                   padding="{PADDING}"
                                   visible="false" visible.presets="true"
                                   showStatistics="showStatistics()"
                                   startTest="startTesting()"/>

        <testing:TestingScreen id="testingScreen"
                               vm="{vm}"
                               width="100%" height="100%"
                               padding="{PADDING}"
                               visible="false" visible.testing="true"/>

        <results:StatisticsScreen id="statisticsScreen"
                                  vm="{vm}"
                                  width="100%" height="100%"
                                  padding="{PADDING}"
                                  visible="false" visible.statistics="true"/>
    </s:Group>

</view:SmartView>
