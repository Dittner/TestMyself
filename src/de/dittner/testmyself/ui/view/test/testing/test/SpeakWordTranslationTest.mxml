<?xml version="1.0"?>
<test:TestableView xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:utils="de.dittner.testmyself.ui.common.utils.*"
                   xmlns:button="de.dittner.testmyself.ui.common.button.*"
                   xmlns:mp3="de.dittner.testmyself.ui.common.audio.mp3.*"
                   xmlns:common="de.dittner.testmyself.ui.view.test.common.*"
                   xmlns:test="de.dittner.testmyself.ui.view.test.testing.test.*" xmlns:common2="de.dittner.testmyself.ui.view.noteList.common.*">

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.domain.note.word.DeWordArticle;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.ui.common.utils.FontName;
        import de.dittner.testmyself.ui.view.test.common.TestingAction;

        //--------------------------------------
        //  word
        //--------------------------------------
        public function get word():IWord {
            return activeNote as IWord;
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        override protected function commitProperties():void {
            super.commitProperties();
            if (activeNoteChanged) {
                activeNoteChanged = false;
                clear();

                if (word) {
                    articleLbl.text = word.article;
                    if (word.article == DeWordArticle.DIE) articleLbl.setStyle("color", AppColors.TEXT_RED);
                    else if (word.article == DeWordArticle.DAS) articleLbl.setStyle("color", AppColors.TEXT_YELLOW);
                    else articleLbl.setStyle("color", AppColors.TEXT_DARK);

                    titleLbl.text = word.article ? " " + word.title : word.title;

                    optionsLbl.text = word.options ? ", " + word.options : "";
                    translateBoard.text = word.description;

                    if (word.audioComment.bytes) {
                        mp3Player.visible = true;
                        mp3Player.comment = word.audioComment;
                    }
                    else {
                        mp3Player.visible = false;
                        mp3Player.comment = null;
                    }
                }
            }
        }

        override protected function clear():void {
            showDetails = false;
            articleLbl.text = "";
            titleLbl.text = "";
            optionsLbl.text = "";
            translateBoard.text = "";
            mp3Player.visible = false;
            mp3Player.comment = null;
        }

        private function optionsEnabled(showDetails:Boolean, options:String):Boolean {
            return showDetails && options;
        }

        private function onCorrectAnswered():void {
            if (actionCallback != null) {
                actionCallback(TestingAction.CORRECT_ANSWER);
                actionCallback(TestingAction.NEXT_TASK);
            }
        }

        private function onIncorrectAnswered():void {
            if (actionCallback != null) {
                errorsNum++;
                actionCallback(TestingAction.INCORRECT_ANSWER);
                actionCallback(TestingAction.NEXT_TASK);
            }
        }
        ]]></fx:Script>

    <common:TestHeader id="header"
                       width="100%" padding="{padding}"
                       title="{title}"
                       description="{durationLbl}"/>

    <s:Group width="100%" top="{header.height}" bottom="0">

        <utils:BG width="100%" height="100%" color="{AppColors.WHITE}"/>

        <s:Label text="{'Anzahl der Fehler: '+errorsNum}"
                 fontFamily="{FontName.MYRIAD}"
                 fontSize="14"
                 opaqueBackground="0"
                 mouseChildren="false" mouseEnabled="false"
                 right="{padding + 8}" top="10"
                 color="{AppColors.TEXT_WHITE}"/>

        <s:VGroup width="100%" top="10" bottom="0"
                  gap="20" horizontalAlign="center">

            <s:Label text="{taskNumber + '/' + totalTask}"
                     fontFamily="{FontName.MYRIAD_COND}"
                     fontWeight="bold" paddingBottom="-20"
                     fontSize="20" textAlign="center"
                     mouseChildren="false" mouseEnabled="false"
                     width="100%"
                     color="{AppColors.TEXT_LIGHT}"/>

            <s:HGroup width="100%" horizontalAlign="center" gap="0">
                <s:Label id="articleLbl"
                         fontFamily="{FontName.MYRIAD_COND}"
                         fontWeight="bold"
                         fontSize="42"/>
                <s:Label id="titleLbl"
                         fontFamily="{FontName.MYRIAD_COND}"
                         fontWeight="bold"
                         color="{AppColors.TEXT_DARK}"
                         fontSize="42"/>
                <s:Label id="optionsLbl"
                         fontFamily="{FontName.MYRIAD_COND}"
                         fontWeight="bold"
                         color="{AppColors.TEXT_DARK}"
                         fontSize="42"
                         visible="{showDetails}"
                         includeInLayout="{optionsEnabled(showDetails, optionsLbl.text)}"/>
            </s:HGroup>

            <test:TextBoard id="translateBoard"
                            questionsIconEnabled="true"
                            width="{width - 2*padding}" height="33%"
                            title="Ãœbersetzung" showText="{showDetails}"/>

            <common2:ExampleList id="exampleList"
                                 dataProvider="{activeNoteExampleColl}"
                                 bgColor="{AppColors.EDITOR_CONTENT_BG}"
                                 width="{width - 2*padding}" height="66%"
                                 shownList="{showDetails}"
                                 hasFocusableChildren="false"/>

            <s:HGroup width="100%"
                      horizontalAlign="center"
                      gap="15">

                <button:BlackButton id="correctAnswerBtn"
                                    width="250"
                                    enabled="{answerEnabled}"
                                    label="Richtig"
                                    click="onCorrectAnswered()"/>

                <button:RedButton id="incorrectAnswerBtn"
                                  width="250"
                                  enabled="{answerEnabled}"
                                  label="Falsch"
                                  click="onIncorrectAnswered()"/>

                <button:YellowButton id="showAnswerBtn"
                                     width="250"
                                     label="Die richtige Antwort zeigen"
                                     click="showDetails = true"/>

            </s:HGroup>

            <s:Group width="100%" bottom="0" height="{AppSizes.EDITOR_FOOTER_HEIGHT}">

                <utils:BG width="100%" height="100%" color="{AppColors.SCREEN_HEADER_BG}"/>

                <mp3:MP3Player id="mp3Player"
                               width="400"
                               left="{padding - 10}"
                               verticalCenter="0"
                               removeRecordEnabled="false"
                               visible="false"
                               skinClass="de.dittner.testmyself.ui.common.audio.skins.MP3PlayerSkin"/>

                <test:RateBoard horizontalCenter="0" verticalCenter="0" complexity="@{complexity}"/>

                <button:GrayButton id="cancelBtn"
                                   width="250"
                                   verticalCenter="0"
                                   right="{padding}"
                                   label="Das Testen beenden"
                                   click="goBack()"/>
            </s:Group>
        </s:VGroup>

    </s:Group>

</test:TestableView>
