<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:test="de.dittner.testmyself.ui.view.test.testing.components.*"
         xmlns:common="de.dittner.testmyself.ui.view.test.common.*"
         xmlns:utils="de.dittner.testmyself.ui.common.utils.*"
         xmlns:button="de.dittner.testmyself.ui.common.button.*"
         xmlns:mp3="de.dittner.testmyself.ui.common.audio.mp3.*"
         currentState="normal">
    <fx:Metadata>
        [Event(name="goBack", type="flash.events.Event")]
    </fx:Metadata>
    <fx:Script><![CDATA[
        import de.dittner.async.IAsyncOperation;
        import de.dittner.testmyself.model.domain.test.Test;
        import de.dittner.testmyself.model.domain.test.TestID;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.ui.common.utils.FontName;
        import de.dittner.testmyself.ui.view.test.TestVM;
        import de.dittner.testmyself.ui.view.test.common.TestingAction;

        //--------------------------------------
        //  padding
        //--------------------------------------
        private var _padding:uint = 0;
        [Bindable("paddingChanged")]
        public function get padding():uint {return _padding;}
        public function set padding(value:uint):void {
            if (_padding != value) {
                _padding = value;
                dispatchEvent(new Event("paddingChanged"));
            }
        }

        //--------------------------------------
        //  vm
        //--------------------------------------
        private var _vm:TestVM;
        [Bindable("vmChanged")]
        public function get vm():TestVM {return _vm;}
        public function set vm(value:TestVM):void {
            if (_vm != value) {
                _vm = value;
                dispatchEvent(new Event("vmChanged"));
            }
        }

        //--------------------------------------
        //  errorsNum
        //--------------------------------------
        private var _errorsNum:int = 0;
        [Bindable("errorsNumChanged")]
        public function get errorsNum():int {return _errorsNum;}
        private function setErrorsNum(value:int):void {
            if (_errorsNum != value) {
                _errorsNum = value;
                dispatchEvent(new Event("errorsNumChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        public function activate():void {
            setErrorsNum(0);
            findTestView(vm.testPage.test);
            loadTestTaskIDs();
        }

        private function findTestView(test:Test):void {
            switch (test.id) {
                case TestID.SPEAK_WORD_TRANSLATION :
                    setCurrentState("speakWordTranslation");
                    break;
                case TestID.SELECT_ARTICLE :
                    setCurrentState("selectArticle");
                    break;
                case TestID.WRITE_WORD :
                case TestID.WRITE_VERB :
                case TestID.WRITE_LESSON :
                case TestID.WRITE_VERB_EXAMPLE :
                case TestID.WRITE_WORD_EXAMPLE :
                    setCurrentState("writeNote");
                    break;
                case TestID.SPEAK_LESSON_TRANSLATION :
                case TestID.SPEAK_VERB_EXAMPLE_TRANSLATION :
                case TestID.SPEAK_WORD_EXAMPLE_TRANSLATION :
                    setCurrentState("speakNoteTranslation");
                    break;
                case TestID.SPEAK_WORD_IN_DEUTSCH :
                case TestID.SPEAK_LESSON_IN_DEUTSCH :
                case TestID.SPEAK_VERB_EXAMPLE_IN_DEUTSCH :
                case TestID.SPEAK_WORD_EXAMPLE_IN_DEUTSCH :
                    setCurrentState("speakNoteTranslation");
                    break;
                case TestID.SPEAK_VERB_FORMS :
                    setCurrentState("speakVerbForms");
                    break;
                default:
                    setCurrentState("normal");
            }
        }

        private function loadTestTaskIDs():void {
            var op:IAsyncOperation = vm.loadTaskIDsForTest();
            op.addCompleteCallback(taskIDsLoaded);
        }

        private function taskIDsLoaded(op:IAsyncOperation):void {
            if (op.isSuccess) {
                vm.loadNextTestTask();
            }
        }

        private function actionCallback(action:String):void {
            switch (action) {
                case TestingAction.CORRECT_ANSWER :
                    vm.selectedTestTask.isFailed = false;
                    vm.selectedTestTask.store();
                    break;
                case TestingAction.INCORRECT_ANSWER :
                    setErrorsNum(errorsNum + 1);
                    vm.selectedTestTask.isFailed = true;
                    vm.selectedTestTask.store();
                    break;
                case TestingAction.NEXT_TASK :
                    vm.loadNextTestTask();
                    break;
            }
        }

        private function goBack():void {
            vm.selectedTestTask = null;
            setCurrentState("normal");
            dispatchEvent(new Event("goBack"));
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="normal"/>
        <s:State name="speakWordTranslation"/>
        <s:State name="selectArticle"/>
        <s:State name="writeNote"/>
        <s:State name="speakNoteTranslation"/>
        <s:State name="speakVerbForms"/>
    </s:states>

    <utils:BG width="100%" height="100%" color="{AppColors.WHITE}"/>

    <!--HEADER-->
    <common:TestHeader id="header"
                       width="100%" padding="{padding}"
                       title="{vm.testPage.test.title}"/>

    <s:Label text="{'Anzahl der Fehler: ' + errorsNum}"
             fontFamily="{FontName.MYRIAD}"
             fontSize="14"
             opaqueBackground="0"
             mouseChildren="false" mouseEnabled="false"
             right="{padding + 8}" top="{header.height + 10}"
             color="{AppColors.TEXT_WHITE}"/>

    <s:Label text="{vm.curTaskNumber + '/' + vm.testTaskIDs.length}"
             fontFamily="{FontName.MYRIAD_COND}"
             fontWeight="bold"
             fontSize="20" textAlign="center"
             mouseChildren="false" mouseEnabled="false"
             width="100%" top="{header.height + 10}"
             color="{AppColors.TEXT_LIGHT}"/>

    <!--BODY-->

    <s:Group width="100%" top="{header.height + 40}" bottom="{AppSizes.EDITOR_FOOTER_HEIGHT + 20}">

        <test:SpeakWordTranslationTest id="speakWordTranslationTest"
                                       includeIn="speakWordTranslation"
                                       width="100%" height="100%"
                                       testTask="{vm.selectedTestTask}"
                                       padding="{padding}"
                                       actionCallback="actionCallback"/>

        <test:SelectArticleTest id="selectArticleTest"
                                includeIn="selectArticle"
                                width="100%" height="100%"
                                testTask="{vm.selectedTestTask}"
                                padding="{padding}"
                                actionCallback="actionCallback"/>

        <test:WriteNoteTest id="writeNoteTest"
                            includeIn="writeNote"
                            width="100%" height="100%"
                            mp3Player="{mp3Player}"
                            testTask="{vm.selectedTestTask}"
                            padding="{padding}"
                            actionCallback="actionCallback"/>

        <test:SpeakNoteTranslationTest id="speakNoteTranslationTest"
                                       includeIn="speakNoteTranslation"
                                       width="100%" height="100%"
                                       translateFromNativeIntoForeign="{vm.testPage.test.translateFromNativeIntoForeign}"
                                       testTask="{vm.selectedTestTask}"
                                       padding="{padding}"
                                       actionCallback="actionCallback"/>

        <test:SpeakVerbFormsTest id="speakVerbFormsTest"
                                 includeIn="speakVerbForms"
                                 width="100%" height="100%"
                                 testTask="{vm.selectedTestTask}"
                                 padding="{padding}"
                                 actionCallback="actionCallback"/>

    </s:Group>

    <!--FOOTER-->

    <s:Group width="100%" bottom="0" height="{AppSizes.EDITOR_FOOTER_HEIGHT}">

        <utils:BG width="100%" height="100%" color="{AppColors.SCREEN_HEADER_BG}"/>

        <mp3:MP3Player id="mp3Player"
                       width="400"
                       left="{padding - 10}"
                       verticalCenter="0"
                       removeRecordEnabled="false"
                       visible="{mp3Player.hasComment}"
                       comment="{vm.selectedTestTask.note.audioComment}"
                       skinClass="de.dittner.testmyself.ui.common.audio.skins.MP3PlayerSkin"/>

        <test:RateBoard horizontalCenter="0" verticalCenter="0" complexity="@{vm.selectedTestTask.complexity}"/>

        <button:GrayButton id="cancelBtn"
                           width="250"
                           verticalCenter="0"
                           right="{padding}"
                           label="Beenden"
                           click="goBack()"/>
    </s:Group>
</s:Group>
