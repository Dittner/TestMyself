<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:test="de.dittner.testmyself.ui.view.test.testing.components.*"
         xmlns:utils="de.dittner.testmyself.ui.common.utils.*">

    <fx:Script><![CDATA[
        import de.dittner.async.IAsyncOperation;
        import de.dittner.testmyself.model.domain.test.Test;
        import de.dittner.testmyself.model.domain.test.TestID;
        import de.dittner.testmyself.ui.common.menu.IMenuBoard;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.ui.common.utils.FontName;
        import de.dittner.testmyself.ui.view.test.TestVM;
        import de.dittner.testmyself.ui.view.test.common.TestingAction;
        import de.dittner.testmyself.ui.view.test.testing.components.TestableView;
        import de.dittner.testmyself.utils.Values;

        //--------------------------------------
        //  padding
        //--------------------------------------
        private var _padding:uint = 0;
        [Bindable("paddingChanged")]
        public function get padding():uint {return _padding;}
        public function set padding(value:uint):void {
            if (_padding != value) {
                _padding = value;
                dispatchEvent(new Event("paddingChanged"));
            }
        }

        //--------------------------------------
        //  vm
        //--------------------------------------
        private var _vm:TestVM;
        [Bindable("vmChanged")]
        public function get vm():TestVM {return _vm;}
        public function set vm(value:TestVM):void {
            if (_vm != value) {
                _vm = value;
                dispatchEvent(new Event("vmChanged"));
            }
        }

        //--------------------------------------
        //  errorsNum
        //--------------------------------------
        private var _errorsNum:int = 0;
        [Bindable("errorsNumChanged")]
        public function get errorsNum():int {return _errorsNum;}
        private function setErrorsNum(value:int):void {
            if (_errorsNum != value) {
                _errorsNum = value;
                dispatchEvent(new Event("errorsNumChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        private var menu:IMenuBoard;
        public function activate(menu:IMenuBoard):void {
            this.menu = menu;
            setErrorsNum(0);
            findTestView(vm.testPage.test);
            activeTestView.activate(actionCallback, menu);
            activeTestView.visible = activeTestView.includeInLayout = true;
            loadTestTaskIDs();
        }

        public function deactivate():void {
            activeTestView.deactivate();
            activeTestView.visible = activeTestView.includeInLayout = false;
            vm.selectedTestTask = null;
        }

        private var activeTestView:TestableView;

        private function findTestView(test:Test):void {
            switch (test.id) {
                case TestID.DE_TRANSLATE_WORD_FROM_GERMAN :
                case TestID.EN_TRANSLATE_WORD_FROM_ENGLISH :
                    activeTestView = speakWordTranslationTest;
                    break;
                case TestID.DE_SELECT_ARTICLE :
                    activeTestView = selectArticleTest;
                    break;
                case TestID.DE_WRITE_WORD :
                case TestID.DE_WRITE_VERB :
                case TestID.DE_WRITE_LESSON :
                case TestID.EN_WRITE_WORD :
                case TestID.EN_WRITE_VERB :
                case TestID.EN_WRITE_LESSON :
                    activeTestView = writeNoteTest;
                    break;
                case TestID.DE_TRANSLATE_LESSON_FROM_GERMAN :
                case TestID.DE_TRANSLATE_VERB_EXAMPLE_FROM_GERMAN :
                case TestID.DE_TRANSLATE_WORD_EXAMPLE_FROM_GERMAN :
                case TestID.DE_TRANSLATE_WORD_INTO_GERMAN :
                case TestID.DE_TRANSLATE_LESSON_INTO_GERMAN :
                case TestID.DE_TRANSLATE_VERB_EXAMPLE_INTO_GERMAN :
                case TestID.DE_TRANSLATE_WORD_EXAMPLE_INTO_GERMAN :
                case TestID.EN_TRANSLATE_LESSON_FROM_ENGLISH :
                case TestID.EN_TRANSLATE_VERB_EXAMPLE_FROM_ENGLISH :
                case TestID.EN_TRANSLATE_WORD_EXAMPLE_FROM_ENGLISH :
                case TestID.EN_TRANSLATE_WORD_INTO_ENGLISH :
                case TestID.EN_TRANSLATE_LESSON_INTO_ENGLISH :
                case TestID.EN_TRANSLATE_VERB_EXAMPLE_INTO_ENGLISH :
                case TestID.EN_TRANSLATE_WORD_EXAMPLE_INTO_ENGLISH :
                    activeTestView = speakNoteTranslationTest;
                    break;
                case TestID.DE_DECLENSION_VERB_FORMS :
                case TestID.EN_DECLENSION_VERB_FORMS :
                    activeTestView = speakVerbFormsTest;
                    break;
                default:
                    throw new Error("No Test found with id: " + test.id);
            }
        }

        private function loadTestTaskIDs():void {
            var op:IAsyncOperation = vm.loadTaskIDsForTest();
            op.addCompleteCallback(taskIDsLoaded);
        }

        private function taskIDsLoaded(op:IAsyncOperation):void {
            if (op.isSuccess) {
                vm.loadNextTestTask();
            }
        }

        private function actionCallback(action:String):void {
            if (!vm.selectedTestTask) return;
            switch (action) {
                case TestingAction.CORRECT_ANSWER :
                    vm.selectedTestTask.isFailed = false;
                    vm.selectedTestTask.store();
                    break;
                case TestingAction.INCORRECT_ANSWER :
                    setErrorsNum(errorsNum + 1);
                    vm.selectedTestTask.isFailed = true;
                    vm.selectedTestTask.store();
                    break;
                case TestingAction.NEXT_TASK :
                    vm.loadNextTestTask();
                    break;
            }
        }
        ]]></fx:Script>

    <utils:BG percentWidth="100" percentHeight="100" fillColor="{AppColors.WHITE}"/>

    <!--HEADER-->
    <s:Label text="{errorsNum + ' ' + resourceManager.getString('app', 'Errors')}"
             right="{padding}" top="{padding}"
             textAlign="right"
             fontSize="{Values.PT20}"
             maxDisplayedLines="1"
             mouseChildren="false" mouseEnabled="false"
             color="{AppColors.TEXT_LIGHT}"/>

    <s:Label text="{vm.curTaskNumber + '/' + vm.testTaskIDs.length}"
             fontFamily="{FontName.MYRIAD_COND}"
             fontWeight="bold"
             fontSize="{Values.PT20}"
             mouseChildren="false" mouseEnabled="false"
             left="{padding}" top="{padding}"
             color="{AppColors.TEXT_LIGHT}"/>

    <!--BODY-->

    <s:Group width="100%" top="{Values.PT50}" bottom="{AppSizes.EDITOR_FOOTER_HEIGHT + Values.PT20}">

        <test:SpeakWordTranslationTest id="speakWordTranslationTest"
                                       width="100%" height="100%"
                                       visible="false" includeInLayout="false"
                                       testTask="{vm.selectedTestTask}"
                                       padding="{padding}"/>

        <test:SelectArticleTest id="selectArticleTest"
                                width="100%" height="100%"
                                visible="false" includeInLayout="false"
                                testTask="{vm.selectedTestTask}"
                                padding="{padding}"/>

        <test:WriteNoteTest id="writeNoteTest"
                            width="100%" height="100%"
                            visible="false" includeInLayout="false"
                            testTask="{vm.selectedTestTask}"
                            padding="{padding}"/>

        <test:SpeakNoteTranslationTest id="speakNoteTranslationTest"
                                       width="100%" height="100%"
                                       visible="false" includeInLayout="false"
                                       translateFromNativeIntoForeign="{vm.testPage.test.translateFromNativeIntoForeign}"
                                       testTask="{vm.selectedTestTask}"
                                       padding="{padding}"/>

        <test:SpeakVerbFormsTest id="speakVerbFormsTest"
                                 width="100%" height="100%"
                                 visible="false" includeInLayout="false"
                                 testTask="{vm.selectedTestTask}"
                                 padding="{padding}"/>

    </s:Group>

    <!--footer-->
    <s:HGroup width="100%" height="{AppSizes.EDITOR_FOOTER_HEIGHT}" bottom="0"
              opaqueBackground="{AppColors.SCREEN_FOOTER_BG}">

        <s:Label id="titleLbl"
                 text="{vm.selectedVocabulary.title.toUpperCase() + '. ' + vm.testPage.test.title}"
                 width="50%" height="100%" verticalAlign="middle"
                 fontSize="{Values.PT14}"
                 paddingLeft="{Values.PT10}" paddingTop="{Values.PT1}"
                 maxDisplayedLines="1"
                 color="{AppColors.TEXT_BLACK}"/>

        <s:Label id="tagsLbl"
                 text="{vm.selectedNoteTags}"
                 height="100%" width="50%" textAlign="right" paddingRight="{Values.PT10}"
                 fontSize="{Values.PT14}" verticalAlign="middle" paddingTop="{Values.PT1}"
                 maxDisplayedLines="1"
                 color="{AppColors.TEXT_BLACK}"/>
    </s:HGroup>
</s:Group>
