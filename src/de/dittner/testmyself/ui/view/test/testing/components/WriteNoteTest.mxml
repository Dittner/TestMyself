<?xml version="1.0"?>
<test:TestableView xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:button="de.dittner.testmyself.ui.common.button.*"
                   xmlns:test="de.dittner.testmyself.ui.view.test.testing.components.*"
                   xmlns:input="de.dittner.testmyself.ui.common.input.*"
                   xmlns:form="de.dittner.testmyself.ui.view.noteList.components.form.*">

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.Device;
        import de.dittner.testmyself.model.domain.note.DeWordArticle;
        import de.dittner.testmyself.model.domain.note.IrregularVerb;
        import de.dittner.testmyself.model.domain.note.Word;
        import de.dittner.testmyself.ui.common.popup.SimplePopup;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.FontName;

        //--------------------------------------
        //  isCorrectlyAnswered
        //--------------------------------------
        private var _isCorrectlyAnswered:Boolean = true;
        [Bindable("isCorrectlyAnsweredChanged")]
        public function get isCorrectlyAnswered():Boolean {return _isCorrectlyAnswered;}
        public function set isCorrectlyAnswered(value:Boolean):void {
            if (_isCorrectlyAnswered != value) {
                _isCorrectlyAnswered = value;
                dispatchEvent(new Event("isCorrectlyAnsweredChanged"));
            }
        }

        //--------------------------------------
        //  isBigText
        //--------------------------------------
        private var _isBigText:Boolean = false;
        [Bindable("isBigTextChanged")]
        public function get isBigText():Boolean {return _isBigText;}
        public function set isBigText(value:Boolean):void {
            if (_isBigText != value) {
                _isBigText = value;
                dispatchEvent(new Event("isBigTextChanged"));
            }
        }

        //--------------------------------------
        //  word
        //--------------------------------------
        public function get word():Word {
            return note as Word;
        }

        //--------------------------------------
        //  verb
        //--------------------------------------
        public function get verb():IrregularVerb {
            return note as IrregularVerb;
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        override protected function updateForm():void {
            clear();
            if (word) {
                articleLbl.text = word.article;
                if (word.article == DeWordArticle.DIE) articleLbl.setStyle("color", AppColors.TEXT_RED);
                else if (word.article == DeWordArticle.DAS) articleLbl.setStyle("color", AppColors.TEXT_YELLOW);
                else articleLbl.setStyle("color", AppColors.TEXT_BLACK);

                titleLbl.text = word.article ? " " + word.title : word.title;

                titleLbl.text += word.declension ? ", " + word.declension : "";
                translateBoard.text = word.description;

                isBigText = false;
            }
            else if (verb) {
                titleLbl.text = verb.title + ", " + verb.present + ", " + verb.past + ", " + verb.perfect;
                translateBoard.text = note.description;
                isBigText = false;
            }
            else if (note) {
                titleBoard.text = note.title;
                translateBoard.text = note.description;
                isBigText = true;
            }

            if (Device.isDesktop) stage.focus = isBigText ? textArea.area : textInput;
            playAudioComment();
        }

        override protected function clear():void {
            isCorrectlyAnswered = true;
            showDetails = false;
            articleLbl.text = "";
            titleLbl.text = "";
            translateBoard.text = "";
            textInput.text = "";
            textArea.text = "";
        }

        override protected function showTestMenu():void {
            menu.showTestMenu(false, false, true);
        }

        private function onCorrectAnswered():void {
            notifyTrueAnswer();
            requestNextTask();
        }

        private function onAnswered():void {
            if (!isCorrectlyAnswered) return;
            isCorrectlyAnswered = note.title.toLowerCase() == (isBigText ? textArea.text.toLowerCase() : textInput.text.toLowerCase());
            notifyAnswered();
        }

        private function notifyAnswered():void {
            if (isCorrectlyAnswered) {
                notifyTrueAnswer();
                requestNextTask();
            }
            else {
                showInvalidMsg();
                notifyFalseAnswer();
            }
        }

        private function showInvalidMsg():void {
            if (invalidNotifier && !SimplePopup.isShownInPopup(invalidNotifier)) {
                SimplePopup.show(invalidNotifier, false);
                invalidNotifier.show();
            }
        }
        ]]></fx:Script>
    <fx:Declarations>
        <form:InvalidNotifier id="invalidNotifier"
                              width="200" height="31"
                              text="{resourceManager.getString('app', 'False!')}"
                              bottom="50" horizontalCenter="0"/>
    </fx:Declarations>

    <test:layout>
        <s:VerticalLayout gap="15" horizontalAlign="center"/>
    </test:layout>

    <test:TextBoard id="titleBoard"
                    visible="{isBigText}" includeInLayout="{isBigText}"
                    width="{width - 2*padding}" height="100%"
                    questionsIconEnabled="true"
                    title="{resourceManager.getString('app', 'TextInput')}"
                    showText="{showDetails}"/>

    <s:HGroup visible="{!isBigText}" includeInLayout="{!isBigText}"
              width="100%"
              horizontalAlign="center" gap="0" height="60" verticalAlign="bottom">
        <s:Label id="articleLbl"
                 fontFamily="{FontName.MYRIAD_COND}"
                 fontWeight="bold"
                 visible="{showDetails}"
                 includeInLayout="{showDetails}"
                 fontSize="42"/>
        <s:Label id="titleLbl"
                 maxWidth="{0.75 * width}"
                 maxDisplayedLines="2"
                 fontFamily="{FontName.MYRIAD_COND}"
                 fontWeight="bold"
                 color="{AppColors.TEXT_BLACK}"
                 visible="{showDetails}"
                 includeInLayout="{showDetails}"
                 fontSize="42"/>

        <s:BitmapImage visible="{!showDetails}"
                       includeInLayout="{!showDetails}"
                       source="@Embed('/assets/test/questions.png')"/>
    </s:HGroup>

    <s:HGroup width="100%" gap="15" paddingLeft="{padding}" paddingRight="{padding}" verticalAlign="bottom">

        <input:TextInputForm id="textInput"
                             visible="{!isBigText}" includeInLayout="{!isBigText}"
                             width="100%"
                             maxChars="{Device.MAX_WORD_LENGTH}"
                             enter="onAnswered()"
                             title="{resourceManager.getString('app', 'PleaseWriteText')}"/>

        <input:TextAreaForm id="textArea"
                            visible="{isBigText}" includeInLayout="{isBigText}"
                            width="100%" height="{height/2}"
                            maxChars="{Device.MAX_WORD_LENGTH}"
                            title="{resourceManager.getString('app', 'PleaseWriteText')}"/>

        <button:BlackButton id="validateBtn"
                            width="200"
                            enabled="{isActivating  &amp;&amp; isCorrectlyAnswered}"
                            label="PrÃ¼fen"
                            click="onAnswered()"/>
    </s:HGroup>

    <test:TextBoard id="translateBoard"
                    width="{width - 2*padding}" height="300"
                    title="{resourceManager.getString('app', 'Translation')}"
                    showText="{showDetails}"/>

</test:TestableView>
