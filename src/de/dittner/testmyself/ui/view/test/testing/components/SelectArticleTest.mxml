<?xml version="1.0"?>
<test:TestableView xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:button="de.dittner.testmyself.ui.common.button.*"
                   xmlns:test="de.dittner.testmyself.ui.view.test.testing.components.*"
                   xmlns:form="de.dittner.testmyself.ui.view.noteList.components.form.*">

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.domain.note.DeWord;
        import de.dittner.testmyself.model.domain.note.DeWordArticle;
        import de.dittner.testmyself.ui.common.popup.SimplePopup;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.FontName;

        private var isCorrectlyAnswered:Boolean = true;

        //--------------------------------------
        //  word
        //--------------------------------------
        public function get word():DeWord {
            return note as DeWord;
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        override protected function updateForm():void {
            clear();

            if (word) {
                articleLbl.text = word.article;
                if (word.article == DeWordArticle.DIE) articleLbl.setStyle("color", AppColors.TEXT_RED);
                else if (word.article == DeWordArticle.DAS) articleLbl.setStyle("color", AppColors.TEXT_YELLOW);
                else articleLbl.setStyle("color", AppColors.TEXT_DARK);

                titleLbl.text = word.article ? " " + word.title : word.title;

                optionsLbl.text = word.declension ? ", " + word.declension : "";
                translateBoard.text = word.description;
            }
        }

        override protected function clear():void {
            articleLbl.text = "";
            titleLbl.text = "";
            optionsLbl.text = "";
            translateBoard.text = "";
            showDetails = false;
            isCorrectlyAnswered = true;
        }

        override protected function showTestMenu():void {
            menu.showTestMenu(false, false, true);
        }

        private function optionsEnabled(showDetails:Boolean, options:String):Boolean {
            return showDetails && options;
        }

        private function onDerAnswered():void {
            if (isCorrectlyAnswered && word) {
                isCorrectlyAnswered = word.article == DeWordArticle.DER || word.article == DeWordArticle.DER_DIE || word.article == DeWordArticle.DER_DAS || word.article == DeWordArticle.DER_DIE_DAS;
                notifyAnswered();
            }
        }

        private function onDieAnswered():void {
            if (isCorrectlyAnswered && word) {
                isCorrectlyAnswered = word.article == DeWordArticle.DIE || word.article == DeWordArticle.DER_DIE || word.article == DeWordArticle.DIE_DAS || word.article == DeWordArticle.DER_DIE_DAS;
                notifyAnswered();
            }
        }

        private function onDasAnswered():void {
            if (isCorrectlyAnswered && word) {
                isCorrectlyAnswered = word.article == DeWordArticle.DAS || word.article == DeWordArticle.DER_DAS || word.article == DeWordArticle.DIE_DAS || word.article == DeWordArticle.DER_DIE_DAS;
                notifyAnswered();
            }
        }

        private function notifyAnswered():void {
            if (isCorrectlyAnswered) {
                notifyTrueAnswer();
                requestNextTask();
            }
            else {
                showInvalidMsg();
                notifyFalseAnswer();
                showDetails = true
            }
        }

        private function showInvalidMsg():void {
            if (invalidNotifier && !SimplePopup.isShownInPopup(invalidNotifier)) {
                SimplePopup.show(invalidNotifier, false);
                invalidNotifier.show();
            }
        }
        ]]></fx:Script>
    <fx:Declarations>
        <form:InvalidNotifier id="invalidNotifier"
                              width="200" height="31"
                              text="Falsch!"
                              bottom="50" horizontalCenter="0"/>
    </fx:Declarations>

    <test:layout>
        <s:VerticalLayout gap="15" horizontalAlign="right" paddingLeft="{padding}" paddingRight="{padding}"/>
    </test:layout>

    <s:HGroup width="100%" horizontalAlign="center" gap="0">
        <s:Label id="articleLbl"
                 fontFamily="{FontName.MYRIAD_COND}"
                 fontWeight="bold"
                 fontSize="42"
                 includeInLayout="{showDetails}"
                 visible="{showDetails}"/>
        <s:Label id="titleLbl"
                 fontFamily="{FontName.MYRIAD_COND}"
                 fontWeight="bold"
                 color="{AppColors.TEXT_DARK}"
                 fontSize="42"/>
        <s:Label id="optionsLbl"
                 fontFamily="{FontName.MYRIAD_COND}"
                 fontWeight="bold"
                 color="{AppColors.TEXT_DARK}"
                 fontSize="42"
                 visible="{showDetails}"
                 includeInLayout="{optionsEnabled(showDetails, optionsLbl.text)}"/>
    </s:HGroup>

    <test:TextBoard id="translateBoard"
                    width="100%" height="100%"
                    title="Ãœbersetzung" showText="{showDetails}"/>

    <button:BlackButton id="derBtn"
                        width="150" height="50"
                        enabled="{isActivating}"
                        label="DER"
                        click="onDerAnswered()"/>

    <button:RedButton id="dieBtn"
                      width="150" height="50"
                      enabled="{isActivating}"
                      label="DIE"
                      click="onDieAnswered()"/>

    <button:YellowButton id="dasBtn"
                         width="150" height="50"
                         enabled="{isActivating}"
                         label="DAS"
                         click="onDasAnswered()"/>

</test:TestableView>
