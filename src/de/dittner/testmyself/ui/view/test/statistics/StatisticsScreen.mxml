<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:button="de.dittner.testmyself.ui.common.button.*"
         xmlns:navigation="de.dittner.testmyself.ui.view.noteList.components.pagination.*"
         xmlns:utils="de.dittner.testmyself.ui.common.utils.*"
         xmlns:list="de.dittner.testmyself.ui.common.list.*"
         xmlns:common="de.dittner.testmyself.ui.view.test.common.*"
         xmlns:common2="de.dittner.testmyself.ui.view.noteList.components.*">
    <fx:Metadata>
        [Event(name="goBack", type="flash.events.Event")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.domain.test.TestTask;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.ui.view.test.TestVM;

        //--------------------------------------
        //  padding
        //--------------------------------------
        private var _padding:uint = 0;
        [Bindable("paddingChanged")]
        public function get padding():uint {return _padding;}
        public function set padding(value:uint):void {
            if (_padding != value) {
                _padding = value;
                dispatchEvent(new Event("paddingChanged"));
            }
        }

        //--------------------------------------
        //  vm
        //--------------------------------------
        private var _vm:TestVM;
        [Bindable("vmChanged")]
        public function get vm():TestVM {return _vm;}
        public function set vm(value:TestVM):void {
            if (_vm != value) {
                _vm = value;
                dispatchEvent(new Event("vmChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------
        private var needTranslationInvert:Boolean = false;

        public function activate():void {
            vm.testPage.number = 0;
            vm.testPage.countAllNotes = true;
            vm.loadStatisticsPage();
        }

        private function setTaskAsRightBtnEnabled(selectedTask:*, isFailedTaskShown:Boolean):Boolean {
            return selectedTask && isFailedTaskShown;
        }

        private function goBack():void {
            dispatchEvent(new Event("goBack"));
        }

        private function setTaskAsRightBtnClickHandler(event:MouseEvent):void {
            if (vm.selectedTestTask) {
                vm.selectedTestTask.isFailed = false;
                vm.selectedTestTask.store();
                if (showOnlyFailedNotesFilterBox.selected)
                    vm.loadStatisticsPage();
            }
        }

        private function pageNumChanged():void {
            vm.loadStatisticsPage();
        }

        private function showOnlyFailedTestTask():void {
            if (vm.testPage.loadOnlyFailedTestTask != showOnlyFailedNotesFilterBox.selected) {
                vm.testPage.loadOnlyFailedTestTask = showOnlyFailedNotesFilterBox.selected;
                vm.testPage.number = 0;
                vm.testPage.countAllNotes = true;
                vm.loadStatisticsPage();
            }
        }
        ]]></fx:Script>

    <utils:BG width="100%" height="100%" color="#ffFFff"/>

    <common:TestHeader width="100%" padding="{padding}"
                       title="{vm.testPage.test.title}"/>

    <button:WhiteButton id="setTaskAsRightBtn"
                        horizontalCenter="-110" top="5"
                        label="Als richtig zeichnen"
                        width="220"
                        enabled="{setTaskAsRightBtnEnabled(list.selectedItem, showOnlyFailedNotesFilterBox.selected)}"
                        click="setTaskAsRightBtnClickHandler(event)"/>

    <s:CheckBox id="showOnlyFailedNotesFilterBox"
                right="25" top="10"
                selected="{vm.testPage.loadOnlyFailedTestTask}"
                skinClass="de.dittner.testmyself.ui.common.checkBox.DarkCheckBoxSkin"
                label="nur Notiz mit Fehlern"
                change="showOnlyFailedTestTask()"/>

    <s:HGroup left="-1" right="-1" top="39" bottom="{AppSizes.EDITOR_FOOTER_HEIGHT}" gap="-1">
        <s:Scroller width="100%" height="100%"
                    minViewportInset="1"
                    horizontalScrollPolicy="off"
                    hasFocusableChildren="false">

            <list:SelectableDataGroup id="list"
                                      selectedItem="{vm.selectedTestTask}"
                                      dataProvider="{vm.testPage.taskColl}"
                                      width="100%"
                                      deselectEnabled="true"
                                      itemRenderer="de.dittner.testmyself.ui.view.test.statistics.StatisticsTaskRenderer"
                                      selectedItemChange="vm.selectedTestTask = list.selectedItem as TestTask">
                <list:layout>
                    <s:VerticalLayout gap="0" useVirtualLayout="false"/>
                </list:layout>
            </list:SelectableDataGroup>
        </s:Scroller>

        <common2:ExampleList id="exampleList"
                             width="100%" height="100%"
                             dataProvider="{vm.selectedTestTask.note.exampleColl}"
                             selectedNote="@{vm.selectedNoteExample}"
                             visible="{vm.testPage.test.loadExamplesWhenTesting}"
                             includeInLayout="{vm.testPage.test.loadExamplesWhenTesting}"
                             showTitle="false"
                             hasFocusableChildren="false"/>
    </s:HGroup>

    <s:Group width="100%" bottom="0" height="{AppSizes.EDITOR_FOOTER_HEIGHT}">

        <utils:BG width="100%" height="100%" color="{AppColors.SCREEN_HEADER_BG}"/>

        <navigation:PaginationBar id="paginationBar"
                                  left="{padding}" right="{padding}"
                                  height="100%"
                                  allNotesAmount="{vm.testPage.amountAllTasks}"
                                  notesOnCurPage="{vm.testPage.taskColl.length}"
                                  pageSize="{vm.testPage.size}"
                                  pageNum="@{vm.testPage.number}"
                                  pageNumChanged="pageNumChanged()"/>

        <button:ToolButton id="goBackBtn"
                           label="ZurÃ¼ck"
                           width="250"
                           verticalCenter="0"
                           left="{padding}"
                           image="@Embed(source='/assets/tools/goback.png')"
                           click="goBack()"/>

    </s:Group>
</s:Group>
