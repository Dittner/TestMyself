<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:list="de.dittner.testmyself.ui.common.list.*"
         horizontalCenter="0">

    <fx:Metadata>
        [Event(name="testSelected", type="flash.events.Event")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.domain.test.Test;
        import de.dittner.testmyself.model.domain.vocabulary.Vocabulary;
        import de.dittner.testmyself.ui.view.test.TestVM;

        import mx.collections.ArrayCollection;

        import spark.events.IndexChangeEvent;

        //--------------------------------------
        //  vm
        //--------------------------------------
        private var _vm:TestVM;
        [Bindable("vmChanged")]
        public function get vm():TestVM {return _vm;}
        public function set vm(value:TestVM):void {
            if (_vm != value) {
                _vm = value;
                dispatchEvent(new Event("vmChanged"));
            }
        }

        //--------------------------------------
        //  padding
        //--------------------------------------
        private var _padding:Number = 0;
        [Bindable("paddingChanged")]
        public function get padding():Number {return _padding;}
        public function set padding(value:Number):void {
            if (_padding != value) {
                _padding = value;
                dispatchEvent(new Event("paddingChanged"));
            }
        }

        private function getTestInfoList(vocabulary:Vocabulary):ArrayCollection {
            return new ArrayCollection(vocabulary ? vocabulary.availableTests : []);
        }

        private function selectedTestHandler(event:IndexChangeEvent):void {
            if (testList.selectedItem is Test) {
                vm.testPage.test = testList.selectedItem;
                vm.selectedVocabulary = vocabularyList.selectedItem;
                dispatchEvent(new Event("testSelected"));
                testList.selectedItem = null;
            }
        }
        ]]></fx:Script>

    <s:layout>
        <s:VerticalLayout gap="15" paddingTop="{padding}" paddingBottom="{padding}" horizontalAlign="center"/>
    </s:layout>

    <list:ListForm id="vocabularyList"
                   verticalScrollPolicy="off"
                   horizontalScrollPolicy="off"
                   width="{width - 2*padding}"
                   dataProvider="{vm.vocabularyColl}"
                   title="{resourceManager.getString('app', 'PleaseChooseTheDesiredNoteType')}"
                   itemRenderer="de.dittner.testmyself.ui.view.test.testList.VocabularyRenderer">
        <list:layout>
            <s:VerticalLayout gap="0" useVirtualLayout="false"/>
        </list:layout>
    </list:ListForm>

    <list:ListForm id="testList"
                   visible="{vocabularyList.selectedItem}"
                   verticalScrollPolicy="off"
                   horizontalScrollPolicy="off"
                   width="{width - 2*padding}" height="100%"
                   dataProvider="{getTestInfoList(vocabularyList.selectedItem)}"
                   title="{resourceManager.getString('app', 'PleaseChooseTheDesiredTest')}"
                   itemRenderer="de.dittner.testmyself.ui.view.test.testList.TestInfoRenderer"
                   change="selectedTestHandler(event)">
        <list:layout>
            <s:VerticalLayout gap="0" useVirtualLayout="false"/>
        </list:layout>
    </list:ListForm>

</s:Group>
