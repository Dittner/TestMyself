<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:list="de.dittner.testmyself.ui.common.list.*"
         xmlns:utils="de.dittner.testmyself.ui.common.utils.*"
         xmlns:button="de.dittner.testmyself.ui.common.button.*"
         xmlns:common="de.dittner.testmyself.ui.view.test.common.*">
    <fx:Metadata>
        [Event(name="startTest", type="flash.events.Event")]
        [Event(name="showStatistics", type="flash.events.Event")]
        [Event(name="goBack", type="flash.events.Event")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.domain.test.TestTaskComplexity;
        import de.dittner.testmyself.model.domain.theme.Theme;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.ui.common.utils.FontName;
        import de.dittner.testmyself.ui.view.test.TestVM;

        //--------------------------------------
        //  vm
        //--------------------------------------
        private var _vm:TestVM;
        [Bindable("vmChanged")]
        public function get vm():TestVM {return _vm;}
        public function set vm(value:TestVM):void {
            if (_vm != value) {
                _vm = value;
                dispatchEvent(new Event("vmChanged"));
            }
        }

        //--------------------------------------
        //  padding
        //--------------------------------------
        private var _padding:Number = 10;
        [Bindable("paddingChanged")]
        public function get padding():Number {return _padding;}
        public function set padding(value:Number):void {
            if (_padding != value) {
                _padding = value;
                dispatchEvent(new Event("paddingChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        private function startTestingBtnClickHandler(event:MouseEvent):void {
            vm.taskComplexity = getComplexity();
            vm.testPage.filter = themesList.selectedItem as Theme;
            dispatchEvent(new Event("startTest"));
        }

        private function showStatisticsBtnClickHandler(event:MouseEvent):void {
            vm.taskComplexity = getComplexity();
            vm.testPage.filter = themesList.selectedItem as Theme;
            dispatchEvent(new Event("showStatistics"));
        }

        private function getComplexity():uint {
            if (middleComplexityRadioBtn.selected) return TestTaskComplexity.MIDDLE;
            else if (lowComplexityRadioBtn.selected) return TestTaskComplexity.LOW;
            else return TestTaskComplexity.HIGH;
        }

        private function goBackBtnClickHandler(event:MouseEvent):void {
            dispatchEvent(new Event("goBack"));
        }
        ]]></fx:Script>

    <s:layout>
        <s:VerticalLayout gap="15" horizontalAlign="center"/>
    </s:layout>

    <common:TestHeader width="100%" padding="{padding}"
                       title="{vm.testPage.test.title}"
                       description="Voreinstellungen"/>

    <s:Group width="{width -2*padding}" height="100%">
        <s:Rect width="100%" top="20" bottom="0">
            <s:stroke>
                <s:SolidColorStroke color="{AppColors.INPUT_BORDER}"/>
            </s:stroke>
            <s:fill>
                <s:SolidColor color="{AppColors.INPUT_CONTENT}"/>
            </s:fill>
        </s:Rect>

        <s:Label width="100%"
                 fontSize="16"
                 fontFamily="{FontName.MYRIAD}"
                 color="{AppColors.TEXT_DARK}"
                 text="Wählen Sie die Themen aus, um die Aufgaben zu filtern"/>

        <list:SelectableDataGroup id="themesList"
                                  deselectEnabled="true"
                                  width="{width -2*padding}"
                                  top="20" bottom="0"
                                  dataProvider="{vm.selectedVocabulary.themeColl}"
                                  itemRenderer="de.dittner.testmyself.ui.view.noteList.components.theme.ThemeItemRenderer">
            <list:layout>
                <s:VerticalLayout gap="0" useVirtualLayout="false"/>
            </list:layout>
        </list:SelectableDataGroup>
    </s:Group>

    <s:Label width="100%"
             fontSize="16"
             fontFamily="{FontName.MYRIAD}"
             color="{AppColors.TEXT_DARK}"
             text="Für Test können Sie die Testaufgaben filtern"/>

    <s:HGroup width="{width -2*padding}" gap="0">
        <s:RadioButton id="highComplexityRadioBtn"
                       groupName="radioBar"
                       width="300"
                       value="high"
                       selected="true"
                       label="Unsortierte Aufgaben"/>

        <s:Spacer width="100%"/>

        <s:RadioButton id="middleComplexityRadioBtn"
                       groupName="radioBar"
                       width="300"
                       value="middle"
                       label="Schwierige Aufgaben"/>

        <s:Spacer width="100%"/>

        <s:RadioButton id="lowComplexityRadioBtn"
                       groupName="radioBar"
                       width="300"
                       value="low"
                       label="Leichte Aufgaben"/>
    </s:HGroup>

    <s:Group width="100%" height="{AppSizes.EDITOR_FOOTER_HEIGHT}">

        <utils:BG width="100%" height="100%" color="{AppColors.SCREEN_HEADER_BG}"/>

        <button:ToolButton id="goBackBtn"
                           label="Zurück"
                           width="250"
                           verticalCenter="0"
                           left="{padding}"
                           image="@Embed(source='/assets/tools/goback.png')"
                           click="goBackBtnClickHandler(event)"/>

        <button:BlackButton id="showStatisticsBtn"
                            width="250"
                            verticalCenter="0"
                            right="{2*padding + 250}"
                            label="Die Statistik"
                            click="showStatisticsBtnClickHandler(event)"/>

        <button:BlackButton id="startTestingBtn"
                            width="250"
                            verticalCenter="0"
                            right="{padding}"
                            label="Das Testen beginnen"
                            click="startTestingBtnClickHandler(event)"/>
    </s:Group>
</s:Group>
