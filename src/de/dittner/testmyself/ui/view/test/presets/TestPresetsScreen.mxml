<?xml version="1.0"?>
<common:Container xmlns:fx="http://ns.adobe.com/mxml/2009"
                  xmlns:s="library://ns.adobe.com/flex/spark"
                  xmlns:list="de.dittner.testmyself.ui.common.list.*"
                  xmlns:button="de.dittner.testmyself.ui.common.button.*"
                  xmlns:tile="de.dittner.testmyself.ui.common.tile.*"
                  xmlns:common="de.dittner.testmyself.ui.common.*"
                  xmlns:scroller="de.dittner.testmyself.ui.common.scroller.*">
    <fx:Metadata>
        [Event(name="startTest", type="flash.events.Event")]
        [Event(name="showStatistics", type="flash.events.Event")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.domain.tag.Tag;
        import de.dittner.testmyself.model.domain.test.TestTaskPriority;
        import de.dittner.testmyself.ui.common.tile.TileID;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.FontName;
        import de.dittner.testmyself.ui.view.test.TestVM;
        import de.dittner.testmyself.utils.Values;

        //--------------------------------------
        //  vm
        //--------------------------------------
        private var _vm:TestVM;
        [Bindable("vmChanged")]
        public function get vm():TestVM {return _vm;}
        public function set vm(value:TestVM):void {
            if (_vm != value) {
                _vm = value;
                dispatchEvent(new Event("vmChanged"));
            }
        }

        //--------------------------------------
        //  padding
        //--------------------------------------
        private var _padding:Number = Values.PT10;
        [Bindable("paddingChanged")]
        public function get padding():Number {return _padding;}
        public function set padding(value:Number):void {
            if (_padding != value) {
                _padding = value;
                dispatchEvent(new Event("paddingChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        public function activate():void {
            visible = true;
        }

        public function deactivate():void {
            visible = false;
        }

        private function startTestingBtnClickHandler(event:MouseEvent):void {
            vm.taskComplexity = getComplexity();
            vm.testPage.selectedTag = tagsList.selectedItem as Tag;
            dispatchEvent(new Event("startTest"));
        }

        private function showStatisticsBtnClickHandler(event:MouseEvent):void {
            vm.taskComplexity = getComplexity();
            vm.testPage.selectedTag = tagsList.selectedItem as Tag;
            dispatchEvent(new Event("showStatistics"));
        }

        private function getComplexity():uint {
            if (middleComplexityRadioBtn.selected) return TestTaskPriority.MIDDLE;
            else if (lowComplexityRadioBtn.selected) return TestTaskPriority.LOW;
            else return TestTaskPriority.HIGH;
        }
        ]]></fx:Script>

    <common:layout>
        <s:VerticalLayout gap="{Values.PT15}"
                          paddingLeft="{padding}" paddingRight="{padding}"
                          paddingTop="{padding}" paddingBottom="{padding}"/>
    </common:layout>

    <s:Label id="titleLbl"
             text="{vm.selectedVocabulary.title.toUpperCase() + '. ' + vm.testPage.test.title}"
             fontFamily="{FontName.MYRIAD}"
             fontWeight="bold"
             fontSize="{Values.PT20}"
             width="100%"
             color="{AppColors.BLACK}"/>

    <s:Group width="100%" height="100%">
        <tile:TileImage width="100%" top="{Values.PT20}" bottom="0"
                        actualTileID="{TileID.WHITE_BG_ICON}"
                        use9Scale="true"/>

        <s:Label width="100%"
                 fontSize="{Values.PT16}"
                 fontFamily="{FontName.MYRIAD}"
                 color="{AppColors.BLACK}"
                 text="{resourceManager.getString('app', 'ChooseTagToFilterTasks')}"/>

        <scroller:CustomScroller width="100%"
                                 top="{Values.PT20}" bottom="0"
                                 horizontalScrollPolicy="off"
                                 hasFocusableChildren="false">
            <list:SelectableDataGroup id="tagsList"
                                      deselectEnabled="true"
                                      width="100%"
                                      height="100%"
                                      dataProvider="{vm.selectedVocabulary.tagColl}"
                                      itemRenderer="de.dittner.testmyself.ui.view.noteList.components.tag.TagRenderer">
                <list:layout>
                    <s:VerticalLayout gap="0" useVirtualLayout="false"/>
                </list:layout>
            </list:SelectableDataGroup>
        </scroller:CustomScroller>
    </s:Group>

    <s:Label width="100%"
             fontSize="{Values.PT16}"
             fontFamily="{FontName.MYRIAD}"
             color="{AppColors.BLACK}"
             text="{resourceManager.getString('app', 'FilterOfTestTasks')}"/>

    <s:HGroup id="radioBar"
              width="100%" gap="0">
        <tile:TileRadioButton id="highComplexityRadioBtn"
                              radioGroup="{radioBar}"
                              selected="true"
                              title="{resourceManager.getString('app', 'UnsortedTasks')}"/>

        <s:Spacer width="100%"/>

        <tile:TileRadioButton id="middleComplexityRadioBtn"
                              radioGroup="{radioBar}"
                              title="{resourceManager.getString('app', 'DifficultTasks')}"/>

        <s:Spacer width="100%"/>

        <tile:TileRadioButton id="lowComplexityRadioBtn"
                              radioGroup="{radioBar}"
                              title="{resourceManager.getString('app', 'EasyTasks')}"/>
    </s:HGroup>

    <s:Group width="100%">

        <button:BlackButton id="showStatisticsBtn"
                            width="{Values.PT250}"
                            title="{resourceManager.getString('app', 'TestResults')}"
                            click="showStatisticsBtnClickHandler(event)"/>

        <button:BlackButton id="startTestingBtn"
                            width="{Values.PT250}"
                            right="0"
                            title="{resourceManager.getString('app', 'StartTest')}"
                            click="startTestingBtnClickHandler(event)"/>
    </s:Group>
</common:Container>
