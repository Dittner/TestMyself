<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:button="de.dittner.testmyself.ui.common.button.*"
         xmlns:list="de.dittner.testmyself.ui.common.list.*"
         xmlns:input="de.dittner.testmyself.ui.common.input.*"
         xmlns:tile="de.dittner.testmyself.ui.common.tile.*">

    <fx:Script><![CDATA[
        import de.dittner.async.IAsyncOperation;
        import de.dittner.testmyself.model.Device;
        import de.dittner.testmyself.model.domain.tag.Tag;
        import de.dittner.testmyself.model.domain.vocabulary.Vocabulary;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.FontName;
        import de.dittner.testmyself.utils.Values;

        import mx.collections.ArrayCollection;

        //--------------------------------------
        //  vocabulary
        //--------------------------------------
        private var _vocabulary:Vocabulary;
        [Bindable("vocabularyChanged")]
        public function get vocabulary():Vocabulary {return _vocabulary;}
        public function set vocabulary(value:Vocabulary):void {
            if (_vocabulary != value) {
                _vocabulary = value;
                dispatchEvent(new Event("vocabularyChanged"));
            }
        }

        //--------------------------------------
        //  removeNotesByTagRemoving
        //--------------------------------------
        private var _removeNotesByTagRemoving:Boolean = false;
        [Bindable("removeNotesByTagRemovingChanged")]
        public function get removeNotesByTagRemoving():Boolean {return _removeNotesByTagRemoving;}
        public function set removeNotesByTagRemoving(value:Boolean):void {
            if (_removeNotesByTagRemoving != value) {
                _removeNotesByTagRemoving = value;
                dispatchEvent(new Event("removeNotesByTagRemovingChanged"));
            }
        }

        private function haveTags(tagColl:ArrayCollection):Boolean {
            return tagColl && tagColl.length > 0;
        }

        //--------------------------------------
        //  editLblText
        //--------------------------------------
        private var _editLblText:String = "";
        [Bindable("editLblTextChanged")]
        public function get editLblText():String {return _editLblText;}
        public function set editLblText(value:String):void {
            if (_editLblText != value) {
                _editLblText = value;
                dispatchEvent(new Event("editLblTextChanged"));
            }
        }

        //--------------------------------------
        //  removeLblText
        //--------------------------------------
        private var _removeLblText:String = "";
        [Bindable("removeLblTextChanged")]
        public function get removeLblText():String {return _removeLblText;}
        public function set removeLblText(value:String):void {
            if (_removeLblText != value) {
                _removeLblText = value;
                dispatchEvent(new Event("removeLblTextChanged"));
            }
        }

        //--------------------------------------
        //  tagsListTitle
        //--------------------------------------
        private var _tagsListTitle:String = "";
        [Bindable("tagsListTitleChanged")]
        public function get tagsListTitle():String {return _tagsListTitle;}
        public function set tagsListTitle(value:String):void {
            if (_tagsListTitle != value) {
                _tagsListTitle = value;
                dispatchEvent(new Event("tagsListTitleChanged"));
            }
        }

        //--------------------------------------
        //  notificationText
        //--------------------------------------
        private var _notificationText:String = "";
        [Bindable("notificationTextChanged")]
        public function get notificationText():String {return _notificationText;}
        public function set notificationText(value:String):void {
            if (_notificationText != value) {
                _notificationText = value;
                dispatchEvent(new Event("notificationTextChanged"));
            }
        }

        //--------------------------------------
        //  tagNameInputTitle
        //--------------------------------------
        private var _tagNameInputTitle:String = "";
        [Bindable("tagNameInputTitleChanged")]
        public function get tagNameInputTitle():String {return _tagNameInputTitle;}
        public function set tagNameInputTitle(value:String):void {
            if (_tagNameInputTitle != value) {
                _tagNameInputTitle = value;
                dispatchEvent(new Event("tagNameInputTitleChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        private function cancelBtn_clickHandler(event:MouseEvent):void {
            if (tagsList) tagsList.selectedItem = null;
            setCurrentState("normal");
        }

        public function get isTagRemoving():Boolean {
            return currentState == "removeTag";
        }

        public function clear():void {
            setCurrentState('normal');
            tagNameInputForm.text = "";
        }

        private function applyBtnEnabled(selectedTag:Tag, updatedTagName:String):Boolean {
            return selectedTag && updatedTagName && selectedTag.name != updatedTagName;
        }

        private function applyBtnClickHandler(event:MouseEvent):void {
            var selectedTag:Tag = tagsList.selectedItem;
            if (!selectedTag || !vocabulary) return;

            if (isTagRemoving) {
                if (removeNotesByTagRemoving)
                    vocabulary.storage.removeNotesByTag(selectedTag);
                selectedTag.remove();
            }
            else if (tagNameInputForm.text) {
                var duplicate:Tag = getTagWithName(tagNameInputForm.text);
                if (duplicate) {
                    var mergeOp:IAsyncOperation = duplicate.mergeWith(selectedTag);
                    mergeOp.addCompleteCallback(changeComplete);
                }
                else {
                    selectedTag.name = tagNameInputForm.text;
                    var storeOp:IAsyncOperation = selectedTag.store();
                    storeOp.addCompleteCallback(changeComplete);
                }
            }
        }

        private function changeComplete(op:IAsyncOperation):void {
            vocabulary.tagColl.refresh();
            tagsList.selectedItem = null;
        }

        private function getTagWithName(tagName:String):Tag {
            for each(var tag:Tag in vocabulary.tagColl)
                if (tag.name == tagName) return tag;
            return null;
        }

        private function setupRenameMode():void {
            setCurrentState('renameTag');
            removeRadioBtn.selected = false;
        }

        private function setupRemoveMode():void {
            setCurrentState('removeTag');
            renameRadioBtn.selected = false;
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="normal"/>
        <s:State name="renameTag" stateGroups="edit"/>
        <s:State name="removeTag" stateGroups="edit"/>
    </s:states>

    <s:layout>
        <s:HorizontalLayout gap="{Values.PT15}"/>
    </s:layout>

    <s:VGroup width="50%" height="100%"
              gap="{Values.PT20}">

        <tile:TileRadioButton id="renameRadioBtn"
                              title="{editLblText}"
                              visible="{haveTags(vocabulary.tagColl)}"
                              includeInLayout="{haveTags(vocabulary.tagColl)}"
                              change="if(renameRadioBtn.selected) setupRenameMode()"/>

        <list:ListForm id="tagsList"
                       width="100%" height="100%"
                       dataProvider="{vocabulary.tagColl}"
                       title="{tagsListTitle}"
                       visible.edit="{haveTags(vocabulary.tagColl)}"
                       visible="false"
                       itemRenderer="de.dittner.testmyself.ui.view.noteList.components.tag.TagRenderer">
            <list:layout>
                <s:VerticalLayout gap="0" useVirtualLayout="false"/>
            </list:layout>
        </list:ListForm>
    </s:VGroup>

    <s:Label fontFamily="{FontName.MYRIAD}"
             fontSize="{Values.PT25}"
             fontWeight="bold"
             color="{AppColors.TEXT_GRAY}"
             width="100%" height="100%"
             textAlign="center" verticalAlign="bottom"
             mouseChildren="false" mouseEnabled="false"
             visible="{!haveTags(vocabulary.tagColl)}"
             includeInLayout="{!haveTags(vocabulary.tagColl)}"
             text="{resourceManager.getString('app', 'NO_DATA')}"/>

    <s:VGroup width="50%" height="100%"
              gap="{Values.PT20}">
        <tile:TileRadioButton id="removeRadioBtn"
                              title="{removeLblText}"
                              fontSize="{Values.PT20}"
                              visible="{haveTags(vocabulary.tagColl)}"
                              includeInLayout="{haveTags(vocabulary.tagColl)}"
                              click="if(removeRadioBtn.selected) setupRemoveMode()"/>

        <s:Label id="notifyLbl"
                 width="100%"
                 paddingTop="{Values.PT20}"
                 fontFamily="{FontName.MYRIAD}"
                 color="{AppColors.BLACK}"
                 fontSize="{Values.PT16}"
                 visible="false" visible.removeTag="true"
                 includeInLayout="false" includeInLayout.removeTag="true"
                 text="{notificationText}"/>

        <input:TextInputForm id="tagNameInputForm"
                             fontSize="{Values.PT18}"
                             width="100%"
                             text="{tagsList.selectedItem.name}"
                             title="{tagNameInputTitle}"
                             maxChars="{Device.MAX_TAG_NAME_LENGTH}"
                             visible="false" visible.renameTag="true"
                             includeInLayout="false" includeInLayout.renameTag="true"/>

        <button:WhiteButton id="cancelBtn"
                            width="100%"
                            visible.edit="{haveTags(vocabulary.tagColl)}"
                            visible="false"
                            title="{resourceManager.getString('app', 'Cancel')}"
                            click="cancelBtn_clickHandler(event)"/>

        <button:BlackButton id="applyBtn"
                            enabled.renameTag="{applyBtnEnabled(tagsList.selectedItem, tagNameInputForm.text)}"
                            enabled.removeTag="{tagsList.selectedItem != null}"
                            title.renameTag="{resourceManager.getString('app', 'Rename')}"
                            title.removeTag="{resourceManager.getString('app', 'Delete')}"
                            visible.edit="{haveTags(vocabulary.tagColl)}"
                            visible="false"
                            width="100%"
                            click="applyBtnClickHandler(event)"/>
    </s:VGroup>

</s:Group>
