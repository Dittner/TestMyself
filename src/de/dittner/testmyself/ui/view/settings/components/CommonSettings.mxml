<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:spinner="de.dittner.testmyself.ui.common.spinner.*"
         xmlns:input="de.dittner.testmyself.ui.common.input.*"
         xmlns:progressbar="de.dittner.testmyself.ui.common.progressBar.*"
         xmlns:tile="de.dittner.testmyself.ui.common.tile.*">

    <fx:Script><![CDATA[
        import de.dittner.async.IAsyncOperation;
        import de.dittner.async.ProgressCommand;
        import de.dittner.testmyself.model.Device;
        import de.dittner.testmyself.ui.common.tile.TileID;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.FontName;
        import de.dittner.testmyself.ui.view.settings.SettingsVM;
        import de.dittner.testmyself.utils.Values;

        [Bindable]
        public var vm:SettingsVM;
        [Bindable]
        public var errorText:String = "";
        [Bindable]
        public var isDataBaseTransferOperationSuccess:Boolean = false;
        [Bindable]
        public var isUploading:Boolean = false;

        private static const CONT_WID:Number = 815 * Device.factor;

        private function loadEnabled(connection:Boolean, hostText:String, portText:String, pwdText:String, userName:String):Boolean {
            return connection && hostText && portText && pwdText && userName;
        }

        //--------------------------------------
        //  uploadDB
        //--------------------------------------

        private function uploadDB():void {
            isUploading = true;
            progressBar.visible = true;
            errorText = "";
            isDataBaseTransferOperationSuccess = false;
            var cmd:ProgressCommand = vm.uploadDB(getSettings());
            cmd.addProgressCallback(uploadDBProgress);
            cmd.addCompleteCallback(uploadDBComplete);
        }

        private function uploadDBProgress(value:Number):void {
            progressBar.progress = value;
        }

        private function uploadDBComplete(op:IAsyncOperation):void {
            if (op.isSuccess) {
                isDataBaseTransferOperationSuccess = true;
            }
            else {
                errorText = "Error: " + op.error;
                isDataBaseTransferOperationSuccess = false;
            }
            progressBar.visible = false;
        }

        //--------------------------------------
        //  downloadDB
        //--------------------------------------

        private function downloadDB():void {
            isUploading = false;
            progressBar.visible = true;
            errorText = "";
            isDataBaseTransferOperationSuccess = false;
            var cmd:ProgressCommand = vm.downloadDB(getSettings());
            cmd.addCompleteCallback(downloadDBComplete);
            cmd.addProgressCallback(downloadProgress);
        }

        private function downloadProgress(value:Number):void {
            progressBar.progress = value;
        }

        private function downloadDBComplete(op:IAsyncOperation):void {
            if (op.isSuccess) {
                isDataBaseTransferOperationSuccess = true;
            }
            else {
                errorText = "Error: " + op.error;
                isDataBaseTransferOperationSuccess = false;
            }
            progressBar.visible = false;
        }

        public function getSettings():SettingsInfo {
            var info:SettingsInfo = new SettingsInfo();
            info.maxAudioRecordDurationInMin = maxAudioRecordDurationSpinner.value;
            info.backUpServerInfo.host = hostInput.text;
            info.backUpServerInfo.port = int(portInput.text);
            info.backUpServerInfo.user = userNameInput.text;
            info.backUpServerInfo.password = pwdInput.text;
            info.backUpServerInfo.remoteDirPath = remoteDirInput.text;
            return info;
        }
        ]]></fx:Script>

    <s:layout>
        <s:VerticalLayout gap="{Values.PT10}" horizontalAlign="center" paddingTop="{Values.PT10}"/>
    </s:layout>

    <s:Label width="{CONT_WID}"
             text="{resourceManager.getString('app', 'AudioRecordSize')}"
             fontFamily="{FontName.MYRIAD}"
             fontStyle="italic"
             fontSize="{Values.PT18}"
             color="{AppColors.TEXT_BLACK}"/>

    <spinner:CustomSpinner id="maxAudioRecordDurationSpinner"
                           width="{CONT_WID}"
                           fontFamily="{FontName.MYRIAD}"
                           fontStyle="italic"
                           fontSize="{Values.PT20}"
                           color="{AppColors.TEXT_BLACK}"
                           minimum="1" maximum="30" value="1"/>

    <!--<button:BlackButton label="DB Parsing from SO"
                        click="parseDBFromSO()"/>-->

    <s:Spacer height="50%"/>

    <s:Label text="{resourceManager.getString('app', 'CopyOrUpdateDataBase')}"
             width="{CONT_WID}"
             fontFamily="{FontName.MYRIAD}"
             fontStyle="italic"
             fontSize="{Values.PT18}"
             color="{AppColors.TEXT_BLACK}"/>

    <s:HGroup gap="{Values.PT15}">
        <input:TextInputForm id="hostInput"
                             fontSize="{Values.PT18}"
                             width="{Values.PT400}"
                             title="{resourceManager.getString('app', 'Server')}"/>

        <input:TextInputForm id="userNameInput"
                             fontSize="{Values.PT18}"
                             width="{Values.PT400}"
                             title="{resourceManager.getString('app', 'User')}"/>
    </s:HGroup>

    <s:HGroup gap="{Values.PT15}">
        <input:TextInputForm id="portInput"
                             fontSize="{Values.PT18}"
                             width="{Values.PT400}"
                             title="{resourceManager.getString('app', 'Port')}"/>

        <input:TextInputForm id="pwdInput"
                             fontSize="{Values.PT18}"
                             displayAsPassword="true"
                             width="{Values.PT400}"
                             title="{resourceManager.getString('app', 'Passwort')}"/>
    </s:HGroup>

    <s:Group width="{CONT_WID}">
        <input:TextInputForm id="remoteDirInput"
                             fontSize="{Values.PT18}"
                             width="{Values.PT400}"
                             title="{resourceManager.getString('app', 'RemoteDirectory')}"/>
    </s:Group>

    <s:Spacer height="50%"/>

    <s:Group width="{CONT_WID}">

        <tile:FadeTileButton id="downloadBtn"
                             upTileID="{TileID.BTN_TRANSPARENT_BLACK}"
                             iconTileID="{TileID.DOWNLOAD_ICON}"
                             title="{resourceManager.getString('app', 'UpdateFromTheServer')}"
                             use9Scale="true"
                             paddingLeft="{Values.PT10}"
                             paddingRight="{Values.PT10}"
                             enabled="{loadEnabled(vm.appModel.hasNetworkConnection, hostInput.text, portInput.text, pwdInput.text, userNameInput.text)}"
                             width="35%" top="0" right="0"
                             textColor="#0"
                             click="downloadDB()"/>

        <tile:TileImage actualTileID="{TileID.CLOUD_ICON}" horizontalCenter="0"/>

        <tile:FadeTileButton id="uploadBtn"
                             upTileID="{TileID.BTN_BLACK}"
                             iconTileID="{TileID.UPLOAD_ICON}"
                             title="{resourceManager.getString('app', 'ExportToTheServer')}"
                             use9Scale="true"
                             paddingLeft="{Values.PT10}"
                             paddingRight="{Values.PT10}"
                             enabled="{loadEnabled(vm.appModel.hasNetworkConnection, hostInput.text, portInput.text, pwdInput.text, userNameInput.text)}"
                             width="35%" bottom="0" left="0"
                             textColor="#ffFFff"
                             click="uploadDB()"/>
    </s:Group>

    <s:Spacer height="10%"/>

    <progressbar:ProgressBar id="progressBar"
                             visible="false"
                             verticalCenter="{Values.PT100}" horizontalCenter="0"
                             title="{isUploading ? resourceManager.getString('app', 'DatabaseIsUploading') : resourceManager.getString('app', 'DatabaseIsUpdating')}"
                             width="{Values.PT400}"/>

    <s:Label fontFamily="{FontName.MYRIAD}"
             fontWeight="bold"
             visible="{errorText}"
             fontSize="{Values.PT18}"
             color="{AppColors.INVALID_INPUT_BORDER}"
             width="{CONT_WID}"
             textAlign="center"
             maxDisplayedLines="5"
             text="{errorText}"/>

    <s:Label fontFamily="{FontName.MYRIAD}"
             fontWeight="bold"
             visible="{isDataBaseTransferOperationSuccess}"
             color="{AppColors.TEXT_BLACK}"
             width="{CONT_WID}"
             fontSize="{Values.PT16}"
             textAlign="center"
             text="{isUploading ? resourceManager.getString('app', 'DatabaseHasBeenUploaded') : resourceManager.getString('app', 'DatabaseHasBeenUpdated')}"/>

</s:Group>