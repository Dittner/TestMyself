<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:button="de.dittner.testmyself.ui.common.button.*"
         xmlns:list="de.dittner.testmyself.ui.common.list.*"
         xmlns:utils="de.dittner.testmyself.ui.common.utils.*"
         xmlns:input="de.dittner.testmyself.ui.common.input.*">

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.Device;
        import de.dittner.testmyself.model.domain.theme.Theme;
        import de.dittner.testmyself.model.domain.vocabulary.Vocabulary;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.FontName;

        import mx.collections.ArrayCollection;

        //--------------------------------------
        //  vocabulary
        //--------------------------------------
        private var _vocabulary:Vocabulary;
        [Bindable("vocabularyChanged")]
        public function get vocabulary():Vocabulary {return _vocabulary;}
        public function set vocabulary(value:Vocabulary):void {
            if (_vocabulary != value) {
                _vocabulary = value;
                dispatchEvent(new Event("vocabularyChanged"));
            }
        }

        //--------------------------------------
        //  removeNotesByThemeRemoving
        //--------------------------------------
        private var _removeNotesByThemeRemoving:Boolean = false;
        [Bindable("removeNotesByThemeRemovingChanged")]
        public function get removeNotesByThemeRemoving():Boolean {return _removeNotesByThemeRemoving;}
        public function set removeNotesByThemeRemoving(value:Boolean):void {
            if (_removeNotesByThemeRemoving != value) {
                _removeNotesByThemeRemoving = value;
                dispatchEvent(new Event("removeNotesByThemeRemovingChanged"));
            }
        }

        //--------------------------------------
        //  haveThemes
        //--------------------------------------
        [Bindable("themesChanged")]
        public function get haveThemes():Boolean {return vocabulary.themes && vocabulary.themes.length > 0;}

        //--------------------------------------
        //  editLblText
        //--------------------------------------
        private var _editLblText:String = "Den Themanamen ändern";
        [Bindable("editLblTextChanged")]
        public function get editLblText():String {return _editLblText;}
        public function set editLblText(value:String):void {
            if (_editLblText != value) {
                _editLblText = value;
                dispatchEvent(new Event("editLblTextChanged"));
            }
        }

        //--------------------------------------
        //  removeLblText
        //--------------------------------------
        private var _removeLblText:String = "Den Themanamen entfernen";
        [Bindable("removeLblTextChanged")]
        public function get removeLblText():String {return _removeLblText;}
        public function set removeLblText(value:String):void {
            if (_removeLblText != value) {
                _removeLblText = value;
                dispatchEvent(new Event("removeLblTextChanged"));
            }
        }

        //--------------------------------------
        //  themesListTitle
        //--------------------------------------
        private var _themesListTitle:String = "Themenliste";
        [Bindable("themesListTitleChanged")]
        public function get themesListTitle():String {return _themesListTitle;}
        public function set themesListTitle(value:String):void {
            if (_themesListTitle != value) {
                _themesListTitle = value;
                dispatchEvent(new Event("themesListTitleChanged"));
            }
        }

        //--------------------------------------
        //  notificationText
        //--------------------------------------
        private var _notificationText:String = "Sind Sie sicher, die Übung ohne die Aufgaben Sie entfernen möchten?";
        [Bindable("notificationTextChanged")]
        public function get notificationText():String {return _notificationText;}
        public function set notificationText(value:String):void {
            if (_notificationText != value) {
                _notificationText = value;
                dispatchEvent(new Event("notificationTextChanged"));
            }
        }

        //--------------------------------------
        //  themeNameInputTitle
        //--------------------------------------
        private var _themeNameInputTitle:String = "Geben Sie bitte den neuen Namen des Themas ein";
        [Bindable("themeNameInputTitleChanged")]
        public function get themeNameInputTitle():String {return _themeNameInputTitle;}
        public function set themeNameInputTitle(value:String):void {
            if (_themeNameInputTitle != value) {
                _themeNameInputTitle = value;
                dispatchEvent(new Event("themeNameInputTitleChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        private function cancelBtn_clickHandler(event:MouseEvent):void {
            if (themesList) themesList.selectedItem = null;
            setCurrentState("normal");
        }

        public function get isThemeRemoving():Boolean {
            return currentState == "removeTheme";
        }

        public function clear():void {
            setCurrentState('normal');
            themeNameInputForm.text = "";
        }

        private function applyBtnEnabled(selectedTheme:Theme, updatedThemeName:String):Boolean {
            return selectedTheme && updatedThemeName && selectedTheme.name != updatedThemeName;
        }

        private function applyBtnClickHandler(event:MouseEvent):void {
            var selectedTheme:Theme = themesList.selectedItem;
            if (!selectedTheme || !vocabulary) return;

            if (isThemeRemoving) {
                if (removeNotesByThemeRemoving)
                    vocabulary.storage.removeNotesByTheme(selectedTheme);
                selectedTheme.remove();
            }
            else if (themeNameInputForm.text) {
                var duplicate:Theme = getThemeWithName(themeNameInputForm.text);
                if (duplicate) {
                    duplicate.mergeWith(selectedTheme);
                }
                else {
                    selectedTheme.name = themeNameInputForm.text;
                    selectedTheme.store();
                }
            }
        }

        private function getThemeWithName(themeName:String):Theme {
            for each(var theme:Theme in vocabulary.themes)
                if (theme.name == themeName) return theme;
            return null;
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="normal"/>
        <s:State name="renameTheme" stateGroups="edit"/>
        <s:State name="removeTheme" stateGroups="edit"/>
    </s:states>

    <s:layout>
        <s:VerticalLayout gap="10"/>
    </s:layout>

    <button:DottedLabelBtn id="editLbl"
                           text="{editLblText}"
                           fontFamily="{FontName.MYRIAD}"
                           fontStyle="italic"
                           fontSize="20"
                           visible="{haveThemes}"
                           includeInLayout="{haveThemes}"
                           upColor="{AppColors.TEXT_DARK}"
                           downColor="{AppColors.TEXT_BLACK}"
                           click="setCurrentState('renameTheme')"/>

    <button:DottedLabelBtn id="removeLbl"
                           text="{removeLblText}"
                           fontFamily="{FontName.MYRIAD}"
                           fontStyle="italic"
                           fontSize="20"
                           visible="{haveThemes}"
                           includeInLayout="{haveThemes}"
                           upColor="{AppColors.TEXT_DARK}"
                           downColor="{AppColors.TEXT_BLACK}"
                           click="setCurrentState('removeTheme')"/>

    <s:Group width="100%" height="100%"
             visible.edit="{haveThemes}"
             visible="false">
        <s:layout>
            <s:ConstraintLayout>
                <s:constraintColumns>
                    <s:ConstraintColumn id="col1" width="50%"/>
                    <s:ConstraintColumn id="col2" width="25%"/>
                    <s:ConstraintColumn id="col3" width="25%"/>
                </s:constraintColumns>
                <s:constraintRows>
                    <s:ConstraintRow id="row1"/>
                    <s:ConstraintRow id="row2" height="100%"/>
                </s:constraintRows>
            </s:ConstraintLayout>
        </s:layout>

        <utils:BG width="100%" height="100%" color="{AppColors.EDITOR_CONTENT_BG}"/>

        <list:ListForm id="themesList"
                       top="10"
                       bottom="10"
                       left="col1:10"
                       right="col1:10"
                       dataProvider="{new ArrayCollection(vocabulary.themes)}"
                       title="{themesListTitle}"
                       itemRenderer="de.dittner.testmyself.ui.view.noteList.components.theme.ThemeItemRenderer">
            <list:layout>
                <s:VerticalLayout gap="0" useVirtualLayout="false"/>
            </list:layout>
        </list:ListForm>

        <s:Label id="notifyLbl"
                 left="col2:10" top="row1:10" right="10"
                 fontFamily="{FontName.MYRIAD}"
                 color="{AppColors.TEXT_DARK}"
                 fontSize="16"
                 visible="false" visible.removeTheme="true"
                 includeInLayout="false" includeInLayout.removeTheme="true"
                 text="{notificationText}"/>

        <input:TextInputForm id="themeNameInputForm"
                             top="row1:10" left="col2:10" right="10"
                             text="{themesList.selectedItem.name}"
                             title="{themeNameInputTitle}"
                             maxChars="{Device.MAX_THEME_NAME_LENGTH}"
                             visible="false" visible.renameTheme="true"
                             includeInLayout="false" includeInLayout.renameTheme="true"/>

        <button:GrayButton id="cancelBtn"
                           top="row2:10"
                           left="col2:10"
                           right="col2:10"
                           label="Abbrechen"
                           click="cancelBtn_clickHandler(event)"/>

        <button:BlackButton id="applyBtn"
                            enabled.renameTheme="{applyBtnEnabled(themesList.selectedItem, themeNameInputForm.text)}"
                            enabled.removeTheme="{themesList.selectedItem != null}"
                            label.renameTheme="Umbenennen"
                            label.removeTheme="Entfernen"
                            top="row2:10"
                            left="col3:10"
                            right="10"
                            click="applyBtnClickHandler(event)"/>
    </s:Group>

</s:Group>
