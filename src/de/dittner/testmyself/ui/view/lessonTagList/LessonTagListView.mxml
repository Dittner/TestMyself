<?xml version="1.0"?>
<view:SmartView xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:core="de.dittner.testmyself.ui.common.view.*"
                xmlns:list2="de.dittner.testmyself.ui.common.list.*"
                xmlns:scroller="de.dittner.testmyself.ui.common.scroller.*"
                xmlns:view="de.dittner.testmyself.ui.common.view.*"
                xmlns:components="de.dittner.testmyself.ui.view.form.components.*"
                currentState="inactive">

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.domain.tag.Tag;
        import de.dittner.testmyself.ui.common.menu.ToolAction;
        import de.dittner.testmyself.ui.common.menu.ToolActionEvent;
        import de.dittner.testmyself.ui.common.popup.SimplePopup;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.ui.common.view.ViewModelFactory;
        import de.dittner.testmyself.utils.Values;

        [Bindable]
        public var vm:LessonTagListVM;

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        override protected function activating():void {
            vm = ViewModelFactory.instance.lessonTagListVM;
            vm.lockView();
            vm.viewActivated(viewInfo);
        }

        override protected function activate():void {
            currentState = "normal";
            vm.unlockView();

            toolbar.show();
            toolbar.revert()
            actionMenu.hide();
            toolbar.revert();
            toolbar.enableAddNote();
            toolbar.addEventListener(ToolActionEvent.SELECTED, toolActionSelected);
        }

        override protected function deactivate():void {
            toolbar.removeEventListener(ToolActionEvent.SELECTED, toolActionSelected);
            vm.viewDeactivated();
            tagList.selectedItem = null;
            currentState = "inactive";
        }

        private function toolActionSelected(event:ToolActionEvent):void {
            switch (event.actionID) {
                case(ToolAction.GO_BACK) :
                    vm.goBack();
                    break;
                case(ToolAction.CREATE_NOTE) :
                    showAddLessonForm()
                    break;
            }
        }

        private function showAddLessonForm():void {
            if (!SimplePopup.curContent != addLessonForm) {
                addLessonForm.cancelBtn.addEventListener(MouseEvent.CLICK, cancelAddLessonClicked);
                addLessonForm.applyBtn.addEventListener(MouseEvent.CLICK, applyAddLessonClicked);
                SimplePopup.show(addLessonForm, true, null, AppColors.EDITOR_SHADOW, 0.5);
                addLessonForm.addLessonInput.setInputInFocus();
            }
        }

        private function hideAddLessonForm():void {
            SimplePopup.close();
            addLessonForm.addLessonInput.text = "";
            addLessonForm.cancelBtn.removeEventListener(MouseEvent.CLICK, cancelAddLessonClicked);
            addLessonForm.applyBtn.removeEventListener(MouseEvent.CLICK, applyAddLessonClicked);
        }

        private function cancelAddLessonClicked(event:MouseEvent):void {
            hideAddLessonForm();
        }

        private function applyAddLessonClicked(event:MouseEvent):void {
            var tag:Tag = vm.page.vocabulary.createTag();
            tag.name = addLessonForm.addLessonInput.text;
            var errKey:String = tag.validate();

            if (errKey) {
                addLessonForm.addLessonInput.isValidInput = false;
            }
            else {
                tag.store();
                hideAddLessonForm();
            }
        }

        private function tagSelectedHandler(event:Event):void {
            if (!isActive || !tagList.selectedItem) return;
            vm.showNoteList(tagList.selectedItem)
        }
        ]]></fx:Script>

    <core:states>
        <s:State name="inactive"/>
        <s:State name="normal"/>
    </core:states>

    <fx:Declarations>
        <components:AddLessonForm id="addLessonForm"
                                  top="{2*AppSizes.MENU_HEIGHT}"
                                  height="{Values.PT200}" width="100%"
                                  bgColor="{mainView.appBgColor}"/>
    </fx:Declarations>

    <scroller:CustomScroller width="100%" height="100%"
                             horizontalScrollPolicy="off"
                             hasFocusableChildren="false">
        <list2:SelectableDataGroup id="tagList"
                                   allowSelectLastItem="true"
                                   dataProvider="{vm.page.vocabulary.tagColl}"
                                   width="100%"
                                   itemRenderer="de.dittner.testmyself.ui.view.noteList.components.tag.LargeTagRenderer"
                                   selectedItemChange="tagSelectedHandler(event)">
            <list2:layout>
                <s:VerticalLayout gap="0" useVirtualLayout="true"/>
            </list2:layout>
        </list2:SelectableDataGroup>
    </scroller:CustomScroller>

</view:SmartView>
