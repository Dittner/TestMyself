<?xml version="1.0"?>
<test:TestableView xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:button="de.dittner.testmyself.ui.common.button.*"
                   xmlns:test="de.dittner.testmyself.ui.view.testing.components.*"
                   xmlns:note="de.dittner.testmyself.ui.common.note.*"
                   xmlns:components="de.dittner.testmyself.ui.view.form.components.*">

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.domain.note.DeWordArticle;
        import de.dittner.testmyself.model.domain.note.Word;
        import de.dittner.testmyself.ui.common.popup.SimplePopup;
        import de.dittner.testmyself.utils.Values;

        import flashx.textLayout.formats.TextAlign;

        private var isCorrectlyAnswered:Boolean = true;

        //--------------------------------------
        //  word
        //--------------------------------------
        public function get word():Word {
            return note as Word;
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        override protected function updateForm():void {
            clear();
            if (word)
                translateBoard.text = word ? word.description : "";
        }

        override protected function clear():void {
            translateBoard.text = "";
            showDetails = false;
            isCorrectlyAnswered = true;
            translateBoard.isOpened = false;
        }

        override protected function showTestMenu():void {
            actionMenu.showTestMenu(false, false, true);
        }

        private function optionsEnabled(showDetails:Boolean, options:String):Boolean {
            return showDetails && options;
        }

        private function onDerAnswered():void {
            if (isCorrectlyAnswered && word) {
                isCorrectlyAnswered = word.article == DeWordArticle.DER || word.article == DeWordArticle.DER_DIE || word.article == DeWordArticle.DER_DAS || word.article == DeWordArticle.DER_DIE_DAS;
                notifyAnswered();
            }
        }

        private function onDieAnswered():void {
            if (isCorrectlyAnswered && word) {
                isCorrectlyAnswered = word.article == DeWordArticle.DIE || word.article == DeWordArticle.DER_DIE || word.article == DeWordArticle.DIE_DAS || word.article == DeWordArticle.DER_DIE_DAS;
                notifyAnswered();
            }
        }

        private function onDasAnswered():void {
            if (isCorrectlyAnswered && word) {
                isCorrectlyAnswered = word.article == DeWordArticle.DAS || word.article == DeWordArticle.DER_DAS || word.article == DeWordArticle.DIE_DAS || word.article == DeWordArticle.DER_DIE_DAS;
                notifyAnswered();
            }
        }

        private function notifyAnswered():void {
            if (isCorrectlyAnswered) {
                notifyTrueAnswer();
                requestNextTask();
            }
            else {
                showInvalidMsg();
                notifyFalseAnswer();
                showDetails = true
            }
        }

        private function showInvalidMsg():void {
            if (invalidNotifier && !SimplePopup.isShownInPopup(invalidNotifier)) {
                SimplePopup.show(invalidNotifier, false, null, 0, 0);
                invalidNotifier.show();
            }
        }
        ]]></fx:Script>
    <fx:Declarations>
        <components:InvalidNotifier id="invalidNotifier"
                                    width="{Values.PT150}" height="{Values.PT50}"
                                    text="{resourceManager.getString('app', 'FALSE')}"
                                    bottom="{Values.PT100}" horizontalCenter="0"/>
    </fx:Declarations>

    <test:layout>
        <s:VerticalLayout gap="{Values.PT15}" paddingBottom="{Values.PT15}"/>
    </test:layout>

    <note:NoteLabel id="titleLbl"
                    width="100%"
                    note="{note}"
                    showDetails="{showDetails}"
                    textThickness="60"
                    textAlign="{TextAlign.CENTER}"
                    fontSize="{Values.PT30}"
                    verPadding="{Values.PT5}"
                    horPadding="{padding}"/>

    <test:TextPanel id="translateBoard"
                    width="100%" height="100%"
                    title="{resourceManager.getString('app', 'Translation')}"/>

    <s:VGroup width="100%" horizontalAlign="right"
              gap="{Values.PT15}" paddingRight="{Values.PT15}">
        <button:BlackButton id="derBtn"
                            width="{Values.PT100}" height="{Values.PT50}"
                            enabled="{isActivating}"
                            title="DER"
                            isBold="true"
                            click="onDerAnswered()"/>

        <button:RedButton id="dieBtn"
                          width="{Values.PT100}" height="{Values.PT50}"
                          enabled="{isActivating}"
                          title="DIE"
                          isBold="true"
                          click="onDieAnswered()"/>

        <button:YellowButton id="dasBtn"
                             width="{Values.PT100}" height="{Values.PT50}"
                             enabled="{isActivating}"
                             title="DAS"
                             isBold="true"
                             click="onDasAnswered()"/>
    </s:VGroup>
</test:TestableView>