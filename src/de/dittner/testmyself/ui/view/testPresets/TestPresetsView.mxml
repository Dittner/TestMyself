<?xml version="1.0"?>
<view:SmartView xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:list="de.dittner.testmyself.ui.common.list.*"
                xmlns:button="de.dittner.testmyself.ui.common.button.*"
                xmlns:tile="de.dittner.testmyself.ui.common.tile.*"
                xmlns:scroller="de.dittner.testmyself.ui.common.scroller.*"
                xmlns:view="de.dittner.testmyself.ui.common.view.*">
    <fx:Metadata>
        [Event(name="startTest", type="flash.events.Event")]
        [Event(name="showStatistics", type="flash.events.Event")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.domain.tag.Tag;
        import de.dittner.testmyself.model.domain.test.TestTaskPriority;
        import de.dittner.testmyself.ui.common.menu.ToolAction;
        import de.dittner.testmyself.ui.common.menu.ToolActionEvent;
        import de.dittner.testmyself.ui.common.tile.TileID;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.FontName;
        import de.dittner.testmyself.ui.common.view.ViewModelFactory;
        import de.dittner.testmyself.utils.Values;

        private static const PAD:int = Values.PT15;

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        [Bindable]
        public var vm:TestPresetsVM;

        override protected function activating():void {
            vm = ViewModelFactory.instance.testPresetsVM;
            vm.lockView();
            vm.viewActivated(viewInfo);
        }

        override protected function activate():void {
            actionMenu.hide();
            toolbar.show();
            toolbar.revert();
            toolbar.enableGoBack();
            toolbar.addEventListener(ToolActionEvent.SELECTED, actionSelectedHandler);
            vm.unlockView();
        }

        private function actionSelectedHandler(event:ToolActionEvent):void {
            if (!isActive) return;
            switch (event.actionID) {
                case(ToolAction.GO_BACK) :
                    vm.goBack();
                    break;
            }
        }

        override protected function deactivate():void {
            vm.viewDeactivated();
            toolbar.removeEventListener(ToolActionEvent.SELECTED, actionSelectedHandler);
        }

        private function startTestingBtnClickHandler(event:MouseEvent):void {
            vm.startTesting(getComplexity(), tagsList.selectedItem as Tag)
        }

        private function showStatisticsBtnClickHandler(event:MouseEvent):void {
            vm.showStatistics(getComplexity(), tagsList.selectedItem as Tag)
        }

        private function getComplexity():uint {
            if (middleComplexityRadioBtn.selected) return TestTaskPriority.MIDDLE;
            else if (lowComplexityRadioBtn.selected) return TestTaskPriority.LOW;
            else return TestTaskPriority.HIGH;
        }
        ]]></fx:Script>

    <s:VGroup width="100%" height="100%" maxWidth="{Values.PT798}" horizontalCenter="0"
              gap="{Values.PT15}"
              paddingLeft="{PAD}" paddingRight="{PAD}"
              paddingTop="{PAD}" paddingBottom="{PAD}">
        <s:Label id="titleLbl"
                 text="{vm.testPage.vocabulary.title.toUpperCase() + '. ' + vm.testPage.test.title}"
                 fontFamily="{FontName.MYRIAD}"
                 fontWeight="bold"
                 fontSize="{Values.PT20}"
                 width="100%"
                 color="{AppColors.BLACK}"/>

        <s:Group width="100%" height="100%">
            <tile:TileImage width="100%" top="{Values.PT20}" bottom="0"
                            actualTileID="{TileID.WHITE_BG_ICON}"
                            use9Scale="true"/>

            <s:Label width="100%"
                     fontSize="{Values.PT16}"
                     fontFamily="{FontName.MYRIAD}"
                     color="{AppColors.BLACK}"
                     text="{resourceManager.getString('app', 'ChooseTagToFilterTasks')}"/>

            <scroller:CustomScroller width="100%"
                                     top="{Values.PT20}" bottom="0"
                                     horizontalScrollPolicy="off"
                                     hasFocusableChildren="false">
                <list:SelectableDataGroup id="tagsList"
                                          deselectEnabled="true"
                                          selectedItem="@{vm.testPage.selectedTag}"
                                          width="100%"
                                          height="100%"
                                          dataProvider="{vm.testPage.vocabulary.tagColl}"
                                          itemRenderer="de.dittner.testmyself.ui.view.noteList.components.tag.TagRenderer">
                    <list:layout>
                        <s:VerticalLayout gap="0" useVirtualLayout="false"/>
                    </list:layout>
                </list:SelectableDataGroup>
            </scroller:CustomScroller>
        </s:Group>

        <s:Label width="100%"
                 fontSize="{Values.PT16}"
                 fontFamily="{FontName.MYRIAD}"
                 color="{AppColors.BLACK}"
                 text="{resourceManager.getString('app', 'FilterOfTestTasks')}"/>

        <s:HGroup id="radioBar"
                  width="100%" gap="0">
            <tile:TileRadioButton id="highComplexityRadioBtn"
                                  radioGroup="{radioBar}"
                                  selected="true"
                                  title="{resourceManager.getString('app', 'UnsortedTasks')}"/>

            <s:Spacer width="100%"/>

            <tile:TileRadioButton id="middleComplexityRadioBtn"
                                  radioGroup="{radioBar}"
                                  title="{resourceManager.getString('app', 'DifficultTasks')}"/>

            <s:Spacer width="100%"/>

            <tile:TileRadioButton id="lowComplexityRadioBtn"
                                  radioGroup="{radioBar}"
                                  title="{resourceManager.getString('app', 'EasyTasks')}"/>
        </s:HGroup>

        <s:Group width="100%">

            <button:BlackButton id="showStatisticsBtn"
                                width="{Values.PT250}"
                                title="{resourceManager.getString('app', 'TestResults')}"
                                click="showStatisticsBtnClickHandler(event)"/>

            <button:BlackButton id="startTestingBtn"
                                width="{Values.PT250}"
                                right="0"
                                title="{resourceManager.getString('app', 'StartTest')}"
                                click="startTestingBtnClickHandler(event)"/>
        </s:Group>
    </s:VGroup>

</view:SmartView>
