<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:list="de.dittner.testmyself.ui.common.list.*"
         xmlns:button="de.dittner.testmyself.ui.common.button.*"
         xmlns:form="de.dittner.testmyself.ui.view.noteList.components.form.*">
    <fx:Metadata>
        [Event(name="selectedThemeChanged", type="flash.events.Event")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.domain.theme.Theme;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.ui.view.noteList.components.form.EditorBg;

        import mx.collections.ArrayCollection;

        private static const FOOTER_HEI:uint = AppSizes.EDITOR_FOOTER_HEIGHT;

        //--------------------------------------
        //  themes
        //--------------------------------------
        private var _themes:ArrayCollection;
        [Bindable("themesChanged")]
        public function get themes():ArrayCollection {return _themes;}
        public function set themes(value:ArrayCollection):void {
            if (_themes != value) {
                _themes = value;
                dispatchEvent(new Event("themesChanged"));
            }
        }

        //--------------------------------------
        //  selectedTheme
        //--------------------------------------
        private var _selectedTheme:Theme;
        [Bindable("selectedThemeChanged")]
        public function get selectedTheme():Theme {return _selectedTheme;}
        public function set selectedTheme(value:Theme):void {
            if (_selectedTheme != value) {
                _selectedTheme = value;
                dispatchEvent(new Event("selectedThemeChanged"));
            }
        }

        public function close():void {
            themes = null;
        }

        //--------------------------------------
        //  hasThemes
        //--------------------------------------

        [Bindable("themesChanged")]
        public function get hasThemes():Boolean {return themes && themes.length > 0;}
        ]]></fx:Script>

    <form:EditorBg width="100%"
                   height="100%"
                   title="Filtern"
                   mode="filter"/>

    <s:Rect left="{EditorBg.BORDER_THICKNESS}"
            right="{EditorBg.BORDER_THICKNESS}"
            bottom="{EditorBg.BORDER_THICKNESS}"
            height="{FOOTER_HEI}">
        <s:fill>
            <s:SolidColor color="{AppColors.SCREEN_HEADER_BG}"/>
        </s:fill>
    </s:Rect>

    <s:Scroller left="{EditorBg.BORDER_THICKNESS}"
                right="{EditorBg.BORDER_THICKNESS}"
                top="{EditorBg.HEADER_HEIGHT}"
                bottom="{FOOTER_HEI}">
        <list:SelectableDataGroup id="themesList"
                                  selectedItem="{selectedTheme}"
                                  width="100%" height="100%"
                                  dataProvider="{themes}"
                                  deselectEnabled="true"
                                  itemRenderer="de.dittner.testmyself.ui.view.noteList.components.theme.ThemeItemRenderer">
            <list:layout>
                <s:VerticalLayout gap="0" useVirtualLayout="false"/>
            </list:layout>
        </list:SelectableDataGroup>
    </s:Scroller>

    <s:HGroup width="100%" height="{FOOTER_HEI}"
              bottom="0"
              paddingLeft="15" paddingRight="15" paddingBottom="{EditorBg.BORDER_THICKNESS}"
              gap="15" verticalAlign="middle">
        <button:BlackButton id="applyBtn"
                            width="100%"
                            label="SchlieÃŸen"
                            click="visible = false; selectedTheme = themesList.selectedItem as Theme"/>
    </s:HGroup>

    <s:Label text="Kein Thema"
             visible="{!hasThemes}"
             fontSize="14"
             color="{AppColors.TEXT}"
             verticalCenter="0" horizontalCenter="0"/>

</s:Group>
