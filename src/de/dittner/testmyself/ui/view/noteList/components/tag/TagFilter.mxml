<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:list="de.dittner.testmyself.ui.common.list.*"
         xmlns:scroller="de.dittner.testmyself.ui.common.scroller.*"
         xmlns:form="de.dittner.testmyself.ui.view.noteList.components.form.*"
         xmlns:menu="de.dittner.testmyself.ui.common.menu.*"
         xmlns:common="de.dittner.testmyself.ui.common.*">
    <fx:Metadata>
        [Event(name="selectedTagChanged", type="flash.events.Event")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.domain.tag.Tag;
        import de.dittner.testmyself.ui.common.popup.SimplePopup;
        import de.dittner.testmyself.ui.common.tile.TileID;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.ui.view.form.components.FormMode;
        import de.dittner.testmyself.utils.Values;

        import mx.collections.ArrayCollection;

        //--------------------------------------
        //  tags
        //--------------------------------------
        private var _tags:ArrayCollection;
        [Bindable("tagsChanged")]
        public function get tags():ArrayCollection {return _tags;}
        public function set tags(value:ArrayCollection):void {
            if (_tags != value) {
                _tags = value;
                dispatchEvent(new Event("tagsChanged"));
            }
        }

        //--------------------------------------
        //  selectedTag
        //--------------------------------------
        private var _selectedTag:Tag;
        [Bindable("selectedTagChanged")]
        public function get selectedTag():Tag {return _selectedTag;}
        public function set selectedTag(value:Tag):void {
            if (_selectedTag != value) {
                _selectedTag = value;
                dispatchEvent(new Event("selectedTagChanged"));
            }
        }

        //--------------------------------------
        //  bgColor
        //--------------------------------------
        private var _bgColor:uint;
        [Bindable("bgColorChanged")]
        public function get bgColor():uint {return _bgColor;}
        public function set bgColor(value:uint):void {
            if (_bgColor != value) {
                _bgColor = value;
                dispatchEvent(new Event("bgColorChanged"));
            }
        }

        //--------------------------------------
        //  hasTags
        //--------------------------------------

        [Bindable("tagsChanged")]
        public function get hasTags():Boolean {return tags && tags.length > 0;}
        ]]></fx:Script>

    <form:EditorBG width="100%" height="100%"
                   bgColor="{bgColor}"
                   title="{resourceManager.getString('app', 'Filter')}"
                   mode="{FormMode.FILTER}"/>

    <scroller:CustomScroller width="100%"
                             top="{EditorBG.HEADER_HEIGHT}"
                             bottom="0">
        <list:SelectableDataGroup id="tagList"
                                  dataProvider="{tags}"
                                  selectedItem="@{selectedTag}"
                                  width="100%" height="100%"
                                  deselectEnabled="true"
                                  itemRenderer="de.dittner.testmyself.ui.view.noteList.components.tag.LargeTagRenderer">
            <list:layout>
                <s:VerticalLayout gap="0" useVirtualLayout="false"/>
            </list:layout>
        </list:SelectableDataGroup>
    </scroller:CustomScroller>

    <common:BG percentWidth="100" height="{AppSizes.MENU_HEIGHT}" fillColor="0" bottom="{-AppSizes.MENU_HEIGHT}"/>

    <menu:MenuButton id="cancelBtn"
                     upTileID="{TileID.MENU_FORM_CANCEL_ICON}"
                     disabledTileID="{TileID.MENU_FORM_CANCEL_RED_ICON}"
                     enabled="{enabled}"
                     textColor="0xffFFff"
                     fontSize="{Values.PT18}"
                     paddingLeft="{Values.PT40}"
                     paddingRight="0"
                     horizontalCenter="0"
                     bottom="{-AppSizes.MENU_HEIGHT}"
                     title="{resourceManager.getString('app', 'Cancel')}"
                     click="SimplePopup.close()"/>

    <s:Label text="{resourceManager.getString('app', 'NoTags')}"
             visible="{!hasTags}"
             fontSize="{Values.PT14}"
             color="{AppColors.TEXT_LIGHT}"
             verticalCenter="0" horizontalCenter="0"/>

</s:Group>
