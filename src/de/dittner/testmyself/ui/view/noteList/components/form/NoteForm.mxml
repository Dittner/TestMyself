<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:audio="de.dittner.testmyself.ui.common.audio.*"
         xmlns:input="de.dittner.testmyself.ui.common.input.*"
         xmlns:list="de.dittner.testmyself.ui.common.list.*"
         xmlns:button="de.dittner.testmyself.ui.common.button.*"
         xmlns:listBox="de.dittner.testmyself.ui.view.noteList.components.form.articleList.*"
         xmlns:form2="de.dittner.testmyself.ui.view.noteList.components.form.*"
         currentState="normal">

    <fx:Script><![CDATA[
        import de.dittner.async.AsyncOperation;
        import de.dittner.async.IAsyncOperation;
        import de.dittner.async.utils.invalidateOf;
        import de.dittner.testmyself.model.Device;
        import de.dittner.testmyself.model.domain.note.DeVerb;
        import de.dittner.testmyself.model.domain.note.DeWord;
        import de.dittner.testmyself.model.domain.note.DeWordArticle;
        import de.dittner.testmyself.model.domain.note.Note;
        import de.dittner.testmyself.model.domain.tag.Tag;
        import de.dittner.testmyself.model.domain.vocabulary.VocabularyID;
        import de.dittner.testmyself.ui.common.menu.IMenuBoard;
        import de.dittner.testmyself.ui.common.menu.MenuBoardEvent;
        import de.dittner.testmyself.ui.common.menu.MenuID;
        import de.dittner.testmyself.ui.common.popup.SimplePopup;
        import de.dittner.testmyself.ui.common.renderer.AddedTagItemRenderer;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.NoteFormUtils;
        import de.dittner.testmyself.ui.view.noteList.components.tag.TagRenderer;

        import mx.collections.ArrayCollection;

        import spark.components.supportClasses.TextInputOperation;
        import spark.events.TextOperationEvent;

        private static const OPTIONS_TEMPLATES:Array = ["-(e)s, -e", "=, -en", "=, -n", "-s, =", "-s, sg", "=, sg"];
        protected const HGAP:uint = 10;
        protected const VGAP:uint = 5;
        private var curOperation:IAsyncOperation;

        //--------------------------------------
        //  mode
        //--------------------------------------
        private var _mode:String = "";
        [Bindable("modeChanged")]
        public function get mode():String {return _mode;}
        private function setMode(value:String):void {
            if (_mode != value) {
                _mode = value;
                dispatchEvent(new Event("modeChanged"));
            }
        }

        //--------------------------------------
        //  note
        //--------------------------------------
        private var _note:Note;
        [Bindable("noteChanged")]
        public function get note():Note {return _note;}
        private function setNote(value:Note):void {
            if (_note != value) {
                _note = value;
                dispatchEvent(new Event("noteChanged"));
            }
        }

        //--------------------------------------
        // isCreateMode
        //--------------------------------------
        [Bindable("modeChanged")]
        public function get isAddMode():Boolean {return mode == "add";}

        //--------------------------------------
        // isEditMode
        //--------------------------------------
        [Bindable("modeChanged")]
        public function get isEditMode():Boolean {return mode == "edit";}

        //--------------------------------------
        // isRemoveMode
        //--------------------------------------
        [Bindable("modeChanged")]
        public function get isRemoveMode():Boolean {return mode == "remove";}

        //--------------------------------------
        //  title
        //--------------------------------------
        [Bindable("modeChanged")]
        public function get title():String {
            if (isAddMode) return "Hinzufügen";
            else if (isEditMode) return "Bearbeiten";
            else return "Entfernen";
        }

        //--------------------------------------
        //  selectedFilter
        //--------------------------------------
        private var _selectedFilter:Tag;
        [Bindable("selectedFilterChanged")]
        public function get selectedFilter():Tag {return _selectedFilter;}
        public function set selectedFilter(value:Tag):void {
            if (_selectedFilter != value) {
                _selectedFilter = value;
                dispatchEvent(new Event("selectedFilterChanged"));
            }
        }

        //--------------------------------------
        //  hasNetworkConnection
        //--------------------------------------
        private var _hasNetworkConnection:Boolean = false;
        [Bindable("hasNetworkConnectionChanged")]
        public function get hasNetworkConnection():Boolean {return _hasNetworkConnection;}
        public function set hasNetworkConnection(value:Boolean):void {
            if (_hasNetworkConnection != value) {
                _hasNetworkConnection = value;
                dispatchEvent(new Event("hasNetworkConnectionChanged"));
            }
        }

        //--------------------------------------
        //  menu
        //--------------------------------------
        private var _menu:IMenuBoard;
        [Bindable("menuChanged")]
        public function get menu():IMenuBoard {return _menu;}
        public function set menu(value:IMenuBoard):void {
            if (_menu != value) {
                _menu = value;
                dispatchEvent(new Event("menuChanged"));
            }
        }

        //--------------------------------------
        //  selectedMenu
        //--------------------------------------
        private function menuClicked(e:MenuBoardEvent):void {
            if (e.menuID == MenuID.APPLY) apply();
            else if (e.menuID == MenuID.CANCEL) cancel();
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        public function add(n:Note):IAsyncOperation {
            curOperation = new AsyncOperation();
            setNote(n);
            updateState();
            setMode("add");
            tagList.dataProvider = note.vocabulary.tagColl;
            showSelectedTags(note.tagIDs);
            dispatchEvent(new Event("taskChanged"));
            invalidateOf(focusTextInput);
            menu.showFormMenu();
            menu.addEventListener(MenuBoardEvent.CLICKED, menuClicked);
            return curOperation;
        }

        public function edit(n:Note):IAsyncOperation {
            curOperation = new AsyncOperation();
            setNote(n);
            updateState();
            setMode("edit");

            if (note is DeWord) {
                var word:DeWord = note as DeWord;
                articleBox.selectedItem = word.article;
                wordInput.text = word.title;
                wordOptionsInput.text = word.declension;
            }
            else if (note is DeVerb) {
                var verb:DeVerb = note as DeVerb;
                verbInputsForm.infinitive = verb.title;
                verbInputsForm.present = verb.present;
                verbInputsForm.past = verb.past;
                verbInputsForm.perfect = verb.perfect;
            }
            else {
                titleArea.text = note.title;
            }

            descriptionArea.text = note.description;
            examplesForm.exampleColl = note.exampleColl;
            tagList.dataProvider = note.vocabulary.tagColl;
            showSelectedTags(note.tagIDs);

            if (note.hasAudio) {
                if (note.audioComment.isEmpty)
                    note.loadAudioComment().addCompleteCallback(updateAudioComment);
                else
                    updateAudioComment();
            }

            invalidateDisplayList();
            invalidateOf(focusTextInput);
            dispatchEvent(new Event("taskChanged"));
            menu.showFormMenu();
            menu.addEventListener(MenuBoardEvent.CLICKED, menuClicked);
            return curOperation;
        }

        private function updateAudioComment(op:IAsyncOperation = null):void {
            audioRecorder.setComment(note.audioComment);
        }

        private function showSelectedTags(noteTagIDs:Array):void {
            if ((noteTagIDs.length == 0 && !selectedFilter) || !tagList.dataProvider || tagList.dataProvider.length == 0) return;

            var isSelectedTagHash:Object = {};
            var selectedItems:Vector.<Object> = new Vector.<Object>();
            for each(var noteTagID:int in noteTagIDs)
                isSelectedTagHash[noteTagID] = true;
            if (selectedFilter)
                isSelectedTagHash[selectedFilter.id] = true;
            for each(var tag:Tag in tagList.dataProvider)
                if (isSelectedTagHash[tag.id]) selectedItems.push(tag);
            tagList.selectedItems = selectedItems;
        }

        private function getSelectedTagIDs():Array {
            var res:Array = [];
            for each(var tag:Tag in tagList.selectedItems)
                res.push(tag.id);
            return res;
        }

        public function remove(n:Note):IAsyncOperation {
            curOperation = new AsyncOperation();
            setNote(n);
            updateState();
            setMode("remove");
            removeNoteTitleLbl.text = '«' + note.title + '»';
            menu.showFormMenu();
            menu.addEventListener(MenuBoardEvent.CLICKED, menuClicked);
            return curOperation;
        }

        private function updateState():void {
            if (note.isExample)
                currentState = "normal";
            else if (note.vocabulary.id == VocabularyID.DE_WORD)
                currentState = "word";
            else if (note.vocabulary.id == VocabularyID.DE_VERB)
                currentState = "verb";
            else if (note.vocabulary.id == VocabularyID.DE_LESSON)
                currentState = "lesson";
            else
                currentState = "normal";
        }

        private function clear():void {
            articleBox.selectedItem = "";
            wordInput.text = "";
            wordOptionsInput.text = "";
            descriptionArea.text = "";
            addTagInput.text = "";
            titleArea.text = "";
            audioRecorder.clear();
            examplesForm.clear();
            tagList.dataProvider = null;
            verbInputsForm.clear();
            wordInput.isValidInput = true;
            titleArea.isValidInput = true;
        }

        private function focusTextInput():void {
            if (stage && Device.isDesktop)
                stage.focus = currentState == "lesson" || currentState == "normal" ? titleArea.area : wordInput;
        }

        private function get isOpen():Boolean {
            return isAddMode || isEditMode || isRemoveMode;
        }

        private function cancel():void {
            if (isEditMode) {
                note.revertChanges();
            }
            curOperation.dispatchSuccess(FormOperationResult.CANCEL);
            close();
        }

        private function close():void {
            if (isOpen) {
                clear();
                setMode("");
                menu.hideFormMenu();
                menu.removeEventListener(MenuBoardEvent.CLICKED, menuClicked);
            }
        }

        private function apply():void {
            if (audioRecorder.isRecording) audioRecorder.clear();

            if (isAddMode || isEditMode) {
                fillNote();
                var errKey:String = note.validate();
                if (errKey) {
                    showInvalidMsg(NoteValidationErrorKey.keyToString(errKey, note.vocabulary.lang.id));
                }
                else {
                    storeChanges();
                    curOperation.dispatchSuccess(FormOperationResult.OK);
                    close();
                }
            }
            else {
                storeChanges();
                curOperation.dispatchSuccess(FormOperationResult.OK);
                close();
            }
        }

        private function correct():void {
            if (currentState == "word" || currentState == "verb") {
                wordOptionsInput.text = NoteFormUtils.removeSpaces(wordOptionsInput.text);
                wordInput.text = NoteFormUtils.removeSpaces(wordInput.text);
                descriptionArea.text = NoteFormUtils.formatText(descriptionArea.text);
            }
            else {
                titleArea.text = NoteFormUtils.capitalizeText(titleArea.text);
                descriptionArea.text = NoteFormUtils.capitalizeText(descriptionArea.text);
            }
        }

        private function fillNote():void {
            if (note is DeWord) {
                var word:DeWord = note as DeWord;
                word.article = articleBox.selectedItem;
                word.title = wordInput.text;
                word.description = descriptionArea.text;
                word.declension = wordOptionsInput.text;
                word.audioComment = audioRecorder.getComment();
                word.exampleColl = examplesForm.exampleColl;
                word.tagIDs = getSelectedTagIDs();
            }
            else if (note is DeVerb) {
                var verb:DeVerb = note as DeVerb;
                verb.title = verbInputsForm.infinitiveInput.text;
                verb.description = descriptionArea.text;
                verb.audioComment = audioRecorder.getComment();
                verb.present = verbInputsForm.presentInput.text;
                verb.past = verbInputsForm.pastInput.text;
                verb.perfect = verbInputsForm.perfectInput.text;
                verb.exampleColl = examplesForm.exampleColl;
                verb.tagIDs = getSelectedTagIDs();
            }
            else {
                note.title = titleArea.text;
                note.description = descriptionArea.text;
                note.audioComment = audioRecorder.getComment();
                if (!note.isExample)
                    note.tagIDs = getSelectedTagIDs();
            }
        }

        private function storeChanges():void {
            if (isAddMode || isEditMode)
                note.store();
            else if (isRemoveMode)
                note.remove();
        }

        private function tagsRendererFunc(item:Object):IFactory {
            var tag:Tag = item as Tag;
            if (tag.id == -1) return new ClassFactory(AddedTagItemRenderer);
            else return new ClassFactory(TagRenderer);
        }

        private function wordValidationHandler(event:TextOperationEvent):void {
            if (event.operation is TextInputOperation) {
                var inputOperation:TextInputOperation = event.operation as TextInputOperation;
                var regexp:RegExp = NoteFormUtils.LETTERS;
                var match:Object = regexp.exec(inputOperation.text);
                if (match == null) event.preventDefault();
            }
        }

        private function addTagBtnClickHandler(event:MouseEvent):void {
            if (!addTagInput.text) return;

            var tag:Tag = note.vocabulary.createTag();
            tag.name = addTagInput.text;
            var errKey:String = tag.validate();
            if (errKey) {
                showInvalidMsg(NoteValidationErrorKey.keyToString(errKey, note.vocabulary.lang.id));
            }
            else {
                var op:IAsyncOperation = tag.store();
                op.addCompleteCallback(newTagStored);

                var selectedItems:Vector.<Object> = tagList.selectedItems || new Vector.<Object>();
                selectedItems.push(tag);
                if (!tagList.dataProvider) tagList.dataProvider = new ArrayCollection();
                tagList.dataProvider.addItemAt(tag, 0);
                tagList.selectedItems = selectedItems;
                addTagInput.text = "";
            }
        }

        private function newTagStored(op:IAsyncOperation):void {
            (tagList.dataProvider as ArrayCollection).refresh();
        }

        private function getRemoveNotification(note:Note):String {
            var noteType:String;
            if (!note) noteType = "diese Note";
            else if (note is DeWord) noteType = "dieses Wort";
            else if (note is DeVerb) noteType = "dieses Verb";
            else if (note.isExample) noteType = "dieses Beispiel";
            else noteType = "diese Note";
            return "Sind Sie sicher, dass Sie " + noteType + " entfernen möchten?";
        }

        private function validateInputText(text:String):void {
            note.title = text;
            var hasDuplicateErr:Boolean = note.hasDuplicate();
            wordInput.isValidInput = !hasDuplicateErr;
            titleArea.isValidInput = !hasDuplicateErr;
            verbInputsForm.infinitiveInput.isValidInput = !hasDuplicateErr;
        }

        private function getNoteTitle(connection:Boolean, wordTitle:String, verbTitle:String):String {
            var title:String = note is DeWord ? wordTitle : note is DeVerb ? verbTitle : "";
            return connection && title ? title : "";
        }

        private function showInvalidMsg(msg:String):void {
            if (invalidNotifier && !SimplePopup.isShownInPopup(invalidNotifier)) {
                invalidNotifier.text = msg;
                SimplePopup.show(invalidNotifier, false);
                invalidNotifier.show();
            }
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="disabled"/>
        <s:State name="normal"/>
        <s:State name="word"/>
        <s:State name="verb"/>
        <s:State name="lesson"/>
    </s:states>

    <fx:Declarations>
        <form2:InvalidNotifier id="invalidNotifier"
                               width="500" height="150"
                               verticalCenter="0" horizontalCenter="0"/>
    </fx:Declarations>

    <form2:EditorBg width="100%"
                    height="100%"
                    title="{title}"
                    mode="{mode}"/>

    <button:WhiteButton id="formatBtn"
                        width="250" right="15" top="5"
                        label="Formatieren"
                        visible="{!isRemoveMode}"
                        click="correct()"/>

    <!--ADD EDIT MODE-->

    <s:HGroup width="100%" top="50" bottom="20" gap="{HGAP}" paddingLeft="15" paddingRight="15"
              visible="{!isRemoveMode}" includeInLayout="{!isRemoveMode}">
        <s:VGroup width="100%" height="100%" gap="{VGAP}">
            <s:HGroup width="100%" height="100%" gap="{HGAP}">
                <listBox:ListBox id="articleBox"
                                 verticalScrollPolicy="off"
                                 requireSelection="true"
                                 visible="false" includeInLayout="false"
                                 visible.word="true" includeInLayout.word="true"
                                 visible.verb="false" includeInLayout.verb="false"
                                 width="110"
                                 itemRenderer="de.dittner.testmyself.ui.view.noteList.components.form.articleList.ArticleItemRenderer"
                                 skinClass="de.dittner.testmyself.ui.view.noteList.components.form.articleList.ListBoxSkin"
                                 dataProvider="{new ArrayCollection(DeWordArticle.ARTICLES)}"/>

                <s:VGroup width="100%" height="100%" gap="{VGAP}">
                    <input:TextAreaForm id="titleArea"
                                        fontSize.word="18"
                                        fontSize.verb="18"
                                        fontSize="22"
                                        visible="true" includeInLayout="true"
                                        visible.word="false" includeInLayout.word="false"
                                        visible.verb="false" includeInLayout.verb="false"
                                        width="100%" height="100%"
                                        title="Deutschsatz"
                                        maxChars="{Device.MAX_TEXT_LENGTH}"
                                        change="validateInputText(titleArea.text)"/>

                    <input:TextInputForm id="wordInput"
                                         visible="false" includeInLayout="false"
                                         visible.word="true" includeInLayout.word="true"
                                         width="100%"
                                         maxChars="{Device.MAX_WORD_LENGTH}"
                                         changing="wordValidationHandler(event)"
                                         change="validateInputText(wordInput.text)"
                                         title="Deutschtwort"/>

                    <s:HGroup width="100%" height="100%" gap="{HGAP}">
                        <form2:VerbInputsForm id="verbInputsForm"
                                              width="100%" height="100%"
                                              visible="false" includeInLayout="false"
                                              visible.word="false" includeInLayout.word="false"
                                              visible.verb="true" includeInLayout.verb="true"
                                              change="validateInputText(verbInputsForm.infinitiveInput.text)"/>

                        <input:TextAreaForm id="descriptionArea"
                                            width="100%" height="100%"
                                            maxChars="{Device.MAX_TEXT_LENGTH}"
                                            title="Übersetzung"
                                            fontSize.word="18"
                                            fontSize.verb="18"
                                            fontSize="22"/>
                    </s:HGroup>

                </s:VGroup>

            </s:HGroup>

            <form2:ExamplesForm id="examplesForm"
                                parentNote="{note}"
                                width="100%" height="100%"
                                visible="false" includeInLayout="false"
                                visible.word="true" includeInLayout.word="true"
                                visible.verb="true" includeInLayout.verb="true"
                                mainForm="{this}"/>

            <s:Group width="100%" height="72">
                <audio:AudioRecorder id="audioRecorder"
                                     noteTitleToLoadMp3="{getNoteTitle(hasNetworkConnection, wordInput.text, verbInputsForm.infinitiveInput.text)}"
                                     height="72" left="118" left.lesson="0" left.normal="0" right="0"
                                     loadRemoteMp3WithError="showInvalidMsg('Не удалось загрузить mp3-файл из-за ошибки!')"/>
            </s:Group>
        </s:VGroup>

        <s:VGroup width="250" height="100%" gap="{VGAP}"
                  visible.normal="false" includeInLayout.normal="false"
                  visible.lesson="{!isAddMode}" includeInLayout.lesson="{!isAddMode}"
                  visible.word="true" includeInLayout.word="true"
                  visible.verb="true" includeInLayout.verb="true">
            <input:DropdownInputForm id="wordOptionsInput"
                                     visible="false" includeInLayout="false"
                                     visible.word="true" includeInLayout.word="true"
                                     width="100%"
                                     inputTemplateColl="{new ArrayCollection(OPTIONS_TEMPLATES)}"
                                     title="Zusätzliche Daten"/>

            <list:ListForm id="tagList"
                           depth="10"
                           width="100%" height="100%"
                           title="Tagsliste"
                           itemRendererFunction="tagsRendererFunc"
                           allowMultipleSelection.lesson="false"
                           allowMultipleSelection="true">
                <list:layout>
                    <s:VerticalLayout gap="0" useVirtualLayout="false"/>
                </list:layout>
            </list:ListForm>

            <s:HGroup width="100%" height="72" gap="0" verticalAlign="bottom"
                      visible.lesson="false" includeInLayout.lesson="false">
                <input:TextInputForm id="addTagInput"
                                     width="100%"
                                     maxChars="{Device.MAX_TAG_NAME_LENGTH}"
                                     title="Neuer Tagsname"/>

                <button:BitmapButton id="addTagBtn"
                                     description="Neues Tag hinzufügen"
                                     upImage="@Embed(source='/assets/button/add_element_btn_up.png')"
                                     downImage="@Embed(source='/assets/button/add_element_btn_down.png')"
                                     click="addTagBtnClickHandler(event)"/>
            </s:HGroup>
        </s:VGroup>

    </s:HGroup>

    <!--REMOVE MODE-->

    <s:Label id="removeTitleLbl"
             visible="{isRemoveMode}"
             width="100%"
             textAlign="center"
             verticalCenter="-100"
             color="{AppColors.TEXT_BLACK}"
             fontSize="24"
             text="{getRemoveNotification(note)}"/>

    <s:Label id="removeNoteTitleLbl"
             visible="{isRemoveMode}"
             width="100%"
             verticalCenter="0"
             color="{AppColors.TEXT_BLACK}"
             fontSize="18"
             fontWeight="bold"
             textAlign="center" verticalAlign="middle"/>

</s:Group>
