<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:audio="de.dittner.testmyself.ui.common.audio.*"
         xmlns:input="de.dittner.testmyself.ui.common.input.*"
         xmlns:list="de.dittner.testmyself.ui.common.list.*"
         xmlns:button="de.dittner.testmyself.ui.common.button.*"
         xmlns:form2="de.dittner.testmyself.ui.view.noteList.components.form.*"
         xmlns:tile="de.dittner.testmyself.ui.common.tile.*"
         xmlns:note="de.dittner.testmyself.ui.common.note.*"
         currentState="normal">

    <fx:Script><![CDATA[
        import de.dittner.async.AsyncOperation;
        import de.dittner.async.IAsyncOperation;
        import de.dittner.async.utils.invalidateOf;
        import de.dittner.testmyself.model.Device;
        import de.dittner.testmyself.model.domain.note.DeWordArticle;
        import de.dittner.testmyself.model.domain.note.IrregularVerb;
        import de.dittner.testmyself.model.domain.note.Note;
        import de.dittner.testmyself.model.domain.note.Word;
        import de.dittner.testmyself.model.domain.tag.Tag;
        import de.dittner.testmyself.model.domain.vocabulary.VocabularyID;
        import de.dittner.testmyself.ui.common.menu.IActionMenu;
        import de.dittner.testmyself.ui.common.menu.ToolAction;
        import de.dittner.testmyself.ui.common.menu.ToolActionEvent;
        import de.dittner.testmyself.ui.common.popup.SimplePopup;
        import de.dittner.testmyself.ui.common.tile.TileID;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.NoteFormUtils;
        import de.dittner.testmyself.utils.Values;

        import mx.collections.ArrayCollection;

        import spark.components.supportClasses.TextInputOperation;
        import spark.events.TextOperationEvent;

        private static const OPTIONS_TEMPLATES:Array = ["-(e)s, -e", "-(e)s, -er", "-(e)s, sg", "-en, -en", "-n, -n", "-s, -e", "-s, -s", "-ses, -se", "-s, =", "-s, sg", "=, -en", "=, -n", "=, -se", "=, sg", "sub", "pl"];
        protected const HGAP:uint = Values.PT10;
        protected const VGAP:uint = Values.PT5;
        private var curOperation:IAsyncOperation;

        //--------------------------------------
        //  mode
        //--------------------------------------
        private var _mode:String = "";
        [Bindable("modeChanged")]
        public function get mode():String {return _mode;}
        private function setMode(value:String):void {
            if (_mode != value) {
                _mode = value;
                dispatchEvent(new Event("modeChanged"));
            }
        }

        //--------------------------------------
        //  note
        //--------------------------------------
        private var _note:Note;
        [Bindable("noteChanged")]
        public function get note():Note {return _note;}
        private function setNote(value:Note):void {
            if (_note != value) {
                _note = value;
                dispatchEvent(new Event("noteChanged"));
            }
        }

        //--------------------------------------
        // isCreateMode
        //--------------------------------------
        [Bindable("modeChanged")]
        public function get isAddMode():Boolean {return mode == "add";}

        //--------------------------------------
        // isEditMode
        //--------------------------------------
        [Bindable("modeChanged")]
        public function get isEditMode():Boolean {return mode == "edit";}

        //--------------------------------------
        // isRemoveMode
        //--------------------------------------
        [Bindable("modeChanged")]
        public function get isRemoveMode():Boolean {return mode == "remove";}

        //--------------------------------------
        //  title
        //--------------------------------------
        [Bindable("modeChanged")]
        public function get title():String {
            if (isAddMode) return resourceManager.getString("app", "Add");
            else if (isEditMode) return resourceManager.getString("app", "Edit");
            else return resourceManager.getString("app", "Delete");
        }

        override protected function resourcesChanged():void {
            super.resourcesChanged();
            dispatchEvent(new Event("modeChanged"));
        }

        //--------------------------------------
        //  selectedFilter
        //--------------------------------------
        private var _selectedFilter:Tag;
        [Bindable("selectedFilterChanged")]
        public function get selectedFilter():Tag {return _selectedFilter;}
        public function set selectedFilter(value:Tag):void {
            if (_selectedFilter != value) {
                _selectedFilter = value;
                dispatchEvent(new Event("selectedFilterChanged"));
            }
        }

        //--------------------------------------
        //  hasNetworkConnection
        //--------------------------------------
        private var _hasNetworkConnection:Boolean = false;
        [Bindable("hasNetworkConnectionChanged")]
        public function get hasNetworkConnection():Boolean {return _hasNetworkConnection;}
        public function set hasNetworkConnection(value:Boolean):void {
            if (_hasNetworkConnection != value) {
                _hasNetworkConnection = value;
                dispatchEvent(new Event("hasNetworkConnectionChanged"));
            }
        }

        //--------------------------------------
        //  actionMenu
        //--------------------------------------
        private var _actionMenu:IActionMenu;
        [Bindable("actionMenuChanged")]
        public function get actionMenu():IActionMenu {return _actionMenu;}
        public function set actionMenu(value:IActionMenu):void {
            if (_actionMenu != value) {
                _actionMenu = value;
                dispatchEvent(new Event("actionMenuChanged"));
            }
        }

        private function toolActionSelected(e:ToolActionEvent):void {
            if (e.actionID == ToolAction.APPLY) apply();
            else if (e.actionID == ToolAction.CANCEL) cancel();
        }

        //--------------------------------------
        //  isArticleEnabled
        //--------------------------------------
        private var _isArticleEnabled:Boolean = true;
        [Bindable("isArticleEnabledChanged")]
        public function get isArticleEnabled():Boolean {return _isArticleEnabled;}
        public function set isArticleEnabled(value:Boolean):void {
            if (_isArticleEnabled != value) {
                _isArticleEnabled = value;
                dispatchEvent(new Event("isArticleEnabledChanged"));
            }
        }

        //--------------------------------------
        //  isPresentVerbFormEnabled
        //--------------------------------------
        private var _isPresentVerbFormEnabled:Boolean = true;
        [Bindable("isPresentVerbFormEnabledChanged")]
        public function get isPresentVerbFormEnabled():Boolean {return _isPresentVerbFormEnabled;}
        public function set isPresentVerbFormEnabled(value:Boolean):void {
            if (_isPresentVerbFormEnabled != value) {
                _isPresentVerbFormEnabled = value;
                dispatchEvent(new Event("isPresentVerbFormEnabledChanged"));
            }
        }

        //--------------------------------------
        //  isOptionalTemplatesEnabled
        //--------------------------------------
        private var _isOptionalTemplatesEnabled:Boolean = true;
        [Bindable("isOptionalTemplatesEnabledChanged")]
        public function get isOptionalTemplatesEnabled():Boolean {return _isOptionalTemplatesEnabled;}
        public function set isOptionalTemplatesEnabled(value:Boolean):void {
            if (_isOptionalTemplatesEnabled != value) {
                _isOptionalTemplatesEnabled = value;
                dispatchEvent(new Event("isOptionalTemplatesEnabledChanged"));
            }
        }

        //--------------------------------------
        //  isLoadMp3FileFromDudenEnabled
        //--------------------------------------
        private var _isLoadMp3FileFromDudenEnabled:Boolean = true;
        [Bindable("isLoadMp3FileFromDudenEnabledChanged")]
        public function get isLoadMp3FileFromDudenEnabled():Boolean {return _isLoadMp3FileFromDudenEnabled;}
        public function set isLoadMp3FileFromDudenEnabled(value:Boolean):void {
            if (_isLoadMp3FileFromDudenEnabled != value) {
                _isLoadMp3FileFromDudenEnabled = value;
                dispatchEvent(new Event("isLoadMp3FileFromDudenEnabledChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        public function add(n:Note):IAsyncOperation {
            curOperation = new AsyncOperation();
            setNote(n);
            updateState();
            setMode("add");
            tagList.dataProvider = note.vocabulary.tagColl;
            showSelectedTags(note.tagIDs);
            dispatchEvent(new Event("taskChanged"));
            invalidateOf(focusTextInput);
            actionMenu.showFormMenu();
            actionMenu.addEventListener(ToolActionEvent.SELECTED, toolActionSelected);
            return curOperation;
        }

        public function edit(n:Note):IAsyncOperation {
            curOperation = new AsyncOperation();
            setNote(n);
            updateState();
            setMode("edit");

            if (note is Word) {
                var word:Word = note as Word;
                articleBox.selectedItem = word.article;
                wordInput.text = word.title;
                wordOptionsInput.text = word.declension;
            }
            else if (note is IrregularVerb) {
                var verb:IrregularVerb = note as IrregularVerb;
                verbInputsForm.infinitive = verb.title;
                verbInputsForm.present = verb.present;
                verbInputsForm.past = verb.past;
                verbInputsForm.perfect = verb.perfect;
            }
            else {
                titleArea.text = note.title;
            }

            descriptionArea.text = note.description;
            examplesForm.exampleColl = note.exampleColl;
            tagList.dataProvider = note.vocabulary.tagColl;
            showSelectedTags(note.tagIDs);

            if (note.hasAudio) {
                audioRecorder.setComment(note.audioComment);
            }

            invalidateDisplayList();
            invalidateOf(focusTextInput);
            dispatchEvent(new Event("taskChanged"));
            actionMenu.showFormMenu();
            actionMenu.addEventListener(ToolActionEvent.SELECTED, toolActionSelected);
            return curOperation;
        }

        private function showSelectedTags(noteTagIDs:Array):void {
            if ((noteTagIDs.length == 0 && !selectedFilter) || !tagList.dataProvider || tagList.dataProvider.length == 0) return;

            var isSelectedTagHash:Object = {};
            var selectedItems:Vector.<Object> = new Vector.<Object>();
            for each(var noteTagID:int in noteTagIDs)
                isSelectedTagHash[noteTagID] = true;
            if (selectedFilter)
                isSelectedTagHash[selectedFilter.id] = true;
            for each(var tag:Tag in tagList.dataProvider)
                if (isSelectedTagHash[tag.id]) selectedItems.push(tag);
            tagList.selectedItems = selectedItems;
        }

        private function getSelectedTagIDs():Array {
            var res:Array = [];
            for each(var tag:Tag in tagList.selectedItems)
                res.push(tag.id);
            return res;
        }

        public function remove(n:Note):IAsyncOperation {
            curOperation = new AsyncOperation();
            setNote(n);
            updateState();
            setMode("remove");
            removeNoteTitleLbl.text = '«' + note.title + '»';
            actionMenu.showFormMenu();
            actionMenu.addEventListener(ToolActionEvent.SELECTED, toolActionSelected);
            return curOperation;
        }

        private function updateState():void {
            if (note.isExample)
                currentState = "normal";
            else if (note.vocabulary.id == VocabularyID.DE_WORD || note.vocabulary.id == VocabularyID.EN_WORD)
                currentState = "word";
            else if (note.vocabulary.id == VocabularyID.DE_VERB || note.vocabulary.id == VocabularyID.EN_VERB)
                currentState = "verb";
            else if (note.vocabulary.id == VocabularyID.DE_LESSON || note.vocabulary.id == VocabularyID.EN_LESSON)
                currentState = "lesson";
            else
                currentState = "normal";
        }

        private function clear():void {
            articleBox.selectedItem = "";
            wordInput.text = "";
            wordOptionsInput.text = "";
            descriptionArea.text = "";
            addTagInput.text = "";
            titleArea.text = "";
            audioRecorder.clear();
            examplesForm.clear();
            tagList.dataProvider = null;
            verbInputsForm.clear();
            wordInput.isValidInput = true;
            titleArea.isValidInput = true;
        }

        private function focusTextInput():void {
            if (stage && Device.isDesktop)
                stage.focus = currentState == "lesson" || currentState == "normal" ? titleArea.area : wordInput;
        }

        private function get isOpen():Boolean {
            return isAddMode || isEditMode || isRemoveMode;
        }

        private function cancel():void {
            if (isEditMode) {
                note.revertChanges().addCompleteCallback(noteRevertedAfterCancel);
            }
            else {
                curOperation.dispatchSuccess(FormOperationResult.CANCEL);
                close();
            }
        }

        private function noteRevertedAfterCancel(op:IAsyncOperation):void {
            curOperation.dispatchSuccess(FormOperationResult.CANCEL);
            close();
        }

        private function close():void {
            if (isOpen) {
                clear();
                setMode("");
                actionMenu.showPrevMenu();
                actionMenu.removeEventListener(ToolActionEvent.SELECTED, toolActionSelected);
            }
        }

        private function apply():void {
            if (audioRecorder.isRecording) audioRecorder.clear();

            if (isAddMode || isEditMode) {
                fillNote();
                var errKey:String = note.validate();
                if (errKey) {
                    showInvalidMsg(NoteValidationErrorKey.keyToString(errKey, note.vocabulary.lang.id));
                }
                else {
                    storeChanges().addCompleteCallback(noteStoredAfterApply);
                }
            }
            else {
                storeChanges().addCompleteCallback(noteStoredAfterApply);
            }
        }

        private function storeChanges():IAsyncOperation {
            if (isAddMode || isEditMode)
                return note.store();
            else if (isRemoveMode)
                return note.remove();
            else
                throw Error("Unknown mode in NoteForm!");
        }

        private function noteStoredAfterApply(op:IAsyncOperation):void {
            curOperation.dispatchSuccess(FormOperationResult.OK);
            close();
        }

        private function correct():void {
            if (currentState == "word" || currentState == "verb") {
                wordOptionsInput.text = NoteFormUtils.removeSpaces(wordOptionsInput.text);
                wordInput.text = NoteFormUtils.removeSpaces(wordInput.text);
                descriptionArea.text = NoteFormUtils.formatText(descriptionArea.text);
            }
            else {
                titleArea.text = NoteFormUtils.capitalizeAndFormatText(titleArea.text);
                descriptionArea.text = NoteFormUtils.capitalizeAndFormatText(descriptionArea.text);
            }
        }

        private function fillNote():void {
            if (note is Word) {
                var word:Word = note as Word;
                word.article = articleBox.selectedItem;
                word.title = wordInput.text;
                word.description = descriptionArea.text;
                word.declension = wordOptionsInput.text;
                word.audioComment = audioRecorder.getComment();
                word.exampleColl = examplesForm.exampleColl;
                word.tagIDs = getSelectedTagIDs();
            }
            else if (note is IrregularVerb) {
                var verb:IrregularVerb = note as IrregularVerb;
                verb.title = verbInputsForm.infinitiveInput.text;
                verb.description = descriptionArea.text;
                verb.audioComment = audioRecorder.getComment();
                verb.present = verbInputsForm.presentInput.text;
                verb.past = verbInputsForm.pastInput.text;
                verb.perfect = verbInputsForm.perfectInput.text;
                verb.exampleColl = examplesForm.exampleColl;
                verb.tagIDs = getSelectedTagIDs();
            }
            else {
                note.title = titleArea.text;
                note.description = descriptionArea.text;
                note.audioComment = audioRecorder.getComment();
                if (!note.isExample)
                    note.tagIDs = getSelectedTagIDs();
            }
        }

        private function wordValidationHandler(event:TextOperationEvent):void {
            if (event.operation is TextInputOperation) {
                var inputOperation:TextInputOperation = event.operation as TextInputOperation;
                var regexp:RegExp = NoteFormUtils.LETTERS;
                var match:Object = regexp.exec(inputOperation.text);
                if (match == null) event.preventDefault();
            }
        }

        private function addTagBtnClickHandler(event:MouseEvent):void {
            if (!addTagInput.text) return;

            var tag:Tag = note.vocabulary.createTag();
            tag.name = addTagInput.text;
            var errKey:String = tag.validate();
            if (errKey) {
                showInvalidMsg(NoteValidationErrorKey.keyToString(errKey, note.vocabulary.lang.id));
            }
            else {
                var op:IAsyncOperation = tag.store();
                op.addCompleteCallback(newTagStored);

                var selectedItems:Vector.<Object> = tagList.selectedItems || new Vector.<Object>();
                selectedItems.push(tag);
                if (!tagList.dataProvider) tagList.dataProvider = new ArrayCollection();
                tagList.dataProvider.addItemAt(tag, 0);
                tagList.selectedItems = selectedItems;
                addTagInput.text = "";
            }
        }

        private function newTagStored(op:IAsyncOperation):void {
            (tagList.dataProvider as ArrayCollection).refresh();
        }

        private function getRemoveNotification(note:Note):String {
            if (!note) return resourceManager.getString("app", "AreYouSureWantToDeleteThisNote?");
            else if (note is Word) return resourceManager.getString("app", "AreYouSureWantToDeleteThisWord?");
            else if (note is IrregularVerb) return resourceManager.getString("app", "AreYouSureWantToDeleteThisVerb?");
            else if (note.isExample) return resourceManager.getString("app", "AreYouSureWantToDeleteThisExample?");
            else return resourceManager.getString("app", "AreYouSureWantToDeleteThisNote?");
        }

        private function validateInputText(text:String):void {
            note.title = text;
            var hasDuplicateErr:Boolean = note.hasDuplicate();
            wordInput.isValidInput = !hasDuplicateErr;
            titleArea.isValidInput = !hasDuplicateErr;
            verbInputsForm.infinitiveInput.isValidInput = !hasDuplicateErr;
        }

        private function getNoteTitle(connection:Boolean, wordTitle:String, verbTitle:String):String {
            var title:String = note is Word ? wordTitle : note is IrregularVerb ? verbTitle : "";
            return connection && title ? title : "";
        }

        private function showInvalidMsg(msg:String):void {
            if (invalidNotifier && !SimplePopup.isShownInPopup(invalidNotifier)) {
                invalidNotifier.text = msg;
                SimplePopup.show(invalidNotifier, false);
                invalidNotifier.show();
            }
        }

        private function descriptionAreaChangeHandler(event:Event):void {
            if (currentState == "lesson") {
                titleArea.percentHeight = descriptionArea.text.length / titleArea.text.length > 5 ? 15 : 100;
            }
            else {
                titleArea.percentHeight = 100;
            }
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="disabled"/>
        <s:State name="normal"/>
        <s:State name="word"/>
        <s:State name="verb"/>
        <s:State name="lesson"/>
    </s:states>

    <fx:Declarations>
        <form2:InvalidNotifier id="invalidNotifier"
                               width="{Values.PT500}" height="{Values.PT150}"
                               verticalCenter="0" horizontalCenter="0"/>
    </fx:Declarations>

    <form2:EditorBg width="100%"
                    height="100%"
                    title="{title}"
                    mode="{mode}"/>

    <button:TransparentWhiteButton id="formatBtn"
                                   width="{Values.PT300}" right="{Values.PT15}" top="{Values.PT4}"
                                   title="{resourceManager.getString('app', 'Formatting')}"
                                   visible="{!isRemoveMode}"
                                   click="correct()"/>

    <!--ADD EDIT MODE-->

    <s:HGroup width="100%"
              top="{Values.PT50}" bottom="{Values.PT20}"
              gap="{HGAP}"
              paddingLeft="{Values.PT15}" paddingRight="{Values.PT15}"
              visible="{!isRemoveMode}" includeInLayout="{!isRemoveMode}">
        <s:VGroup width="100%" height="100%" gap="{VGAP}">
            <input:TextAreaForm id="titleArea"
                                fontSize.word="{Values.PT18}"
                                fontSize.verb="{Values.PT18}"
                                fontSize="{Values.PT22}"
                                visible="true" includeInLayout="true"
                                visible.word="false" includeInLayout.word="false"
                                visible.verb="false" includeInLayout.verb="false"
                                width="100%" height="100%"
                                title="{resourceManager.getString('app', 'TextInput')}"
                                maxChars="{Device.MAX_TEXT_LENGTH}"
                                change="validateInputText(titleArea.text)"/>

            <input:TextInputForm id="wordInput"
                                 fontSize="{Values.PT18}"
                                 visible="false" includeInLayout="false"
                                 visible.word="true" includeInLayout.word="true"
                                 width="100%"
                                 maxChars="{Device.MAX_WORD_LENGTH}"
                                 changing="wordValidationHandler(event)"
                                 change="validateInputText(wordInput.text)"
                                 title="{resourceManager.getString('app', 'WordInput')}"/>

            <form2:VerbInputsForm id="verbInputsForm"
                                  width="100%"
                                  visible="false" includeInLayout="false"
                                  visible.word="false" includeInLayout.word="false"
                                  visible.verb="true" includeInLayout.verb="true"
                                  isPresentFormEnabled="{isPresentVerbFormEnabled}"
                                  change="validateInputText(verbInputsForm.infinitiveInput.text)"/>

            <input:TextAreaForm id="descriptionArea"
                                width="100%" height="100%"
                                maxChars="{Device.MAX_TEXT_LENGTH}"
                                title="{resourceManager.getString('app', 'Translation')}"
                                fontSize.word="{Values.PT18}"
                                fontSize.verb="{Values.PT18}"
                                fontSize="{Values.PT22}"
                                textChanged="descriptionAreaChangeHandler(event)"/>

            <form2:ExamplesForm id="examplesForm"
                                parentNote="{note}"
                                width="100%" height="100%"
                                visible="false" includeInLayout="false"
                                visible.word="true" includeInLayout.word="true"
                                visible.verb="true" includeInLayout.verb="true"
                                mainForm="{this}"/>

            <audio:AudioRecorder id="audioRecorder"
                                 isLoadMp3FileFromDudenEnabled="{isLoadMp3FileFromDudenEnabled}"
                                 noteTitleToLoadMp3="{getNoteTitle(hasNetworkConnection, wordInput.text, verbInputsForm.infinitiveInput.text)}"
                                 height="{Values.PT72}" width="100%"
                                 loadRemoteMp3WithError="showInvalidMsg(resourceManager.getString('app', 'FailedToLoadMp3File'))"/>
        </s:VGroup>

        <s:VGroup width="{Values.PT300}" height="100%" gap="{VGAP}"
                  visible.normal="false" includeInLayout.normal="false"
                  visible.lesson="{!isAddMode}" includeInLayout.lesson="{!isAddMode}"
                  visible.word="true" includeInLayout.word="true"
                  visible.verb="true" includeInLayout.verb="true">
            <note:ArticleList id="articleBox"
                              title="{resourceManager.getString('app', 'Article')}"
                              visible="false" includeInLayout="false"
                              visible.word="{isArticleEnabled}" includeInLayout.word="{true}"
                              visible.verb="false" includeInLayout.verb="false"
                              width="100%"
                              dataProvider="{new ArrayCollection(DeWordArticle.ARTICLES)}"/>

            <input:DropdownInputForm id="wordOptionsInput"
                                     isTemplatesEnabled="{isOptionalTemplatesEnabled}"
                                     visible="false" includeInLayout="false"
                                     visible.word="true" includeInLayout.word="true"
                                     width="100%"
                                     inputTemplateColl="{new ArrayCollection(OPTIONS_TEMPLATES)}"
                                     title="{resourceManager.getString('app', 'Options')}"/>

            <list:ListForm id="tagList"
                           depth="10"
                           width="100%" height="100%"
                           title="{resourceManager.getString('app', 'Tags')}"
                           itemRenderer="de.dittner.testmyself.ui.view.noteList.components.tag.TagRenderer"
                           allowMultipleSelection.lesson="false"
                           allowMultipleSelection="true">
                <list:layout>
                    <s:VerticalLayout gap="0" useVirtualLayout="false"/>
                </list:layout>
            </list:ListForm>

            <s:HGroup width="100%" height="{Values.PT72}" gap="{Values.PT1}" verticalAlign="bottom"
                      visible.lesson="false" includeInLayout.lesson="false">
                <input:TextInputForm id="addTagInput"
                                     fontSize="{Values.PT18}"
                                     width="100%"
                                     maxChars="{Device.MAX_TAG_NAME_LENGTH}"
                                     title="{resourceManager.getString('app', 'NewTagsName')}"/>

                <tile:FadeTileButton id="addTagBtn"
                                     upTileID="{TileID.BTN_ADD_TAG}"
                                     click="addTagBtnClickHandler(event)"/>
            </s:HGroup>
        </s:VGroup>

    </s:HGroup>

    <!--REMOVE MODE-->

    <s:Label id="removeTitleLbl"
             visible="{isRemoveMode}"
             width="100%"
             textAlign="center"
             verticalCenter="{-Values.PT100}"
             color="{AppColors.TEXT_BLACK}"
             fontSize="{Values.PT24}"
             text="{getRemoveNotification(note)}"/>

    <s:Label id="removeNoteTitleLbl"
             visible="{isRemoveMode}"
             width="100%"
             verticalCenter="0"
             color="{AppColors.TEXT_BLACK}"
             fontSize="{Values.PT18}"
             fontWeight="bold"
             textAlign="center" verticalAlign="middle"/>

</s:Group>
