<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:button="de.dittner.testmyself.ui.common.button.*">

    <fx:Metadata>
        [Event(name="selected", type="de.dittner.testmyself.ui.view.noteList.components.toolbar.ToolbarEvent")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import de.dittner.testmyself.ui.common.utils.AppColors;

        //--------------------------------------
        //  createNoteBtnEnabled
        //--------------------------------------
        private var _createNoteBtnEnabled:Boolean = true;
        [Bindable("createNoteBtnEnabledChanged")]
        public function get createNoteBtnEnabled():Boolean {return _createNoteBtnEnabled;}
        public function set createNoteBtnEnabled(value:Boolean):void {
            if (_createNoteBtnEnabled != value) {
                _createNoteBtnEnabled = value;
                dispatchEvent(new Event("createNoteBtnEnabledChanged"));
            }
        }

        //--------------------------------------
        //  editNoteBtnEnabled
        //--------------------------------------
        private var _editNoteBtnEnabled:Boolean = true;
        [Bindable("editNoteBtnEnabledChanged")]
        public function get editNoteBtnEnabled():Boolean {return _editNoteBtnEnabled;}
        public function set editNoteBtnEnabled(value:Boolean):void {
            if (_editNoteBtnEnabled != value) {
                _editNoteBtnEnabled = value;
                dispatchEvent(new Event("editNoteBtnEnabledChanged"));
            }
        }

        //--------------------------------------
        //  removeNoteBtnEnabled
        //--------------------------------------
        private var _removeNoteBtnEnabled:Boolean = true;
        [Bindable("removeNoteBtnEnabledChanged")]
        public function get removeNoteBtnEnabled():Boolean {return _removeNoteBtnEnabled;}
        public function set removeNoteBtnEnabled(value:Boolean):void {
            if (_removeNoteBtnEnabled != value) {
                _removeNoteBtnEnabled = value;
                dispatchEvent(new Event("removeNoteBtnEnabledChanged"));
            }
        }

        //--------------------------------------
        //  verLayoutToolEnabled
        //--------------------------------------
        private var _verLayoutToolEnabled:Boolean = true;
        [Bindable("verLayoutToolEnabledChanged")]
        public function get verLayoutToolEnabled():Boolean {return _verLayoutToolEnabled;}
        public function set verLayoutToolEnabled(value:Boolean):void {
            if (_verLayoutToolEnabled != value) {
                _verLayoutToolEnabled = value;
                dispatchEvent(new Event("verLayoutToolEnabledChanged"));
            }
        }

        //--------------------------------------
        //  hideDetailsToolEnabled
        //--------------------------------------
        private var _hideDetailsToolEnabled:Boolean = true;
        [Bindable("hideDetailsToolEnabledChanged")]
        public function get hideDetailsToolEnabled():Boolean {return _hideDetailsToolEnabled;}
        public function set hideDetailsToolEnabled(value:Boolean):void {
            if (_hideDetailsToolEnabled != value) {
                _hideDetailsToolEnabled = value;
                dispatchEvent(new Event("hideDetailsToolEnabledChanged"));
            }
        }

        //--------------------------------------
        //  transInvertToolEnabled
        //--------------------------------------
        private var _transInvertToolEnabled:Boolean = true;
        [Bindable("transInvertToolEnabledChanged")]
        public function get transInvertToolEnabled():Boolean {return _transInvertToolEnabled;}
        public function set transInvertToolEnabled(value:Boolean):void {
            if (_transInvertToolEnabled != value) {
                _transInvertToolEnabled = value;
                dispatchEvent(new Event("transInvertToolEnabledChanged"));
            }
        }

        //--------------------------------------
        //  filterToolEnabled
        //--------------------------------------
        private var _filterToolEnabled:Boolean = true;
        [Bindable("filterToolEnabledChanged")]
        public function get filterToolEnabled():Boolean {return _filterToolEnabled;}
        public function set filterToolEnabled(value:Boolean):void {
            if (_filterToolEnabled != value) {
                _filterToolEnabled = value;
                dispatchEvent(new Event("filterToolEnabledChanged"));
            }
        }

        private function notifyToolAction(action:String):void {
            dispatchEvent(new ToolbarEvent(ToolbarEvent.SELECTED, action));
        }
        ]]></fx:Script>

    <s:layout>
        <s:HorizontalLayout gap="0" verticalAlign="middle" horizontalAlign="right"/>
    </s:layout>

    <button:ToolButton id="ceateNoteBtn"
                       enabled="{createNoteBtnEnabled}"
                       description="Neue Notiz hinzufügen"
                       image="@Embed(source='/assets/tools/add.png')"
                       click="notifyToolAction(ToolAction.CREATE_NOTE)"/>

    <button:ToolButton id="editNoteBtn"
                       enabled="{editNoteBtnEnabled}"
                       description="Die Notiz bearbeiten"
                       image="@Embed(source='/assets/tools/edit.png')"
                       click="notifyToolAction(ToolAction.EDIT_NOTE)"/>

    <button:ToolButton id="removeNoteBtn"
                       enabled="{removeNoteBtnEnabled}"
                       description="Die Notiz entfernen"
                       image="@Embed(source='/assets/tools/recycle_bin.png')"
                       click="notifyToolAction(ToolAction.REMOVE_NOTE)"/>

    <s:Group height="100%">
        <s:Rect width="1" height="100%">
            <s:fill>
                <s:SolidColor color="{AppColors.EDITOR_BORDER}" alpha=".5"/>
            </s:fill>
        </s:Rect>
        <s:Rect left="1" width="1" height="100%">
            <s:fill>
                <s:SolidColor color="#ffFFff" alpha=".5"/>
            </s:fill>
        </s:Rect>
    </s:Group>

    <s:Spacer width="20"
              visible="{verLayoutToolEnabled || hideDetailsToolEnabled}"
              includeInLayout="{verLayoutToolEnabled || hideDetailsToolEnabled}"/>

    <button:ToolToggleButton id="verLayoutBtn"
                             selected="true"
                             description="Das Layout ändern"
                             selectedImage="@Embed(source='/assets/tools/layout_vertical.png')"
                             image="@Embed(source='/assets/tools/layout_horizontal.png')"
                             visible="{verLayoutToolEnabled}"
                             includeInLayout="{verLayoutToolEnabled}"
                             click="notifyToolAction(verLayoutBtn.selected ? ToolAction.VER_LAYOUT : ToolAction.HOR_LAYOUT)"/>

    <s:Spacer width="25"
              visible="{verLayoutToolEnabled &amp;&amp; hideDetailsToolEnabled}"
              includeInLayout="{verLayoutToolEnabled &amp;&amp; hideDetailsToolEnabled}"/>

    <button:ToolToggleButton id="hideDetailsBtn"
                             selected="true"
                             description="Die Details zeigen / verbergen"
                             selectedImage="@Embed(source='/assets/tools/collapse.png')"
                             image="@Embed(source='/assets/tools/expand.png')"
                             visible="{hideDetailsToolEnabled}"
                             includeInLayout="{hideDetailsToolEnabled}"
                             click="notifyToolAction(hideDetailsBtn.selected ? ToolAction.HIDE_DETAILS : ToolAction.SHOW_DETAILS)"/>

    <s:Spacer width="10" visible="{verLayoutToolEnabled || hideDetailsToolEnabled}"
              includeInLayout="{verLayoutToolEnabled || hideDetailsToolEnabled}"/>

    <button:ToolButton id="transInvertBtn"
                       description="Den Deutschtext / die Übersetzung invertieren"
                       image="@Embed(source='/assets/tools/trans_inversion.png')"
                       visible="{verLayoutToolEnabled}"
                       includeInLayout="{verLayoutToolEnabled}"
                       click="notifyToolAction(ToolAction.INVERT)"/>

    <button:ToolButton id="filterBtn"
                       description="Filtern"
                       visible="{filterToolEnabled}"
                       includeInLayout="{filterToolEnabled}"
                       image="@Embed(source='/assets/tools/filter.png')"
                       click="notifyToolAction(ToolAction.FILTER)"/>

</s:Group>
