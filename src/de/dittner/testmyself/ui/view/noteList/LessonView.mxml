<?xml version="1.0"?>
<view:SmartView xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:core="de.dittner.testmyself.ui.common.view.*"
                xmlns:list2="de.dittner.testmyself.ui.common.list.*"
                xmlns:form2="de.dittner.testmyself.ui.view.noteList.components.form.*"
                xmlns:note="de.dittner.testmyself.ui.common.note.*"
                xmlns:common="de.dittner.testmyself.ui.common.*"
                currentState="inactive"
                horizontalCenter="0"
                xmlns:view="de.dittner.testmyself.ui.common.view.*">

    <fx:Script><![CDATA[
        import de.dittner.async.IAsyncOperation;
        import de.dittner.testmyself.model.domain.tag.Tag;
        import de.dittner.testmyself.ui.common.menu.ToolAction;
        import de.dittner.testmyself.ui.common.menu.ToolActionEvent;
        import de.dittner.testmyself.ui.common.note.NoteRenderOptions;
        import de.dittner.testmyself.ui.common.popup.SimplePopup;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.ui.common.view.ViewModelFactory;
        import de.dittner.testmyself.ui.view.noteList.components.form.FormOperationResult;
        import de.dittner.testmyself.utils.Values;

        [Bindable]
        public var vm:NoteListVM;

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        override protected function activating():void {
            vm = ViewModelFactory.instance.lessonListVM;
            vm.lockView();

            toolbar.show();
            actionMenu.hide();
            toolbar.revert()
        }

        override protected function activate():void {
            vm.unlockView();
            vm.viewActivated(viewID);
            showLessonList();
            noteContent.activate();
            toolbar.addEventListener(ToolActionEvent.SELECTED, toolActionSelected);
        }

        override protected function deactivate():void {
            toolbar.removeEventListener(ToolActionEvent.SELECTED, toolActionSelected);
            vm.viewDeactivated();
            noteContent.deactivate();
            setCurrentState("inactive");
        }

        private function showLessonList():void {
            toolbar.revert();
            toolbar.addNoteBtn.enabled = true;
            vm.selectedNote = null;
            vm.page.selectedTag = null;
            setCurrentState("lessonList");
        }

        private function showLessonContent():void {
            toolbar.addNoteBtn.enabled = true;
            toolbar.editNoteBtn.enabled = vm.selectedNote != null;
            toolbar.removeNoteBtn.enabled = vm.selectedNote != null;
            toolbar.goBackBtn.enabled = true;
            toolbar.transInvertBtn.enabled = true;
            toolbar.hideDetailsBtn.enabled = true;
            setCurrentState("lessonContent");
        }

        private function showAddLessonForm():void {
            if (!SimplePopup.curContent != addLessonForm) {
                addLessonForm.cancelBtn.addEventListener(MouseEvent.CLICK, cancelAddLessonClicked);
                addLessonForm.applyBtn.addEventListener(MouseEvent.CLICK, applyAddLessonClicked);
                SimplePopup.show(addLessonForm, true, null, AppColors.EDITOR_SHADOW, 0.5);
            }
        }

        private function hideAddLessonForm():void {
            SimplePopup.close();
            addLessonForm.addLessonInput.text = "";
            addLessonForm.cancelBtn.removeEventListener(MouseEvent.CLICK, cancelAddLessonClicked);
            addLessonForm.applyBtn.removeEventListener(MouseEvent.CLICK, applyAddLessonClicked);
        }

        private function cancelAddLessonClicked(event:MouseEvent):void {
            hideAddLessonForm();
        }

        private function applyAddLessonClicked(event:MouseEvent):void {
            var tag:Tag = vm.page.vocabulary.createTag();
            tag.name = addLessonForm.addLessonInput.text;
            var errKey:String = tag.validate();

            if (errKey) {
                addLessonForm.addLessonInput.isValidInput = false;
            }
            else {
                tag.store();
                hideAddLessonForm();
            }
        }

        private function lessonSelectedHandler(event:Event):void {
            if (!isActive) return;
            vm.page.selectedTag = lessonList.selectedItem as Tag;
            if (lessonList.selectedItem) {
                vm.page.number = 0;
                vm.page.countAllNotes = true;
                vm.reloadPage();
                showLessonContent();
            }
        }

        private var needSelectFirstNote:Boolean = false;
        private var needSelectLastNote:Boolean = false;
        private var renderOptions:NoteRenderOptions = new NoteRenderOptions();
        private function toolActionSelected(event:ToolActionEvent):void {
            var op:IAsyncOperation;
            switch (event.actionID) {
                case(ToolAction.GO_BACK) :
                    if (noteContent.visible) {
                        if (noteContent.isNoteCardShown)
                            noteContent.hideNoteCard();
                        else
                            showLessonList();
                    }
                    break;
                case(ToolAction.CREATE_NOTE) :
                    if (currentState == "lessonList") {
                        showAddLessonForm()
                    }
                    else if (currentState == "lessonContent") {
                        form.visible = true;
                        form.selectedFilter = vm.page.selectedTag;
                        op = form.add(vm.page.vocabulary.createNote());
                        op.addCompleteCallback(noteAddedComplete);
                    }
                    break;
                case(ToolAction.EDIT_NOTE) :
                    form.visible = true;
                    op = form.edit(noteContent.selectedNote);
                    op.addCompleteCallback(noteEditComplete);
                    break;
                case(ToolAction.REMOVE_NOTE) :
                    form.visible = true;
                    op = form.remove(noteContent.selectedNote);
                    op.addCompleteCallback(noteRemovedComplete);
                    break;
            }
        }

        private function noteAddedComplete(op:IAsyncOperation):void {
            if (op.isSuccess && op.result == FormOperationResult.OK) {
                vm.page.allNotesAmount++;
                vm.reloadPage();
                form.selectedFilter = null;
                noteContent.hideNoteCard();
            }
            form.visible = false;
        }

        private function noteRemovedComplete(op:IAsyncOperation):void {
            if (op.isSuccess && op.result == FormOperationResult.OK) {
                vm.page.allNotesAmount--;
                vm.reloadPage();
                noteContent.hideNoteCard();
            }
            form.visible = false;
        }

        private function noteEditComplete(op:IAsyncOperation):void {
            noteContent.updateSelectedItem();
            form.visible = false;
        }

        private function pageNumChanged(event:Event):void {
            vm.reloadPage();
        }

        private function noteList_selectedItemChangeHandler(event:Event):void {
            if (!isActive) return;
            toolbar.editNoteBtn.enabled = noteContent.selectedNote != null;
            toolbar.removeNoteBtn.enabled = noteContent.selectedNote != null;
        }
        ]]></fx:Script>

    <core:states>
        <s:State name="disabled"/>
        <s:State name="inactive"/>
        <s:State name="lessonList"/>
        <s:State name="lessonContent"/>
    </core:states>
    <fx:Declarations>
        <form2:AddLessonForm id="addLessonForm"
                             top="{2*AppSizes.MENU_HEIGHT}"
                             height="{Values.PT200}" width="100%"/>
    </fx:Declarations>

    <common:BG percentWidth="100" percentHeight="100" fillColor="{AppColors.BG}"/>

    <note:NoteContent id="noteContent"
                      visible="false"
                      visible.lessonContent="true"
                      width="{width}" height="100%"
                      selectedItem="@{vm.selectedNote}"
                      dataProvider="{vm.page.coll}"
                      page="{vm.page}"
                      toolbar="{toolbar}"
                      actionMenu="{actionMenu}"
                      selectedItemChange="noteList_selectedItemChangeHandler(event)"
                      pageNumChanged="pageNumChanged(event)"/>

    <common:Container width="100%" height="100%"
                      excludeFrom="inactive"
                      visible="false"
                      visible.lessonList="true"
                      visible.inactive="true">
        <s:Scroller width="100%" height="100%"
                    horizontalScrollPolicy="off"
                    hasFocusableChildren="false">
            <list2:SelectableDataGroup id="lessonList"
                                       selectedItem="{vm.page.selectedTag}"
                                       dataProvider="{vm.page.vocabulary.tagColl}"
                                       width="100%"
                                       itemRenderer="de.dittner.testmyself.ui.view.noteList.components.tag.LargeTagRenderer"
                                       selectedItemChange="lessonSelectedHandler(event)">
                <list2:layout>
                    <s:VerticalLayout gap="0" useVirtualLayout="true"/>
                </list2:layout>
            </list2:SelectableDataGroup>
        </s:Scroller>
    </common:Container>

</view:SmartView>
