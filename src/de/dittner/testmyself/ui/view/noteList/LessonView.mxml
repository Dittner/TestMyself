<?xml version="1.0"?>
<view:SmartView xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:core="de.dittner.testmyself.ui.common.view.*"
                xmlns:navigation="de.dittner.testmyself.ui.view.noteList.components.pagination.*"
                xmlns:utils="de.dittner.testmyself.ui.common.utils.*"
                xmlns:list2="de.dittner.testmyself.ui.common.list.*"
                xmlns:form2="de.dittner.testmyself.ui.view.noteList.components.form.*"
                xmlns:common="de.dittner.testmyself.ui.view.noteList.components.*"
                currentState="inactive"
                horizontalCenter="0"
                xmlns:view="de.dittner.testmyself.ui.common.view.*">

    <fx:Script><![CDATA[
        import de.dittner.async.IAsyncOperation;
        import de.dittner.testmyself.model.domain.tag.Tag;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.view.ViewModelFactory;
        import de.dittner.testmyself.ui.view.noteList.components.PageLayout;
        import de.dittner.testmyself.ui.view.noteList.components.form.FormOperationResult;
        import de.dittner.testmyself.ui.view.noteList.components.toolbar.ToolAction;
        import de.dittner.testmyself.ui.view.noteList.components.toolbar.ToolbarEvent;

        [Bindable]
        public var vm:NoteListVM;

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        override protected function activating():void {
            vm = ViewModelFactory.instance.noteListVM;
            vm.lockView();

            toolbar.visible = toolbar.includeInLayout = true;
            toolbar.disabledAll()
        }

        override protected function activate():void {
            vm.unlockView();
            vm.viewActivated(viewID);
            showLessonList();
            toolbar.addEventListener(ToolbarEvent.SELECTED, toolActionSelectedHandler);
        }

        override protected function deactivate():void {
            toolbar.removeEventListener(ToolbarEvent.SELECTED, toolActionSelectedHandler);
            vm.viewDeactivated();
            setCurrentState("inactive");
        }

        private function showLessonList():void {
            toolbar.disabledAll();
            toolbar.addNoteBtn.enabled = true;
            vm.selectedNote = null;
            vm.page.selectedTag = null;
            setCurrentState("lessonList");
        }

        private function showLessonContent():void {
            toolbar.addNoteBtn.enabled = true;
            toolbar.editNoteBtn.enabled = noteList.selectedNote;
            toolbar.removeNoteBtn.enabled = noteList.selectedNote;
            toolbar.goBackBtn.enabled = true;
            toolbar.transInvertBtn.enabled = true;
            toolbar.hideDetailsBtn.enabled = true;
            setCurrentState("lessonContent");
        }

        private function showAddLessonForm():void {
            if (!addLessonForm.visible) {
                addLessonForm.visible = true;
                addLessonForm.cancelBtn.addEventListener(MouseEvent.CLICK, cancelAddLessonClicked);
                addLessonForm.applyBtn.addEventListener(MouseEvent.CLICK, applyAddLessonClicked);
            }
        }

        private function hideAddLessonForm():void {
            if (addLessonForm.visible) {
                addLessonForm.visible = false;
                addLessonForm.addLessonInput.text = "";
                addLessonForm.cancelBtn.removeEventListener(MouseEvent.CLICK, cancelAddLessonClicked);
                addLessonForm.applyBtn.removeEventListener(MouseEvent.CLICK, applyAddLessonClicked);
            }
        }

        private function cancelAddLessonClicked(event:MouseEvent):void {
            hideAddLessonForm();
        }

        private function applyAddLessonClicked(event:MouseEvent):void {
            var tag:Tag = vm.page.vocabulary.createTag();
            tag.name = addLessonForm.addLessonInput.text;
            var errKey:String = tag.validate();

            if (errKey) {
                addLessonForm.addLessonInput.isValidInput = false;
            }
            else {
                tag.store();
                hideAddLessonForm();
            }
        }

        private function lessonSelectedHandler(event:Event):void {
            vm.page.selectedTag = lessonList.selectedItem as Tag;
            if (lessonList.selectedItem) {
                vm.page.number = 0;
                vm.page.countAllNotes = true;
                vm.reloadPage();
                showLessonContent();
            }
        }

        private var pageLayoutInfo:PageLayout = new PageLayout();
        private function toolActionSelectedHandler(event:ToolbarEvent):void {
            var op:IAsyncOperation;
            switch (event.toolAction) {
                case(ToolAction.GO_BACK) :
                    showLessonList();
                    break;
                case(ToolAction.CREATE_NOTE) :
                    if (currentState == "lessonList") {
                        showAddLessonForm()
                    }
                    else if (currentState == "lessonContent") {
                        form.visible = true;
                        form.selectedFilter = vm.page.selectedTag;
                        op = form.add(vm.page.vocabulary.createNote());
                        op.addCompleteCallback(noteAddedComplete);
                    }
                    break;
                case(ToolAction.EDIT_NOTE) :
                    form.visible = true;
                    op = form.edit(noteList.selectedNote);
                    op.addCompleteCallback(noteEditComplete);
                    break;
                case(ToolAction.REMOVE_NOTE) :
                    form.visible = true;
                    op = form.remove(noteList.selectedNote);
                    op.addCompleteCallback(noteRemovedComplete);
                    break;
                case(ToolAction.INVERT) :
                    pageLayoutInfo.inverted = !pageLayoutInfo.inverted;
                    noteList.pageLayout = pageLayoutInfo;
                    break;
                case(ToolAction.HIDE_DETAILS) :
                    pageLayoutInfo.showDetails = false;
                    noteList.pageLayout = pageLayoutInfo;
                    break;
                case(ToolAction.SHOW_DETAILS) :
                    pageLayoutInfo.showDetails = true;
                    noteList.pageLayout = pageLayoutInfo;
                    break;
            }
        }

        private function noteAddedComplete(op:IAsyncOperation):void {
            if (op.isSuccess && op.result == FormOperationResult.OK) {
                vm.page.allNotesAmount++;
                vm.reloadPage();
                form.selectedFilter = null;
            }
            form.visible = false;
        }

        private function noteRemovedComplete(op:IAsyncOperation):void {
            if (op.isSuccess && op.result == FormOperationResult.OK) {
                vm.page.allNotesAmount--;
                vm.reloadPage();
            }
            form.visible = false;
        }

        private function noteEditComplete(op:IAsyncOperation):void {
            if (op.isSuccess && op.result == FormOperationResult.OK) {
                vm.page.allNotesAmount--;
                vm.reloadPage();
            }
            form.visible = false;
        }

        private function pageNumChanged(event:Event):void {
            vm.reloadPage();
        }

        private function noteList_selectedItemChangeHandler(event:Event):void {
            toolbar.editNoteBtn.enabled = noteList.selectedNote;
            toolbar.removeNoteBtn.enabled = noteList.selectedNote;
        }
        ]]></fx:Script>

    <core:states>
        <s:State name="disabled"/>
        <s:State name="inactive"/>
        <s:State name="lessonList"/>
        <s:State name="lessonContent"/>
    </core:states>

    <utils:BG width="100%" height="100%" color="{AppColors.BG}"/>

    <s:Scroller left="0" right="0" top="0" bottom="{FOOTER_HEI}"
                excludeFrom="inactive"
                visible="false" visible.lessonContent="true"
                horizontalScrollPolicy="off"
                hasFocusableChildren="false">
        <common:NoteList id="noteList"
                         selectedNote="@{vm.selectedNote}"
                         dataProvider="{vm.page.noteColl}"
                         width="100%"
                         contentBackgroundAlpha="0"
                         deselectEnabled="true"
                         selectedItemChange="noteList_selectedItemChangeHandler(event)"
                         itemRenderer="de.dittner.testmyself.ui.view.noteList.components.renderer.NoteRenderer">
            <common:layout>
                <s:VerticalLayout gap="0" useVirtualLayout="false"/>
            </common:layout>
        </common:NoteList>
    </s:Scroller>

    <s:Scroller left="0" right="0" top="0" bottom="{FOOTER_HEI}"
                excludeFrom="inactive"
                visible="false" visible.lessonList="true"
                horizontalScrollPolicy="off"
                hasFocusableChildren="false">
        <list2:SelectableDataGroup id="lessonList"
                                   selectedItem="{vm.page.selectedTag}"
                                   dataProvider="{vm.page.vocabulary.tagColl}"
                                   width="100%"
                                   visible="false" visible.lessonList="true"
                                   itemRenderer="de.dittner.testmyself.ui.view.noteList.components.tag.LessonTagRenderer"
                                   selectedItemChange="lessonSelectedHandler(event)">
            <list2:layout>
                <s:VerticalLayout gap="0" useVirtualLayout="true"/>
            </list2:layout>
        </list2:SelectableDataGroup>
    </s:Scroller>

    <!--footer-->
    <s:HGroup width="100%" height="{FOOTER_HEI}" bottom="0"
              visible.lessonList="false" visible.lessonContent="true"
              opaqueBackground="{AppColors.SCREEN_FOOTER_BG}"
              excludeFrom="inactive">

        <s:Label id="titleLbl"
                 text="{vm.page.selectedTag.name || vm.viewTitle}"
                 width="50%" height="100%" verticalAlign="middle"
                 fontSize="14"
                 paddingLeft="10" paddingTop="1"
                 maxDisplayedLines="1"
                 color="{AppColors.TEXT_BLACK}"/>

        <navigation:PaginationBar id="paginationBar"
                                  allNotesAmount="{vm.page.allNotesAmount}"
                                  notesOnCurPage="{vm.page.noteColl.length}"
                                  pageSize="{vm.page.size}"
                                  pageNum="@{vm.page.number}"
                                  height="100%"
                                  pageNumChanged="pageNumChanged(event)"/>

        <s:Label id="tagsLbl"
                 text="{vm.selectedNoteTags}"
                 height="100%" width="50%" textAlign="right" paddingRight="10"
                 fontSize="14" verticalAlign="middle" paddingTop="1"
                 maxDisplayedLines="1"
                 color="{AppColors.TEXT_BLACK}"/>
    </s:HGroup>

    <form2:AddLessonForm id="addLessonForm"
                         visible="false"
                         height="100%" width="100%"/>
</view:SmartView>
