<?xml version="1.0"?>
<view:SmartView xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:core="de.dittner.testmyself.ui.common.view.*"
                xmlns:view="de.dittner.testmyself.ui.common.view.*"
                xmlns:tag="de.dittner.testmyself.ui.view.noteList.components.tag.*"
                xmlns:note="de.dittner.testmyself.ui.common.note.*"
                currentState="normal">

    <fx:Script><![CDATA[
        import de.dittner.async.IAsyncOperation;
        import de.dittner.testmyself.ui.common.menu.ToolAction;
        import de.dittner.testmyself.ui.common.menu.ToolActionEvent;
        import de.dittner.testmyself.ui.common.menu.ViewID;
        import de.dittner.testmyself.ui.common.popup.SimplePopup;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.ui.common.view.ViewModelFactory;
        import de.dittner.testmyself.ui.view.noteList.components.form.FormOperationResult;

        [Bindable]
        public var vm:NoteListVM;

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        override protected function activating():void {
            if (viewID == ViewID.WORD)
                vm = ViewModelFactory.instance.wordListVM;
            else if (viewID == ViewID.VERB)
                vm = ViewModelFactory.instance.verbListVM;
            else
                throw new Error("Unknown ViewID: " + viewID);

            vm.lockView();
            navigationMenu.visible = navigationMenu.includeInLayout = true;
            toolbar.show();
            toolbar.revert();
            actionMenu.hide();
        }

        override protected function activate():void {
            vm.unlockView();
            vm.viewActivated(viewID);
            vm.reloadPage();

            toolbar.addNoteBtn.enabled = true;
            toolbar.hideDetailsBtn.enabled = true;
            toolbar.transInvertBtn.enabled = true;
            toolbar.filterBtn.enabled = true;

            noteContent.activate();
            toolbar.addEventListener(ToolActionEvent.SELECTED, toolActionSelectedHandler);
        }

        override protected function deactivate():void {
            toolbar.removeEventListener(ToolActionEvent.SELECTED, toolActionSelectedHandler);
            vm.viewDeactivated();
            noteContent.deactivate();
        }

        private function toolActionSelectedHandler(event:ToolActionEvent):void {
            var op:IAsyncOperation;
            switch (event.actionID) {
                case(ToolAction.GO_BACK) :
                    if (noteContent.visible && noteContent.isNoteCardShown) {
                        noteContent.hideNoteCard();
                        toolbar.goBackBtn.enabled = false;
                    }
                    break;
                case(ToolAction.CREATE_NOTE) :
                    form.visible = true;
                    op = form.add(vm.page.vocabulary.createNote());
                    op.addCompleteCallback(noteAddedComplete);
                    break;
                case(ToolAction.EDIT_NOTE) :
                    form.visible = true;
                    op = form.edit(noteContent.selectedNote);
                    op.addCompleteCallback(noteEditComplete);
                    break;
                case(ToolAction.REMOVE_NOTE) :
                    form.visible = true;
                    op = form.remove(noteContent.selectedNote);
                    op.addCompleteCallback(noteRemovedComplete);
                    break;
                case(ToolAction.FILTER) :
                    if (!SimplePopup.curContent != filter) {
                        SimplePopup.show(filter, true, null, AppColors.EDITOR_SHADOW, 0.5);
                    }
                    break;
            }
        }

        private function noteAddedComplete(op:IAsyncOperation):void {
            if (op.isSuccess && op.result == FormOperationResult.OK) {
                if (vm.page.selectedTag) vm.page.countAllNotes = true;
                else vm.page.allNotesAmount++;
                vm.reloadPage();
                noteContent.hideNoteCard();
            }
            form.visible = false;
        }

        private function noteRemovedComplete(op:IAsyncOperation):void {
            if (op.isSuccess && op.result == FormOperationResult.OK) {
                vm.page.allNotesAmount--;
                vm.reloadPage();
                noteContent.hideNoteCard();
            }
            form.visible = false;
        }

        private function noteEditComplete(op:IAsyncOperation):void {
            noteContent.updateSelectedItem();
            form.visible = false;
        }

        private function pageNumChanged(event:Event):void {
            vm.reloadPage();
        }

        private function filterChangedHandler(event:Event):void {
            if (!isActive) return;
            noteContent.hideNoteCard();
            vm.page.number = 0;
            vm.page.countAllNotes = true;
            vm.reloadPage();
            SimplePopup.close();
        }

        private function noteList_selectedItemChangeHandler(event:Event):void {
            if (!isActive) return;
            toolbar.editNoteBtn.enabled = noteContent.selectedNote != null;
            toolbar.removeNoteBtn.enabled = noteContent.selectedNote != null;
        }
        ]]></fx:Script>

    <core:states>
        <s:State name="disabled"/>
        <s:State name="normal"/>
    </core:states>

    <fx:Declarations>
        <tag:TagFilter id="filter"
                       selectedTag="@{vm.page.selectedTag}"
                       tags="{vm.page.vocabulary.tagColl}"
                       width="100%" top="{2*AppSizes.MENU_HEIGHT}" bottom="0"
                       selectedTagChanged="filterChangedHandler(event)"
                       canceled="SimplePopup.close()"/>
    </fx:Declarations>

    <note:NoteContent id="noteContent"
                      width="{width}" height="100%"
                      selectedItem="@{vm.selectedNote}"
                      dataProvider="{vm.page.coll}"
                      page="{vm.page}"
                      toolbar="{toolbar}"
                      actionMenu="{actionMenu}"
                      selectedItemChange="noteList_selectedItemChangeHandler(event)"
                      pageNumChanged="pageNumChanged(event)"/>

</view:SmartView>
