<?xml version="1.0"?>
<view:SmartView xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:view="de.dittner.testmyself.ui.common.view.*"
                xmlns:tag="de.dittner.testmyself.ui.view.noteList.components.tag.*"
                xmlns:note="de.dittner.testmyself.ui.common.note.*"
                xmlns:scroller="de.dittner.testmyself.ui.common.scroller.*">

    <fx:Script><![CDATA[
        import de.dittner.testmyself.ui.common.menu.ToolAction;
        import de.dittner.testmyself.ui.common.menu.ToolActionEvent;
        import de.dittner.testmyself.ui.common.menu.ViewID;
        import de.dittner.testmyself.ui.common.note.NoteRenderOptions;
        import de.dittner.testmyself.ui.common.popup.SimplePopup;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.ui.common.view.ViewModelFactory;
        import de.dittner.testmyself.utils.Values;

        [Bindable]
        public var vm:NoteListVM;

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        override protected function activating():void {
            if (viewInfo.viewID == ViewID.WORD_LIST)
                vm = ViewModelFactory.instance.wordListVM;
            else if (viewInfo.viewID == ViewID.VERB_LIST)
                vm = ViewModelFactory.instance.verbListVM;
            else if (viewInfo.viewID == ViewID.LESSON_LIST)
                vm = ViewModelFactory.instance.lessonListVM;
            else
                throw new Error("Unknown ViewID: " + viewInfo.viewID);
            vm.lockView();
            vm.viewActivated(viewInfo);
            vm.reloadPage();
        }

        private var renderOptions:NoteRenderOptions = new NoteRenderOptions();
        override protected function activate():void {
            vm.unlockView();

            navigationMenu.show();
            actionMenu.showPaginationBar(vm.page);

            toolbar.show();
            toolbar.revert();
            if (viewInfo.viewID == ViewID.LESSON_LIST) toolbar.enableGoBack();
            toolbar.enableAddNote();
            toolbar.enableShowDetails();
            toolbar.enableTransInvert();
            toolbar.enableFilter();
            toolbar.selectTransInvert(renderOptions.inverted);
            toolbar.selectShowDetails(renderOptions.showDetails);

            noteList.renderOptions = renderOptions;

            toolbar.addEventListener(ToolActionEvent.SELECTED, actionSelectedHandler);
            actionMenu.addEventListener(ToolActionEvent.SELECTED, actionSelectedHandler);
        }

        override protected function deactivate():void {
            toolbar.removeEventListener(ToolActionEvent.SELECTED, actionSelectedHandler);
            actionMenu.removeEventListener(ToolActionEvent.SELECTED, actionSelectedHandler);
            vm.viewDeactivated();
        }

        private function actionSelectedHandler(event:ToolActionEvent):void {
            if (!isActive) return;
            switch (event.actionID) {
                case(ToolAction.GO_BACK) :
                    vm.goBack();
                    break;
                case(ToolAction.CREATE_NOTE) :
                    vm.createNote();
                    break;
                case(ToolAction.APPLY_INVERT) :
                    renderOptions.inverted = true;
                    invalidateRenderOptions();
                    break;
                case(ToolAction.DENY_INVERT) :
                    renderOptions.inverted = false;
                    invalidateRenderOptions();
                    break;
                case(ToolAction.HIDE_DETAILS) :
                    renderOptions.showDetails = false;
                    invalidateRenderOptions();
                    break;
                case(ToolAction.SHOW_DETAILS) :
                    renderOptions.showDetails = true;
                    invalidateRenderOptions();
                    break;
                case(ToolAction.PAGE_NUM_CHANGED) :
                    vm.reloadPage();
                    break;
                case(ToolAction.FILTER) :
                    if (!SimplePopup.curContent != filter) {
                        SimplePopup.show(filter, true, null, AppColors.EDITOR_SHADOW, 0.5);
                    }
                    break;
            }
        }

        private function filterChangedHandler(event:Event):void {
            if (!isActive) return;
            vm.page.number = 0;
            vm.page.countAllNotes = true;
            vm.page.selectedTag = filter.selectedTag;
            vm.reloadPage();
            SimplePopup.close();
        }

        private function noteList_selectedItemChangeHandler(event:Event):void {
            if (!isActive || !noteList.selectedItem) return;
            vm.showNote(noteList.selectedIndex);
        }

        private function invalidateRenderOptions():void {
            if (isActive && noteList) noteList.invalidateRenderView();
        }
        ]]></fx:Script>

    <fx:Declarations>
        <tag:TagFilter id="filter"
                       selectedTag="{vm.page.selectedTag}"
                       bgColor="{mainView.appBgColor}"
                       tags="{vm.page.vocabulary.tagColl}"
                       width="{Values.PT768}" horizontalCenter="0"
                       top="{2*AppSizes.MENU_HEIGHT}" bottom="{AppSizes.MENU_HEIGHT}"
                       selectedTagChanged="filterChangedHandler(event)"/>
    </fx:Declarations>

    <scroller:CustomScroller width="100%" maxWidth="{Values.PT798}" height="100%"
                             horizontalCenter="0"
                             horizontalScrollPolicy="off"
                             hasFocusableChildren="false">
        <note:NoteList id="noteList"
                       dataProvider="{vm.page.coll}"
                       width="100%"
                       contentBackgroundAlpha="0"
                       deselectEnabled="true"
                       itemRenderer="de.dittner.testmyself.ui.view.noteList.components.NoteRenderer"
                       selectedItemChange="noteList_selectedItemChangeHandler(event)">
            <note:layout>
                <s:VerticalLayout gap="0" useVirtualLayout="false"/>
            </note:layout>
        </note:NoteList>
    </scroller:CustomScroller>

</view:SmartView>
