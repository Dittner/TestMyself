<?xml version="1.0"?>
<view:SmartView xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:core="de.dittner.testmyself.ui.common.view.*"
                xmlns:mp3="de.dittner.testmyself.ui.common.audio.mp3.*"
                xmlns:navigation="de.dittner.testmyself.ui.view.noteList.components.pagination.*"
                xmlns:utils="de.dittner.testmyself.ui.common.utils.*"
                xmlns:view="de.dittner.testmyself.ui.common.view.*"
                xmlns:common="de.dittner.testmyself.ui.view.noteList.components.*"
                xmlns:theme="de.dittner.testmyself.ui.view.noteList.components.theme.*"
                currentState="inactive">

    <fx:Script><![CDATA[
        import de.dittner.async.IAsyncOperation;
        import de.dittner.testmyself.model.domain.vocabulary.VocabularyID;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.view.ViewModelFactory;
        import de.dittner.testmyself.ui.view.noteList.components.PageLayout;
        import de.dittner.testmyself.ui.view.noteList.components.form.FormOperationResult;
        import de.dittner.testmyself.ui.view.noteList.components.toolbar.ToolAction;
        import de.dittner.testmyself.ui.view.noteList.components.toolbar.ToolbarEvent;

        [Bindable]
        public var vm:NoteListVM;

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        override protected function activating():void {
            vm = ViewModelFactory.instance.noteListVM;
            vm.lockView();
            toolbar.visible = toolbar.includeInLayout = true;
            toolbar.disabledAll();
        }

        override protected function activate():void {
            vm.unlockView();
            vm.viewActivated(viewID);
            vm.reloadPage();

            toolbar.addNoteBtn.enabled = true;
            toolbar.hideDetailsBtn.enabled = true;
            toolbar.transInvertBtn.enabled = true;
            toolbar.filterBtn.enabled = true;
            switch (vm.page.vocabulary.id) {
                case VocabularyID.DE_WORD :
                    setCurrentState("word");
                    break;
                case VocabularyID.DE_VERB :
                    toolbar.hideDetailsBtn.enabled = false;
                    toolbar.transInvertBtn.enabled = false;
                    setCurrentState("verb");
                    break;
                default :
                    throw Error("Unknown vocabulary: " + vm.page.vocabulary.id);
            }
            toolbar.addEventListener(ToolbarEvent.SELECTED, toolActionSelectedHandler);
        }

        override protected function deactivate():void {
            toolbar.removeEventListener(ToolbarEvent.SELECTED, toolActionSelectedHandler);
            vm.viewDeactivated();
            mp3Player.visible = false;
            setCurrentState("inactive");
        }

        private var pageLayoutInfo:PageLayout = new PageLayout();
        private function toolActionSelectedHandler(event:ToolbarEvent):void {
            var op:IAsyncOperation;
            switch (event.toolAction) {
                case(ToolAction.CREATE_NOTE) :
                    form.visible = true;
                    op = form.add(vm.page.vocabulary.createNote());
                    op.addCompleteCallback(noteAddedComplete);
                    break;
                case(ToolAction.EDIT_NOTE) :
                    form.visible = true;
                    op = form.edit(noteList.selectedNote);
                    op.addCompleteCallback(noteEditComplete);
                    break;
                case(ToolAction.REMOVE_NOTE) :
                    form.visible = true;
                    op = form.remove(noteList.selectedNote);
                    op.addCompleteCallback(noteRemovedComplete);
                    break;
                case(ToolAction.FILTER) :
                    if (!filter.visible) filter.visible = true;
                    break;
                case(ToolAction.INVERT) :
                    pageLayoutInfo.inverted = !pageLayoutInfo.inverted;
                    noteList.pageLayout = pageLayoutInfo;
                    break;
                case(ToolAction.HIDE_DETAILS) :
                    pageLayoutInfo.showDetails = false;
                    noteList.pageLayout = pageLayoutInfo;
                    break;
                case(ToolAction.SHOW_DETAILS) :
                    pageLayoutInfo.showDetails = true;
                    noteList.pageLayout = pageLayoutInfo;
                    break;
            }
        }

        private function noteAddedComplete(op:IAsyncOperation):void {
            if (op.isSuccess && op.result == FormOperationResult.OK) {
                if (vm.page.selectedTheme) vm.page.countAllNotes = true;
                else vm.page.allNotesAmount++;
                vm.reloadPage();
            }
            form.visible = false;
        }

        private function noteRemovedComplete(op:IAsyncOperation):void {
            if (op.isSuccess && op.result == FormOperationResult.OK) {
                vm.page.allNotesAmount--;
                vm.reloadPage();
            }
            form.visible = false;
        }

        private function noteEditComplete(op:IAsyncOperation):void {
            if (op.isSuccess && op.result == FormOperationResult.OK) {
                var selectedItem:* = noteList.selectedItem;
                noteList.selectedItem = null;
                noteList.selectedItem = selectedItem;
            }
            form.visible = false;
        }

        private function pageNumChanged(event:Event):void {
            vm.reloadPage();
        }

        private function filterChangedHandler(event:Event):void {
            vm.page.number = 0;
            vm.page.countAllNotes = true;
            vm.reloadPage();
        }

        private function noteList_selectedItemChangeHandler(event:Event):void {
            toolbar.editNoteBtn.enabled = noteList.selectedNote;
            toolbar.removeNoteBtn.enabled = noteList.selectedNote;
        }
        ]]></fx:Script>

    <core:states>
        <s:State name="disabled"/>
        <s:State name="inactive"/>
        <s:State name="word"/>
        <s:State name="verb"/>
    </core:states>

    <!--content bg-->
    <s:Rect width="100%" height="100%">
        <s:fill>
            <s:BitmapFill source="@Embed(source='/assets/menu/screen_bg_pattern.png')"
                          fillMode="repeat"/>
        </s:fill>
    </s:Rect>

    <utils:BG excludeFrom="inactive" width="100%" height="100%" color="#ffFFff"/>

    <s:Scroller width="50%" top="0" bottom="{FOOTER_HEI}"
                excludeFrom="inactive"
                horizontalScrollPolicy="off"
                hasFocusableChildren="false">
        <common:NoteList id="noteList"
                         selectedNote="@{vm.selectedNote}"
                         dataProvider="{vm.page.noteColl}"
                         width="100%"
                         contentBackgroundAlpha="0"
                         deselectEnabled="true"
                         itemRenderer="de.dittner.testmyself.ui.view.noteList.components.renderer.NoteRenderer"
                         itemRenderer.word="de.dittner.testmyself.ui.view.noteList.components.renderer.WordRenderer"
                         itemRenderer.verb="de.dittner.testmyself.ui.view.noteList.components.renderer.VerbRenderer"
                         selectedItemChange="noteList_selectedItemChangeHandler(event)">
            <common:layout>
                <s:VerticalLayout gap="0" useVirtualLayout="false"/>
            </common:layout>
        </common:NoteList>
    </s:Scroller>

    <common:ExampleList id="exampleList"
                        selectedNote="@{vm.selectedExample}"
                        dataProvider="{noteList.selectedNote.exampleColl}"
                        width="50%" top="-1" bottom="{FOOTER_HEI + themesLbl.height}"
                        right="0"
                        excludeFrom="inactive"
                        showTitle="false"
                        hasFocusableChildren="false"/>

    <s:Label id="themesLbl"
             text="{vm.selectedNoteThemes}"
             backgroundAlpha="1" backgroundColor="{AppColors.EDITOR_CONTENT_BG}"
             height="20" bottom="{FOOTER_HEI}" width="50%" paddingLeft="10" paddingRight="10"
             right="00" textAlign="right"
             fontSize="12" verticalAlign="middle"
             maxDisplayedLines="1"
             color="{AppColors.TEXT_DARK}"/>

    <!--footer-->
    <s:Group width="100%" height="{FOOTER_HEI}" bottom="0"
             excludeFrom="inactive">
        <s:Rect width="100%" bottom="0" height="100%">
            <s:fill>
                <s:SolidColor color="{AppColors.SCREEN_FOOTER_BG}"/>
            </s:fill>
        </s:Rect>

        <mp3:MP3Player id="mp3Player"
                       comment="{vm.audioComment}"
                       width="350"
                       left="{PADDING - 10}"
                       verticalCenter="0"
                       removeRecordEnabled="false"
                       visible="{mp3Player.hasComment}"
                       skinClass="de.dittner.testmyself.ui.common.audio.skins.MP3PlayerSkin"/>

        <navigation:PaginationBar id="paginationBar"
                                  allNotesAmount="{vm.page.allNotesAmount}"
                                  notesOnCurPage="{vm.page.noteColl.length}"
                                  pageSize="{vm.page.size}"
                                  pageNum="@{vm.page.number}"
                                  left="{PADDING}" right="{PADDING}"
                                  height="100%"
                                  pageNumChanged="pageNumChanged(event)"/>

        <s:Label id="titleLbl"
                 text="{vm.viewTitle}"
                 right="10" textAlign="right"
                 fontSize="14" verticalCenter="1"
                 maxDisplayedLines="1"
                 color="{AppColors.TEXT_DARK}"/>

    </s:Group>

    <s:Group width="100%" height="100%"
             excludeFrom="inactive"
             visible="{filter.visible}"
             mouseEnabled="{filter.visible}">
        <s:Rect width="100%" height="100%">
            <s:fill>
                <s:SolidColor color="{AppColors.EDITOR_SHADOW}" alpha=".5"/>
            </s:fill>
        </s:Rect>

        <theme:ThemeFilter id="filter"
                           selectedTheme="@{vm.page.selectedTheme}"
                           themes="{vm.page.vocabulary.themeColl}"
                           width="350"
                           visible="false"
                           right="0"
                           height="100%"
                           selectedThemeChanged="filterChangedHandler(event)"/>
    </s:Group>

</view:SmartView>
