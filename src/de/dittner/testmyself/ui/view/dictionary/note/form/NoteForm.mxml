<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:audio="de.dittner.testmyself.ui.common.audio.*"
         xmlns:editor="de.dittner.testmyself.ui.common.editor.*"
         xmlns:input="de.dittner.testmyself.ui.common.input.*"
         xmlns:list="de.dittner.testmyself.ui.common.list.*"
         xmlns:button="de.dittner.testmyself.ui.common.button.*"
         xmlns:listBox="de.dittner.testmyself.ui.view.dictionary.common.articleList.*"
         xmlns:examplelist="de.dittner.testmyself.ui.view.dictionary.common.examplesForm.*"
         xmlns:form="de.dittner.testmyself.ui.view.dictionary.verb.form.*"
         xmlns:common2="de.dittner.testmyself.ui.view.dictionary.common.*"
         currentState="normal">

    <fx:Script><![CDATA[
        import de.dittner.async.utils.invalidateOf;
        import de.dittner.testmyself.model.AppConfig;
        import de.dittner.testmyself.model.ModuleName;
        import de.dittner.testmyself.model.domain.note.INote;
        import de.dittner.testmyself.model.domain.theme.ITheme;
        import de.dittner.testmyself.model.domain.verb.IVerb;
        import de.dittner.testmyself.model.domain.verb.Verb;
        import de.dittner.testmyself.model.domain.word.IWord;
        import de.dittner.testmyself.model.domain.word.Word;
        import de.dittner.testmyself.model.domain.word.WordArticle;
        import de.dittner.testmyself.ui.common.editor.EditorBg;
        import de.dittner.testmyself.ui.common.renderer.AddedThemeItemRenderer;
        import de.dittner.testmyself.ui.common.renderer.ThemeItemRenderer;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.ui.view.dictionary.common.NoteUtils;

        import mx.collections.ArrayCollection;

        import spark.components.supportClasses.TextInputOperation;
        import spark.events.TextOperationEvent;

        protected const HGAP:uint = 10;
        protected const VGAP:uint = 5;

        //--------------------------------------
        //  mode
        //--------------------------------------
        private var _mode:String = "";
        [Bindable("modeChanged")]
        public function get mode():String {return _mode;}
        public function setMode(value:String):void {
            if (_mode != value) {
                _mode = value;
                dispatchEvent(new Event("modeChanged"));
            }
        }

        //--------------------------------------
        // isCreateMode
        //--------------------------------------
        [Bindable("modeChanged")]
        public function get isCreateMode():Boolean {return mode == "add";}

        //--------------------------------------
        // isEditMode
        //--------------------------------------
        [Bindable("modeChanged")]
        public function get isEditMode():Boolean {return mode == "edit";}

        //--------------------------------------
        // isRemoveMode
        //--------------------------------------
        [Bindable("modeChanged")]
        public function get isRemoveMode():Boolean {return mode == "remove";}

        //--------------------------------------
        //  title
        //--------------------------------------
        private var _title:String = "";
        [Bindable("titleChanged")]
        public function get title():String {return _title;}
        public function set title(value:String):void {
            if (_title != value) {
                _title = value;
                dispatchEvent(new Event("titleChanged"));
            }
        }

        //--------------------------------------
        //  themes
        //--------------------------------------
        private var _themes:ArrayCollection = new ArrayCollection();
        [Bindable("themesChanged")]
        public function get themes():ArrayCollection {return _themes;}
        public function set themes(value:ArrayCollection):void {
            if (_themes != value) {
                _themes = value;
                dispatchEvent(new Event("themesChanged"));
            }
        }

        //--------------------------------------
        // moduleName
        //--------------------------------------
        private var moduleNameChanged:Boolean = false;
        private var _moduleName:String;
        [Bindable("moduleNameChanged")]
        public function get moduleName():String {return _moduleName;}
        public function set moduleName(value:String):void {
            if (_moduleName != value) {
                _moduleName = value;
                moduleNameChanged = true;
                invalidateProperties();
                dispatchEvent(new Event("moduleNameChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        private function clear():void {
            articleBox.selectedItem = "";
            wordInput.text = "";
            wordOptionsInput.text = "";
            descriptionArea.text = "";
            addThemeInput.text = "";
            titleArea.text = "";
            audioRecorder.clear();
            examplesForm.clear();
            invalidNotifier.alpha = 0;
            themes = new ArrayCollection();
        }

        override protected function commitProperties():void {
            super.commitProperties()
            if (moduleNameChanged) {
                moduleNameChanged = false;
                switch (moduleName) {
                    case ModuleName.WORD :
                        currentState = "word";
                        break;
                    case ModuleName.VERB :
                        currentState = "verb";
                        break;
                    case ModuleName.LESSON :
                        currentState = "lesson";
                        break;
                    default :
                        currentState = "normal";
                }
            }
        }

        public function add():void {
            setMode("add");
            dispatchEvent(new Event("taskChanged"));
            invalidateOf(focusTextInput);
        }

        public function edit(note:INote):void {
            setMode("edit");

            if (note is Word) {
                var word:IWord = note as IWord;
                articleBox.selectedItem = word.article;
                wordInput.text = word.title;
                wordOptionsInput.text = word.options;
                descriptionArea.text = word.description;
                audioRecorder.comment = word.audioComment;
            }
            else if (note is Verb) {
                var verb:IVerb = note as IVerb;
                verbInputsForm.infinitive = verb.title;
                verbInputsForm.present = verb.present;
                verbInputsForm.past = verb.past;
                verbInputsForm.perfect = verb.perfect;
                descriptionArea.text = verb.description;
                audioRecorder.comment = verb.audioComment;
            }
            else {
                titleArea.text = note.title;
                descriptionArea.text = note.description;
                audioRecorder.comment = note.audioComment;
            }

            invalidateDisplayList();
            invalidateOf(focusTextInput);
            dispatchEvent(new Event("taskChanged"));
        }

        private function focusTextInput():void {
            if (stage && AppConfig.isDesktop) stage.focus = currentState == "lesson" || currentState == "normal" ? titleArea.area : wordInput;
        }

        public function remove(note:INote):void {
            setMode("remove");
            removeNoteTitleLbl.text = '«' + note.title + '»';
        }

        public function close():void {
            if (isOpen) {
                clear();
                setMode("");
            }
        }

        public function get isOpen():Boolean {
            return isCreateMode || isEditMode || isRemoveMode;
        }

        public function notifyInvalidData(msg:String):void {
            if (invalidNotifier) {
                invalidNotifier.text = msg;
                invalidNotifier.show();
            }
        }

        public function correctText():void {
            if (currentState == "lesson" || currentState == "normal") {
                titleArea.text = NoteUtils.correctText(titleArea.text);
                descriptionArea.text = NoteUtils.correctText(descriptionArea.text);
            }
        }

        private function themesRendererFunc(item:Object):IFactory {
            var theme:ITheme = item as ITheme;
            if (theme.id == -1) return new ClassFactory(AddedThemeItemRenderer);
            else return new ClassFactory(ThemeItemRenderer);
        }

        private function applyBtnEnabled(mode:String, audioRecording:Boolean):Boolean {
            return isRemoveMode || !audioRecording;
        }

        private function wordValidationHandler(event:TextOperationEvent):void {
            if (event.operation is TextInputOperation) {
                var inputOperation:TextInputOperation = event.operation as TextInputOperation;
                var regexp:RegExp = NoteUtils.LETTERS;
                var match:Object = regexp.exec(inputOperation.text);
                if (match == null) event.preventDefault();
            }
        }

        private function modeToApplyBtnTitle(mode:String):String {
            return isCreateMode ? "Hinzufügen" : isEditMode ? "Speichern" : "Entfernen";
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="disabled"/>
        <s:State name="normal"/>
        <s:State name="word"/>
        <s:State name="verb"/>
        <s:State name="lesson"/>
    </s:states>

    <editor:EditorBg width="100%"
                     height="100%"
                     title="{title}"
                     mode="{mode}"/>

    <s:Rect left="{EditorBg.BORDER_THICKNESS}"
            right="{EditorBg.BORDER_THICKNESS}"
            bottom="{EditorBg.BORDER_THICKNESS}"
            height="{AppSizes.EDITOR_FOOTER_HEIGHT}">
        <s:fill>
            <s:SolidColor color="{AppColors.SCREEN_HEADER_BG}"/>
        </s:fill>
    </s:Rect>

    <button:WhiteButton id="formatBtn"
                        width="250" right="15" top="5"
                        label="Formatieren"
                        visible="{!isRemoveMode}"/>

    <!--ADD EDIT MODE-->

    <s:HGroup width="100%" top="50" bottom="55" gap="{HGAP}" paddingLeft="15" paddingRight="15"
              visible="{!isRemoveMode}" includeInLayout="{!isRemoveMode}">
        <s:VGroup width="100%" height="100%" gap="{VGAP}">
            <s:HGroup width="100%" height="100%" gap="{HGAP}">
                <listBox:ListBox id="articleBox"
                                 verticalScrollPolicy="off"
                                 requireSelection="true"
                                 visible="false" includeInLayout="false"
                                 visible.word="true" includeInLayout.word="true"
                                 visible.verb="false" includeInLayout.verb="false"
                                 width="110"
                                 itemRenderer="de.dittner.testmyself.ui.view.dictionary.common.articleList.ArticleItemRenderer"
                                 skinClass="de.dittner.testmyself.ui.view.dictionary.common.articleList.ListBoxSkin"
                                 dataProvider="{new ArrayCollection(WordArticle.ARTICLES)}"/>

                <s:VGroup width="100%" height="100%" gap="{VGAP}">
                    <input:TextAreaForm id="titleArea"
                                        visible="true" includeInLayout="true"
                                        visible.word="false" includeInLayout.word="false"
                                        visible.verb="false" includeInLayout.verb="false"
                                        width="100%" height="100%"
                                        title="Deutschsatz"
                                        maxChars="{AppConfig.MAX_TEXT_LENGTH}"/>

                    <s:HGroup width="100%" gap="{HGAP}">
                        <input:TextInputForm id="wordInput"
                                             visible="false" includeInLayout="false"
                                             visible.word="true" includeInLayout.word="true"
                                             width="50%"
                                             maxChars="{AppConfig.MAX_WORD_LENGTH}"
                                             changing="wordValidationHandler(event)"
                                             title="Deutschtwort"/>

                        <input:TextInputForm id="wordOptionsInput"
                                             visible="false" includeInLayout="false"
                                             visible.word="true" includeInLayout.word="true"
                                             width="50%"
                                             maxChars="{AppConfig.MAX_WORD_LENGTH}"
                                             title="Zusätzliche Daten"/>
                    </s:HGroup>

                    <s:HGroup width="100%" height="100%" gap="{HGAP}">
                        <form:VerbInputsForm id="verbInputsForm"
                                             width="100%" height="100%"
                                             visible="false" includeInLayout="false"
                                             visible.word="false" includeInLayout.word="false"
                                             visible.verb="true" includeInLayout.verb="true"/>

                        <input:TextAreaForm id="descriptionArea"
                                            width="100%" height="100%"
                                            maxChars="{AppConfig.MAX_TEXT_LENGTH}"
                                            title="Übersetzung"/>
                    </s:HGroup>

                </s:VGroup>

            </s:HGroup>

            <examplelist:ExamplesForm id="examplesForm"
                                      width="100%" height="100%"
                                      visible="false" includeInLayout="false"
                                      visible.word="true" includeInLayout.word="true"
                                      visible.verb="true" includeInLayout.verb="true"
                                      mainForm="{this}"/>

            <s:Group width="100%" height="72">
                <audio:AudioRecorder id="audioRecorder"
                                     height="72" left="118" left.lesson="0" left.normal="0" right="0"/>
            </s:Group>
        </s:VGroup>

        <s:VGroup width="250" height="100%" gap="{VGAP}"
                  visible.normal="false" includeInLayout.normal="false"
                  visible.lesson="{!isCreateMode}" includeInLayout.lesson="{!isCreateMode}"
                  visible.word="true" includeInLayout.word="true"
                  visible.verb="true" includeInLayout.verb="true">
            <list:ListForm id="themesList"
                           width="100%" height="100%"
                           dataProvider="{themes}"
                           title="Themenliste"
                           itemRendererFunction="themesRendererFunc"
                           allowMultipleSelection.lesson="false"
                           allowMultipleSelection="true">
                <list:layout>
                    <s:VerticalLayout gap="0" useVirtualLayout="false"/>
                </list:layout>
            </list:ListForm>

            <s:HGroup width="100%" height="72" gap="0" verticalAlign="bottom"
                      visible.lesson="false" includeInLayout.lesson="false">
                <input:TextInputForm id="addThemeInput"
                                     width="100%"
                                     maxChars="{AppConfig.MAX_THEME_NAME_LENGTH}"
                                     title="Neuer Themaname"/>

                <button:BitmapButton id="addThemeBtn"
                                     description="Neues Thema hinzufügen"
                                     upImage="@Embed(source='/assets/button/add_element_btn_up.png')"
                                     downImage="@Embed(source='/assets/button/add_element_btn_down.png')"/>
            </s:HGroup>
        </s:VGroup>

    </s:HGroup>

    <s:HGroup left="10" right="15" height="42" verticalAlign="middle" bottom="5" gap="{HGAP}">
        <common2:InvalidNotifier id="invalidNotifier"
                                 height="30" width="100%"/>

        <button:GrayButton id="cancelBtn" width="250"
                           label="Abbrechen"/>

        <button:BlackButton id="applyBtn"
                            width="250"
                            label="{modeToApplyBtnTitle(mode)}"
                            enabled="{applyBtnEnabled(mode, audioRecorder.isRecording)}"
                            click="correctText()"/>
    </s:HGroup>

    <!--REMOVE MODE-->

    <s:Label id="removeTitleLbl"
             visible="{isRemoveMode}"
             width="100%"
             textAlign="center"
             verticalCenter="-100"
             color="{AppColors.TEXT_DARK}" fontSize="24"
             text="Sind Sie sicher, das Sie entfernen möchten?"/>

    <s:Label id="removeNoteTitleLbl"
             visible="{isRemoveMode}"
             width="100%" verticalCenter="0"
             color="{AppColors.TEXT_DARK}" fontSize="18" fontWeight="bold"
             textAlign="center" verticalAlign="middle"/>

</s:Group>
