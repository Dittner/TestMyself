<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:input="de.dittner.testmyself.ui.common.input.*"
         xmlns:common="de.dittner.testmyself.ui.common.*"
         creationComplete="creationCompleteHandler(event)"
         currentState="up">

    <fx:Script><![CDATA[
        import com.greensock.TweenLite;
        import com.greensock.easing.Expo;

        import de.dittner.testmyself.model.Device;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.FontName;
        import de.dittner.testmyself.utils.Values;

        import mx.events.FlexEvent;

        private static const THUMB_BTN_HEI:uint = Device.isDesktop ? Values.PT15 : Values.PT50;

        //--------------------------------------
        //  text
        //--------------------------------------
        private var _text:String = "";
        [Bindable("textChanged")]
        public function get text():String {return _text;}
        public function set text(value:String):void {
            if (_text != value) {
                _text = value;
                dispatchEvent(new Event("textChanged"));
            }
        }

        private function get collapsedYPos():Number {return -height;}

        //--------------------------------------
        //  isMoving
        //--------------------------------------
        private var _isMoving:Boolean = false;
        [Bindable("isMovingChanged")]
        public function get isMoving():Boolean {return _isMoving;}
        public function set isMoving(value:Boolean):void {
            if (_isMoving != value) {
                _isMoving = value;
                dispatchEvent(new Event("isMovingChanged"));
            }
        }

        //--------------------------------------
        //  isOpened
        //--------------------------------------
        private var _isOpened:Boolean = false;
        [Bindable("isOpenedChanged")]
        public function get isOpened():Boolean {return _isOpened;}
        public function set isOpened(value:Boolean):void {
            if (_isOpened != value) {
                _isOpened = value;
                dispatchEvent(new Event("isOpenedChanged"));
            }
        }

        public function open():void {
            if (!isOpened && !isMoving) {
                isMoving = true;
                cont.y = collapsedYPos;
                TweenLite.to(cont, 1, {y: 0, ease: Expo.easeOut, onComplete: animationComplete});
            }
        }

        public function hide():void {
            if (isOpened && !isMoving) {
                isMoving = true;
                cont.y = 0;
                TweenLite.to(cont, 1, {y: collapsedYPos, ease: Expo.easeOut, onComplete: animationComplete});
            }
        }

        private function animationComplete():void {
            isOpened = !isOpened;
            isMoving = false;
        }

        private function creationCompleteHandler(event:FlexEvent):void {
            cont.y = collapsedYPos;
        }
        ]]></fx:Script>

    <s:states>
        <s:State name="over"/>
        <s:State name="up"/>
        <s:State name="down"/>
    </s:states>

    <s:Group id="cont" width="100%" height="{height}">
        <common:BG percentWidth="100" percentHeight="100" fillColor="#e4d2d9"/>
        <common:BG percentWidth="100" height="{Values.PT5}" bottom="0" fillColor="#0"/>

        <input:HistoryTextArea id="textArea"
                               fontSize="{Values.PT18}"
                               text="@{text}"
                               fontFamily="{FontName.MYRIAD}"
                               color="{AppColors.BLACK}"
                               left="{Values.PT15}" top="{Values.PT10}" right="{Values.PT15}" bottom="{Values.PT10}"/>

        <s:Group width="{Values.PT100}" height="{THUMB_BTN_HEI}"
                 horizontalCenter="0"
                 bottom="{-THUMB_BTN_HEI}"
                 mouseDown="setCurrentState('down')"
                 mouseOver="setCurrentState('over')"
                 mouseUp="setCurrentState('up')"
                 mouseOut="setCurrentState('up')"
                 click="isOpened ? hide() : open()">

            <s:Rect width="100%" height="{Values.PT25}"
                    bottomLeftRadiusX="{Values.PT8}"
                    bottomLeftRadiusY="{Values.PT8}"
                    bottomRightRadiusX="{Values.PT8}"
                    bottomRightRadiusY="{Values.PT8}">
                <s:fill>
                    <s:SolidColor id="thumbBg"
                                  color="#272b2d"
                                  color.down="#0"
                                  alpha="0.8"
                                  alpha.over="1"
                                  alpha.down="1"/>
                </s:fill>
            </s:Rect>
            <s:Label color="{AppColors.TEXT_LIGHT}"
                     mouseEnabled="false" mouseChildren="false"
                     fontSize="{Values.PT15}"
                     fontFamily="{FontName.MYRIAD_COND}"
                     top="{Values.PT6}" horizontalCenter="0"
                     text="{resourceManager.getString('app', 'BOARD')}"/>
        </s:Group>

    </s:Group>

</s:Group>
