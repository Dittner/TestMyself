<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:main="de.dittner.testmyself.ui.view.main.*"
         xmlns:utils="de.dittner.testmyself.ui.common.utils.*"
         xmlns:menu="de.dittner.testmyself.ui.common.menu.*"
         xmlns:toobar="de.dittner.testmyself.ui.view.noteList.components.toolbar.*"
         xmlns:form="de.dittner.testmyself.ui.view.noteList.components.form.*"
         implements="de.dittner.testmyself.ui.view.main.IMainView"
         creationComplete="creationCompleteHandler(event)"
         currentState="normal">
    <fx:Script><![CDATA[
        import de.dittner.testmyself.logging.CLog;
        import de.dittner.testmyself.logging.LogPanel;
        import de.dittner.testmyself.model.Device;
        import de.dittner.testmyself.model.domain.language.LanguageID;
        import de.dittner.testmyself.ui.common.popup.SimplePopup;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.ui.common.view.ViewBase;
        import de.dittner.testmyself.ui.common.view.ViewModelFactory;
        import de.dittner.testmyself.utils.TapEventKit;
        import de.dittner.testmyself.utils.Values;

        import mx.collections.ArrayCollection;
        import mx.events.FlexEvent;

        [Bindable]
        public var vm:MainVM;

        //--------------------------------------
        //  interface
        //--------------------------------------

        public function get menu():MenuBoard {return menuBoard;}
        public function get toolbar():NoteToolbar {return noteToolbar;}
        public function get form():NoteForm {return noteForm;}

        //--------------------------------------
        //  isActive
        //--------------------------------------
        private var _isActive:Boolean = false;
        public function get isActive():Boolean {return _isActive;}

        //--------------------------------------
        //  selectedView
        //--------------------------------------
        private var _selectedView:ViewBase;
        private var selectedViewChanged:Boolean;
        [Bindable("selectedViewChanged")]
        public function get selectedView():ViewBase {return _selectedView;}
        public function set selectedView(value:ViewBase):void {
            if (_selectedView != value) {
                _selectedView = value;
                selectedViewChanged = true;
                invalidateProperties();
                dispatchEvent(new Event("selectedViewChanged"));
            }
        }

        //--------------------------------------
        //  viewLocked
        //--------------------------------------
        private var _viewLocked:Boolean = false;
        [Bindable("viewLockedChanged")]
        public function get viewLocked():Boolean {return _viewLocked;}
        public function set viewLocked(value:Boolean):void {
            if (_viewLocked != value) {
                _viewLocked = value;
                currentState = _viewLocked ? "lock" : "normal";
                dispatchEvent(new Event("viewLockedChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        public function activate():void {
            _isActive = true;
            if (!vm) {
                vm = ViewModelFactory.instance.mainVM;
                vm.viewActivated(this);
            }
        }

        override protected function commitProperties():void {
            super.commitProperties();
            if (selectedViewChanged) {
                selectedViewChanged = false;
                if (selectedView) {
                    viewCont.removeAllElements();
                    viewCont.addElement(selectedView);
                }
            }
        }

        private function creationCompleteHandler(event:FlexEvent):void {
            SimplePopup.container.percentHeight = 100;
            SimplePopup.container.percentWidth = 100;
            logsLayer.addElement(SimplePopup.container);
            TapEventKit.registerLongTapListener(parent, showHideConsole, new Rectangle(0, 0, 3000, INTERACTION_AREA_HEI));
        }

        private static const INTERACTION_AREA_HEI:uint = Values.PT50;
        private var logPanel:LogPanel;

        private function showHideConsole():void {
            if (!logPanel) {
                logPanel = new LogPanel();
                logPanel.closeBtn.addEventListener(MouseEvent.CLICK, logPanelClosedClicked);
                logPanel.logNoteColl = new ArrayCollection(CLog.logBank);
                CLog.changeCallback = scrollToLastLogNote;
            }

            if (logPanel.parent) {
                logsLayer.removeElement(logPanel);
            }
            else {
                logsLayer.addElement(logPanel);
                logPanel.y = INTERACTION_AREA_HEI;
            }
        }

        private function logPanelClosedClicked(event:MouseEvent):void {
            if (logPanel.parent) {
                logsLayer.removeElement(logPanel);
            }
        }

        private function scrollToLastLogNote():void {
            if (logPanel.parent) logPanel.refresh();
        }
        ]]></fx:Script>
    <fx:Binding source="vm.viewNavigator.selectedView" destination="selectedView"/>
    <fx:Binding source="vm.viewLocked" destination="viewLocked"/>

    <s:states>
        <s:State name="normal"/>
        <s:State name="lock"/>
    </s:states>

    <s:transitions>
        <s:Transition fromState="*" toState="lock" autoReverse="true">
            <s:Parallel>
                <s:Fade duration="1000" target="{busyIndicatorLayer}" alphaFrom="0" alphaTo="1"/>
            </s:Parallel>
        </s:Transition>
    </s:transitions>

    <utils:BG width="100%" height="100%" color="#3d3f4b"/>

    <s:Group id="viewCont"
             mouseEnabled="false" mouseChildren="false"
             mouseEnabled.normal="true" mouseChildren.normal="true"
             left="{menuBoard.visible ? AppSizes.MENU_WID : 0}"
             right="{noteToolbar.visible ? AppSizes.MENU_WID : 0}"
             height="100%"/>

    <menu:MenuBoard id="menuBoard"
                    left="0"
                    visible="false"
                    includeInLayout="false"
                    width="{AppSizes.MENU_WID}" height="100%"
                    selectedViewMenuID="@{vm.viewNavigator.selectedViewID}"
                    hasNetworkConnection="{vm.appModel.hasNetworkConnection}"
                    disabledAlpha="1"
                    enabled="false"
                    enabled.normal="{!vm.menuLocked}"/>

    <toobar:NoteToolbar id="noteToolbar"
                        visible="false"
                        includeInLayout="false"
                        right="0"
                        width="{AppSizes.MENU_WID}"
                        height="100%"/>

    <form:NoteForm id="noteForm"
                   left="{AppSizes.MENU_WID}" right="0" height="100%"
                   visible="false"
                   isArticleEnabled="{vm.appModel.selectedLanguage.id == LanguageID.DE}"
                   isPresentVerbFormEnabled="{vm.appModel.selectedLanguage.id == LanguageID.DE}"
                   isOptionalTemplatesEnabled="{vm.appModel.selectedLanguage.id == LanguageID.DE}"
                   isLoadMp3FileFromDudenEnabled="{vm.appModel.selectedLanguage.id == LanguageID.DE}"
                   menu="{menuBoard}"
                   hasNetworkConnection="{vm.appModel.hasNetworkConnection}"/>

    <main:CommentsBoard id="commentsBoard"
                        mouseEnabled="false" mouseChildren="false"
                        mouseEnabled.normal="true" mouseChildren.normal="true"
                        text="@{vm.commentsBoardText}"
                        right="0" left="0" height="{Values.PT300}" top="0"/>

    <s:Group id="popupLayer"
             mouseEnabled="false" mouseChildren="false"
             mouseEnabled.normal="true" mouseChildren.normal="true"
             width="100%" height="100%"/>

    <s:Group id="busyIndicatorLayer"
             left="0" right="0" height="100%"
             mouseEnabled="false" mouseChildren="false"
             alpha.normal="0" alpha.lock="1">
        <s:Rect width="100%" height="100%"
                visible="{busyIndicatorLayer.alpha != 0}">
            <s:fill>
                <s:SolidColor color="{AppColors.PINK}" alpha="0.15"/>
            </s:fill>
        </s:Rect>
    </s:Group>

    <s:Group id="logsLayer" width="100%" height="100%"/>

    <utils:BG visible="{Device.verticalPadding}"
              includeInLayout="{Device.verticalPadding}"
              width="100%" height="{Device.verticalPadding}" top="{-Device.verticalPadding}" color="#3d3f4b"/>

</s:Group>
