<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:list="de.dittner.testmyself.ui.common.list.*"
         xmlns:main="de.dittner.testmyself.ui.view.main.*"
         height="100%" width="100%"
         creationComplete="creationCompleteHandler(event)">
    <fx:Script><![CDATA[
        import de.dittner.testmyself.logging.CLog;
        import de.dittner.testmyself.logging.LogPanel;
        import de.dittner.testmyself.ui.common.popup.SimplePopup;
        import de.dittner.testmyself.ui.common.renderer.SeparatorItemRenderer;
        import de.dittner.testmyself.ui.common.renderer.SeparatorVo;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.view.ViewBase;
        import de.dittner.testmyself.ui.common.view.ViewInfo;
        import de.dittner.testmyself.ui.common.view.ViewModelFactory;
        import de.dittner.testmyself.utils.TapEventKit;
        import de.dittner.testmyself.utils.Values;

        import mx.collections.ArrayCollection;
        import mx.events.FlexEvent;

        [Bindable]
        public var vm:MainVM;

        //--------------------------------------
        //  isActive
        //--------------------------------------
        private var _isActive:Boolean = false;
        public function get isActive():Boolean {return _isActive;}

        //--------------------------------------
        //  selectedView
        //--------------------------------------
        private var _selectedView:ViewBase;
        private var selectedViewChanged:Boolean;
        public function get selectedView():ViewBase {return _selectedView;}
        public function set selectedView(value:ViewBase):void {
            if (_selectedView != value) {
                _selectedView = value;
                selectedViewChanged = true;
                invalidateProperties();
            }
        }

        //--------------------------------------
        //  viewLocked
        //--------------------------------------
        private var _viewLocked:Boolean = false;
        [Bindable("viewLockedChanged")]
        public function get viewLocked():Boolean {return _viewLocked;}
        public function set viewLocked(value:Boolean):void {
            if (_viewLocked != value) {
                _viewLocked = value;
                currentState = _viewLocked ? "lock" : "normal";
                dispatchEvent(new Event("viewLockedChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        public function activate():void {
            _isActive = true;
            if (!vm) vm = ViewModelFactory.instance.mainVM;
        }

        override protected function commitProperties():void {
            super.commitProperties();
            if (selectedViewChanged) {
                selectedViewChanged = false;
                if (selectedView) {
                    viewCont.removeAllElements();
                    viewCont.addElement(selectedView);
                }
            }
        }

        private function selectedViewInfoHandler():void {
            if (viewList.selectedItem is ViewInfo)
                vm.viewNavigator.navigate(viewList.selectedItem as ViewInfo);
        }

        private function screenRendererFunc(item:Object):IFactory {
            if (item is ViewInfo) return new ClassFactory(VewListItemRenderer);
            else if (item is SeparatorVo) return new ClassFactory(SeparatorItemRenderer);
            else throw new Error("Unknown screen item type:" + item.toString() + "!");
        }

        private function creationCompleteHandler(event:FlexEvent):void {
            SimplePopup.container.percentHeight = 100;
            SimplePopup.container.percentWidth = 100;
            popupLayer.addElement(SimplePopup.container);
            TapEventKit.registerLongTapListener(parent, showHideConsole, new Rectangle(0, 0, 3000, INTERACTION_AREA_HEI));
        }

        private static const INTERACTION_AREA_HEI:uint = Values.PT80;
        private var logPanel:LogPanel;

        private function showHideConsole():void {
            if (!logPanel) {
                logPanel = new LogPanel();
                logPanel.logNoteColl = new ArrayCollection(CLog.logBank);
                CLog.changeCallback = scrollToLastLogNote;
            }

            if (logPanel.parent) {
                popupLayer.removeElement(logPanel);
            }
            else {
                popupLayer.addElement(logPanel);
                logPanel.y = INTERACTION_AREA_HEI;
            }
        }

        private function scrollToLastLogNote():void {
            if (logPanel.parent) logPanel.refresh();
        }
        ]]></fx:Script>
    <fx:Binding source="vm.viewNavigator.selectedView" destination="selectedView"/>
    <fx:Binding source="vm.viewLocked" destination="viewLocked"/>

    <s:states>
        <s:State name="disabled"/>
        <s:State name="normal"/>
        <s:State name="lock"/>
    </s:states>

    <s:transitions>
        <s:Transition fromState="*" toState="lock" autoReverse="true">
            <s:Parallel>
                <s:Fade duration="1000" target="{busyIndicatorLayer}" alphaFrom="0" alphaTo="1"/>
            </s:Parallel>
        </s:Transition>
    </s:transitions>

    <s:BitmapImage width="100%" height="100%"
                   source="@Embed('/assets/app_bg.png')"
                   fillMode="scale" scaleMode="zoom" smooth="true"/>

    <s:Group id="viewCont"
             left="66" right="0"
             height="100%"/>

    <s:Rect width="66" height="100%">
        <s:fill>
            <s:SolidColor color="{AppColors.VIEW_LIST_BG}"/>
        </s:fill>
    </s:Rect>

    <list:SelectableDataGroup id="viewList"
                              width="66" height="100%"
                              minWidth="0"
                              dataProvider="{vm.viewFactory.viewInfoColl}"
                              selectedItem="{vm.viewNavigator.selectedViewInfo}"
                              contentBackgroundAlpha="0"
                              autoLayout="true"
                              itemRendererFunction="screenRendererFunc"
                              selectedItemChange="selectedViewInfoHandler()">
        <list:layout>
            <s:VerticalLayout gap="0" useVirtualLayout="false" variableRowHeight="true"/>
        </list:layout>
    </list:SelectableDataGroup>

    <main:CommentsBoard id="commentsBoard"
                        text="{vm.commentsBoardText}"
                        width="400" height="100%" right="0"/>

    <s:Group id="popupLayer" width="100%" height="100%"/>

    <s:Group id="busyIndicatorLayer"
             width="100%" height="100%"
             alpha.normal="0" alpha.disabled="0" alpha.lock="1">
        <s:Rect width="100%" height="100%"
                visible="{busyIndicatorLayer.alpha != 0}">
            <s:fill>
                <s:SolidColor color="0xff1d5d" alpha="0.1"/>
            </s:fill>
        </s:Rect>
        <s:BitmapImage verticalCenter="0" horizontalCenter="33"
                       source="@Embed(source='/assets/clock_icon.png')"/>
    </s:Group>

</s:Group>
