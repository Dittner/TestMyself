<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:main="de.dittner.testmyself.ui.view.main.*"
         xmlns:menu="de.dittner.testmyself.ui.common.menu.*"
         xmlns:common="de.dittner.testmyself.ui.common.*"
         xmlns:view="de.dittner.testmyself.ui.common.view.*"
         implements="de.dittner.testmyself.ui.view.main.IMainView"
         creationComplete="creationCompleteHandler(event)"
         currentState="normal">
    <fx:Script><![CDATA[
        import de.dittner.testmyself.logging.CLog;
        import de.dittner.testmyself.logging.LogPanel;
        import de.dittner.testmyself.model.Device;
        import de.dittner.testmyself.ui.common.menu.IActionMenu;
        import de.dittner.testmyself.ui.common.menu.INavigationMenu;
        import de.dittner.testmyself.ui.common.menu.INoteToolbar;
        import de.dittner.testmyself.ui.common.menu.NavigationMenuEvent;
        import de.dittner.testmyself.ui.common.popup.SimplePopup;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.AppSizes;
        import de.dittner.testmyself.ui.common.view.ViewInfo;
        import de.dittner.testmyself.ui.common.view.ViewModelFactory;
        import de.dittner.testmyself.utils.TapEventKit;
        import de.dittner.testmyself.utils.Values;

        import mx.collections.ArrayCollection;
        import mx.events.FlexEvent;

        [Bindable]
        public var vm:MainVM;

        //--------------------------------------
        //  appBgColor
        //--------------------------------------
        private var _appBgColor:uint = AppColors.APP_BG_WHITE;
        [Bindable("appBgColorChanged")]
        public function get appBgColor():uint {return _appBgColor;}
        public function set appBgColor(value:uint):void {
            if (_appBgColor != value) {
                _appBgColor = value;
                dispatchEvent(new Event("appBgColorChanged"));
            }
        }

        //--------------------------------------
        //  interface
        //--------------------------------------

        public function get navigationMenu():INavigationMenu {return navigationMenuComponent;}
        public function get actionMenu():IActionMenu {return actionMenuComponent;}
        public function get toolbar():INoteToolbar {return noteToolbar;}

        //--------------------------------------
        //  isActive
        //--------------------------------------
        private var _isActive:Boolean = false;
        public function get isActive():Boolean {return _isActive;}

        //--------------------------------------
        //  viewLocked
        //--------------------------------------
        private var _viewLocked:Boolean = false;
        [Bindable("viewLockedChanged")]
        public function get viewLocked():Boolean {return _viewLocked;}
        public function set viewLocked(value:Boolean):void {
            if (_viewLocked != value) {
                _viewLocked = value;
                currentState = _viewLocked ? "lock" : "normal";
                dispatchEvent(new Event("viewLockedChanged"));
            }
        }

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        public function activate():void {
            _isActive = true;
            if (!vm) {
                vm = ViewModelFactory.instance.mainVM;
                vm.viewActivated(viewNavigator);
            }
        }

        private function creationCompleteHandler(event:FlexEvent):void {
            SimplePopup.container.percentHeight = 100;
            SimplePopup.container.percentWidth = 100;
            popupLayer.addElement(SimplePopup.container);
            TapEventKit.registerLongTapListener(parent, showHideConsole, new Rectangle(0, 0, 3000, INTERACTION_AREA_HEI));
        }

        private static const INTERACTION_AREA_HEI:uint = Values.PT50;
        private var logPanel:LogPanel;

        private function showHideConsole():void {
            if (!logPanel) {
                logPanel = new LogPanel();
                logPanel.closeBtn.addEventListener(MouseEvent.CLICK, logPanelClosedClicked);
                logPanel.logNoteColl = new ArrayCollection(CLog.logBank);
                CLog.changeCallback = scrollToLastLogNote;
            }

            if (logPanel.parent) {
                logsLayer.removeElement(logPanel);
            }
            else {
                logsLayer.addElement(logPanel);
                logPanel.y = INTERACTION_AREA_HEI + AppSizes.MENU_HEIGHT;
            }
        }

        private function logPanelClosedClicked(event:MouseEvent):void {
            if (logPanel.parent) {
                logsLayer.removeElement(logPanel);
            }
        }

        private function scrollToLastLogNote():void {
            if (logPanel.parent) logPanel.refresh();
        }

        private function selectedViewChanged(event:NavigationMenuEvent):void {
            viewNavigator.clearViewStack();
            viewNavigator.navigate(new ViewInfo(event.viewID));
        }

        private function viewContHeight(noteToolbarYPos:Number, height:Number):Number {
            return height - 2 * AppSizes.MENU_HEIGHT - noteToolbarYPos;
        }
        ]]></fx:Script>
    <fx:Binding source="vm.viewLocked" destination="viewLocked"/>
    <fx:Binding source="vm.appModel.settings.appBgColor" destination="appBgColor"/>

    <s:states>
        <s:State name="normal"/>
        <s:State name="lock"/>
    </s:states>

    <s:transitions>
        <s:Transition fromState="*" toState="lock" autoReverse="true">
            <s:Parallel>
                <s:Fade duration="1000" target="{busyIndicatorLayer}" alphaFrom="0" alphaTo="1"/>
            </s:Parallel>
        </s:Transition>
    </s:transitions>

    <menu:NoteToolbar id="noteToolbar"
                      width="100%" height="{AppSizes.MENU_HEIGHT}"
                      disabledAlpha="1"
                      enabled="false"
                      enabled.normal="true"/>

    <menu:NavigationMenu id="navigationMenuComponent"
                         width="100%" height="{AppSizes.MENU_HEIGHT}"
                         selectedViewInfo="{viewNavigator.selectedViewInfo}"
                         hasNetworkConnection="{vm.appModel.hasNetworkConnection}"
                         disabledAlpha="1"
                         enabled="false"
                         enabled.normal="true"
                         selected="selectedViewChanged(event)"/>

    <view:ViewNavigator id="viewNavigator"
                        mouseEnabled="false" mouseChildren="false"
                        mouseEnabled.normal="true" mouseChildren.normal="true"
                        width="{width}"
                        mainView="{this}"
                        y="{noteToolbar.y + AppSizes.MENU_HEIGHT}"
                        height="{viewContHeight(noteToolbar.y, height)}"/>

    <menu:ActionMenu id="actionMenuComponent"
                     width="100%" height="{AppSizes.MENU_HEIGHT}"
                     bottom="0"
                     disabledAlpha="1"
                     enabled="false"
                     enabled.normal="true"/>

    <s:Group id="popupLayer"
             mouseEnabled="false" mouseChildren="false"
             mouseEnabled.normal="true" mouseChildren.normal="true"
             width="100%" height="100%"/>

    <main:CommentsBoard id="commentsBoard"
                        disabledAlpha="1"
                        enabled="false"
                        enabled.normal="true"
                        text="@{vm.commentsBoardText}"
                        right="0" left="0" height="50%" top="0"/>

    <common:BG visible="{Device.verticalPadding}"
               includeInLayout="{Device.verticalPadding}"
               percentWidth="100" height="{Device.verticalPadding}" top="{-Device.verticalPadding}" fillColor="#1c1c1f"/>

    <s:Group id="busyIndicatorLayer"
             left="0" right="0" top="{-Device.verticalPadding}" bottom="0"
             mouseEnabled="true" mouseChildren="true"
             alpha.normal="0" alpha.lock="1">
        <s:Rect width="100%" height="100%"
                visible="{busyIndicatorLayer.alpha != 0}">
            <s:fill>
                <s:SolidColor color="{AppColors.PINK}" alpha="0.15"/>
            </s:fill>
        </s:Rect>
    </s:Group>

    <s:Group id="logsLayer" width="100%" height="100%"/>

    <!--<skins:Separator left="{Values.PT20}" percentHeight="100" color="#ff0000"/>
    <skins:Separator horizontalCenter="0" percentHeight="100" color="#ff0000"/>
    <skins:Separator right="{Values.PT20}" percentHeight="100" color="#ff0000"/>-->

</s:Group>
