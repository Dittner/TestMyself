<?xml version="1.0"?>
<view:SmartView xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:list="de.dittner.testmyself.ui.common.list.*"
                xmlns:view="de.dittner.testmyself.ui.common.view.*">

    <fx:Metadata>
        [Event(name="testSelected", type="flash.events.Event")]
    </fx:Metadata>

    <fx:Script><![CDATA[
        import de.dittner.testmyself.model.domain.test.Test;
        import de.dittner.testmyself.ui.common.utils.AppColors;
        import de.dittner.testmyself.ui.common.utils.FontName;
        import de.dittner.testmyself.ui.common.view.ViewModelFactory;
        import de.dittner.testmyself.utils.Values;

        import spark.events.IndexChangeEvent;

        private static const PAD:int = Values.PT15;

        //----------------------------------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------------------------------

        [Bindable]
        public var vm:TestListVM;

        override protected function activating():void {
            vm = ViewModelFactory.instance.testListVM;
            vm.lockView();
            vm.viewActivated(viewInfo);
        }

        override protected function activate():void {
            actionMenu.hide();
            toolbar.show();
            toolbar.revert();
            vm.unlockView();
        }

        override protected function deactivate():void {
            vm.viewDeactivated();
            wordTestList.selectedItem = null;
            verbTestList.selectedItem = null;
            lessonTestList.selectedItem = null;
        }

        private function selectedTestHandler(event:IndexChangeEvent):void {
            var list:ListForm = event.currentTarget as ListForm;
            if (list && list.selectedItem is Test) {
                vm.showTestPresets(list.selectedItem);
                dispatchEvent(new Event("testSelected"));
            }
        }
        ]]></fx:Script>

    <view:layout>
        <s:VerticalLayout gap="{PAD}" paddingLeft="{PAD}" paddingRight="{PAD}" paddingTop="{PAD}"
                          horizontalAlign="center"/>
    </view:layout>

    <s:Label width="100%" maxWidth="{Values.PT768}"
             text="{resourceManager.getString('app', 'PleaseChooseTheDesiredTest')}"
             fontFamily="{FontName.MYRIAD}"
             fontStyle="italic"
             fontSize="{Values.PT18}"
             color="{AppColors.BLACK}"/>

    <list:ListForm id="wordTestList"
                   verticalScrollPolicy="off"
                   horizontalScrollPolicy="off"
                   width="100%" maxWidth="{Values.PT768}"
                   dataProvider="{vm.wordVocabularyTestColl}"
                   title="{resourceManager.getString('app', 'Words')}"
                   itemRenderer="de.dittner.testmyself.ui.view.testList.renderer.TestInfoRenderer"
                   change="selectedTestHandler(event)">
        <list:layout>
            <s:VerticalLayout gap="0" useVirtualLayout="false"/>
        </list:layout>
    </list:ListForm>

    <list:ListForm id="verbTestList"
                   verticalScrollPolicy="off"
                   horizontalScrollPolicy="off"
                   width="100%" maxWidth="{Values.PT768}"
                   dataProvider="{vm.verbVocabularyTestColl}"
                   title="{resourceManager.getString('app', 'IrregularVerbs')}"
                   itemRenderer="de.dittner.testmyself.ui.view.testList.renderer.TestInfoRenderer"
                   change="selectedTestHandler(event)">
        <list:layout>
            <s:VerticalLayout gap="0" useVirtualLayout="false"/>
        </list:layout>
    </list:ListForm>

    <list:ListForm id="lessonTestList"
                   verticalScrollPolicy="off"
                   horizontalScrollPolicy="off"
                   width="100%" maxWidth="{Values.PT768}"
                   dataProvider="{vm.lessonVocabularyTestColl}"
                   title="{resourceManager.getString('app', 'Lessons')}"
                   itemRenderer="de.dittner.testmyself.ui.view.testList.renderer.TestInfoRenderer"
                   change="selectedTestHandler(event)">
        <list:layout>
            <s:VerticalLayout gap="0" useVirtualLayout="false"/>
        </list:layout>
    </list:ListForm>

</view:SmartView>
